// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'schema.schema.gql.dart';

// **************************************************************************
// BuiltValueGenerator
// **************************************************************************

const G_FilterKind _$gFilterKindsearch = const G_FilterKind._('search');
const G_FilterKind _$gFilterKindAND = const G_FilterKind._('AND');
const G_FilterKind _$gFilterKindOR = const G_FilterKind._('OR');
const G_FilterKind _$gFilterKindNOT = const G_FilterKind._('NOT');
const G_FilterKind _$gFilterKindeq = const G_FilterKind._('eq');
const G_FilterKind _$gFilterKindeq_not = const G_FilterKind._('eq_not');
const G_FilterKind _$gFilterKindGin = const G_FilterKind._('Gin');
const G_FilterKind _$gFilterKindnot_in = const G_FilterKind._('not_in');
const G_FilterKind _$gFilterKindlt = const G_FilterKind._('lt');
const G_FilterKind _$gFilterKindlte = const G_FilterKind._('lte');
const G_FilterKind _$gFilterKindgt = const G_FilterKind._('gt');
const G_FilterKind _$gFilterKindgte = const G_FilterKind._('gte');
const G_FilterKind _$gFilterKindcontains = const G_FilterKind._('contains');
const G_FilterKind _$gFilterKindnot_contains =
    const G_FilterKind._('not_contains');
const G_FilterKind _$gFilterKindstarts_with =
    const G_FilterKind._('starts_with');
const G_FilterKind _$gFilterKindnot_starts_with =
    const G_FilterKind._('not_starts_with');
const G_FilterKind _$gFilterKindends_with = const G_FilterKind._('ends_with');
const G_FilterKind _$gFilterKindnot_ends_with =
    const G_FilterKind._('not_ends_with');
const G_FilterKind _$gFilterKindcontains_all =
    const G_FilterKind._('contains_all');
const G_FilterKind _$gFilterKindcontains_some =
    const G_FilterKind._('contains_some');
const G_FilterKind _$gFilterKindcontains_none =
    const G_FilterKind._('contains_none');
const G_FilterKind _$gFilterKindrelational_single =
    const G_FilterKind._('relational_single');
const G_FilterKind _$gFilterKindrelational_every =
    const G_FilterKind._('relational_every');
const G_FilterKind _$gFilterKindrelational_some =
    const G_FilterKind._('relational_some');
const G_FilterKind _$gFilterKindrelational_none =
    const G_FilterKind._('relational_none');

G_FilterKind _$gFilterKindValueOf(String name) {
  switch (name) {
    case 'search':
      return _$gFilterKindsearch;
    case 'AND':
      return _$gFilterKindAND;
    case 'OR':
      return _$gFilterKindOR;
    case 'NOT':
      return _$gFilterKindNOT;
    case 'eq':
      return _$gFilterKindeq;
    case 'eq_not':
      return _$gFilterKindeq_not;
    case 'Gin':
      return _$gFilterKindGin;
    case 'not_in':
      return _$gFilterKindnot_in;
    case 'lt':
      return _$gFilterKindlt;
    case 'lte':
      return _$gFilterKindlte;
    case 'gt':
      return _$gFilterKindgt;
    case 'gte':
      return _$gFilterKindgte;
    case 'contains':
      return _$gFilterKindcontains;
    case 'not_contains':
      return _$gFilterKindnot_contains;
    case 'starts_with':
      return _$gFilterKindstarts_with;
    case 'not_starts_with':
      return _$gFilterKindnot_starts_with;
    case 'ends_with':
      return _$gFilterKindends_with;
    case 'not_ends_with':
      return _$gFilterKindnot_ends_with;
    case 'contains_all':
      return _$gFilterKindcontains_all;
    case 'contains_some':
      return _$gFilterKindcontains_some;
    case 'contains_none':
      return _$gFilterKindcontains_none;
    case 'relational_single':
      return _$gFilterKindrelational_single;
    case 'relational_every':
      return _$gFilterKindrelational_every;
    case 'relational_some':
      return _$gFilterKindrelational_some;
    case 'relational_none':
      return _$gFilterKindrelational_none;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_FilterKind> _$gFilterKindValues =
    new BuiltSet<G_FilterKind>(const <G_FilterKind>[
  _$gFilterKindsearch,
  _$gFilterKindAND,
  _$gFilterKindOR,
  _$gFilterKindNOT,
  _$gFilterKindeq,
  _$gFilterKindeq_not,
  _$gFilterKindGin,
  _$gFilterKindnot_in,
  _$gFilterKindlt,
  _$gFilterKindlte,
  _$gFilterKindgt,
  _$gFilterKindgte,
  _$gFilterKindcontains,
  _$gFilterKindnot_contains,
  _$gFilterKindstarts_with,
  _$gFilterKindnot_starts_with,
  _$gFilterKindends_with,
  _$gFilterKindnot_ends_with,
  _$gFilterKindcontains_all,
  _$gFilterKindcontains_some,
  _$gFilterKindcontains_none,
  _$gFilterKindrelational_single,
  _$gFilterKindrelational_every,
  _$gFilterKindrelational_some,
  _$gFilterKindrelational_none,
]);

const G_MutationInputFieldKind _$gMutationInputFieldKindscalar =
    const G_MutationInputFieldKind._('scalar');
const G_MutationInputFieldKind _$gMutationInputFieldKindrichText =
    const G_MutationInputFieldKind._('richText');
const G_MutationInputFieldKind _$gMutationInputFieldKindrichTextWithEmbeds =
    const G_MutationInputFieldKind._('richTextWithEmbeds');
const G_MutationInputFieldKind _$gMutationInputFieldKindGenum =
    const G_MutationInputFieldKind._('Genum');
const G_MutationInputFieldKind _$gMutationInputFieldKindrelation =
    const G_MutationInputFieldKind._('relation');
const G_MutationInputFieldKind _$gMutationInputFieldKindunion =
    const G_MutationInputFieldKind._('union');
const G_MutationInputFieldKind _$gMutationInputFieldKindvirtual =
    const G_MutationInputFieldKind._('virtual');

G_MutationInputFieldKind _$gMutationInputFieldKindValueOf(String name) {
  switch (name) {
    case 'scalar':
      return _$gMutationInputFieldKindscalar;
    case 'richText':
      return _$gMutationInputFieldKindrichText;
    case 'richTextWithEmbeds':
      return _$gMutationInputFieldKindrichTextWithEmbeds;
    case 'Genum':
      return _$gMutationInputFieldKindGenum;
    case 'relation':
      return _$gMutationInputFieldKindrelation;
    case 'union':
      return _$gMutationInputFieldKindunion;
    case 'virtual':
      return _$gMutationInputFieldKindvirtual;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_MutationInputFieldKind> _$gMutationInputFieldKindValues =
    new BuiltSet<G_MutationInputFieldKind>(const <G_MutationInputFieldKind>[
  _$gMutationInputFieldKindscalar,
  _$gMutationInputFieldKindrichText,
  _$gMutationInputFieldKindrichTextWithEmbeds,
  _$gMutationInputFieldKindGenum,
  _$gMutationInputFieldKindrelation,
  _$gMutationInputFieldKindunion,
  _$gMutationInputFieldKindvirtual,
]);

const G_MutationKind _$gMutationKindcreate = const G_MutationKind._('create');
const G_MutationKind _$gMutationKindpublish = const G_MutationKind._('publish');
const G_MutationKind _$gMutationKindunpublish =
    const G_MutationKind._('unpublish');
const G_MutationKind _$gMutationKindupdate = const G_MutationKind._('update');
const G_MutationKind _$gMutationKindupsert = const G_MutationKind._('upsert');
const G_MutationKind _$gMutationKinddelete = const G_MutationKind._('delete');
const G_MutationKind _$gMutationKindupdateMany =
    const G_MutationKind._('updateMany');
const G_MutationKind _$gMutationKindpublishMany =
    const G_MutationKind._('publishMany');
const G_MutationKind _$gMutationKindunpublishMany =
    const G_MutationKind._('unpublishMany');
const G_MutationKind _$gMutationKinddeleteMany =
    const G_MutationKind._('deleteMany');

G_MutationKind _$gMutationKindValueOf(String name) {
  switch (name) {
    case 'create':
      return _$gMutationKindcreate;
    case 'publish':
      return _$gMutationKindpublish;
    case 'unpublish':
      return _$gMutationKindunpublish;
    case 'update':
      return _$gMutationKindupdate;
    case 'upsert':
      return _$gMutationKindupsert;
    case 'delete':
      return _$gMutationKinddelete;
    case 'updateMany':
      return _$gMutationKindupdateMany;
    case 'publishMany':
      return _$gMutationKindpublishMany;
    case 'unpublishMany':
      return _$gMutationKindunpublishMany;
    case 'deleteMany':
      return _$gMutationKinddeleteMany;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_MutationKind> _$gMutationKindValues =
    new BuiltSet<G_MutationKind>(const <G_MutationKind>[
  _$gMutationKindcreate,
  _$gMutationKindpublish,
  _$gMutationKindunpublish,
  _$gMutationKindupdate,
  _$gMutationKindupsert,
  _$gMutationKinddelete,
  _$gMutationKindupdateMany,
  _$gMutationKindpublishMany,
  _$gMutationKindunpublishMany,
  _$gMutationKinddeleteMany,
]);

const G_OrderDirection _$gOrderDirectionasc = const G_OrderDirection._('asc');
const G_OrderDirection _$gOrderDirectiondesc = const G_OrderDirection._('desc');

G_OrderDirection _$gOrderDirectionValueOf(String name) {
  switch (name) {
    case 'asc':
      return _$gOrderDirectionasc;
    case 'desc':
      return _$gOrderDirectiondesc;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_OrderDirection> _$gOrderDirectionValues =
    new BuiltSet<G_OrderDirection>(const <G_OrderDirection>[
  _$gOrderDirectionasc,
  _$gOrderDirectiondesc,
]);

const G_RelationInputCardinality _$gRelationInputCardinalityone =
    const G_RelationInputCardinality._('one');
const G_RelationInputCardinality _$gRelationInputCardinalitymany =
    const G_RelationInputCardinality._('many');

G_RelationInputCardinality _$gRelationInputCardinalityValueOf(String name) {
  switch (name) {
    case 'one':
      return _$gRelationInputCardinalityone;
    case 'many':
      return _$gRelationInputCardinalitymany;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_RelationInputCardinality> _$gRelationInputCardinalityValues =
    new BuiltSet<G_RelationInputCardinality>(const <G_RelationInputCardinality>[
  _$gRelationInputCardinalityone,
  _$gRelationInputCardinalitymany,
]);

const G_RelationInputKind _$gRelationInputKindcreate =
    const G_RelationInputKind._('create');
const G_RelationInputKind _$gRelationInputKindupdate =
    const G_RelationInputKind._('update');

G_RelationInputKind _$gRelationInputKindValueOf(String name) {
  switch (name) {
    case 'create':
      return _$gRelationInputKindcreate;
    case 'update':
      return _$gRelationInputKindupdate;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_RelationInputKind> _$gRelationInputKindValues =
    new BuiltSet<G_RelationInputKind>(const <G_RelationInputKind>[
  _$gRelationInputKindcreate,
  _$gRelationInputKindupdate,
]);

const G_RelationKind _$gRelationKindregular = const G_RelationKind._('regular');
const G_RelationKind _$gRelationKindunion = const G_RelationKind._('union');

G_RelationKind _$gRelationKindValueOf(String name) {
  switch (name) {
    case 'regular':
      return _$gRelationKindregular;
    case 'union':
      return _$gRelationKindunion;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<G_RelationKind> _$gRelationKindValues =
    new BuiltSet<G_RelationKind>(const <G_RelationKind>[
  _$gRelationKindregular,
  _$gRelationKindunion,
]);

const Guntitled _$guntitledbase = const Guntitled._('base');
const Guntitled _$guntitledlocalization = const Guntitled._('localization');
const Guntitled _$guntitledcombined = const Guntitled._('combined');

Guntitled _$guntitledValueOf(String name) {
  switch (name) {
    case 'base':
      return _$guntitledbase;
    case 'localization':
      return _$guntitledlocalization;
    case 'combined':
      return _$guntitledcombined;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<Guntitled> _$guntitledValues =
    new BuiltSet<Guntitled>(const <Guntitled>[
  _$guntitledbase,
  _$guntitledlocalization,
  _$guntitledcombined,
]);

const GAssetOrderByInput _$gAssetOrderByInputid_ASC =
    const GAssetOrderByInput._('id_ASC');
const GAssetOrderByInput _$gAssetOrderByInputid_DESC =
    const GAssetOrderByInput._('id_DESC');
const GAssetOrderByInput _$gAssetOrderByInputcreatedAt_ASC =
    const GAssetOrderByInput._('createdAt_ASC');
const GAssetOrderByInput _$gAssetOrderByInputcreatedAt_DESC =
    const GAssetOrderByInput._('createdAt_DESC');
const GAssetOrderByInput _$gAssetOrderByInputupdatedAt_ASC =
    const GAssetOrderByInput._('updatedAt_ASC');
const GAssetOrderByInput _$gAssetOrderByInputupdatedAt_DESC =
    const GAssetOrderByInput._('updatedAt_DESC');
const GAssetOrderByInput _$gAssetOrderByInputpublishedAt_ASC =
    const GAssetOrderByInput._('publishedAt_ASC');
const GAssetOrderByInput _$gAssetOrderByInputpublishedAt_DESC =
    const GAssetOrderByInput._('publishedAt_DESC');
const GAssetOrderByInput _$gAssetOrderByInputhandle_ASC =
    const GAssetOrderByInput._('handle_ASC');
const GAssetOrderByInput _$gAssetOrderByInputhandle_DESC =
    const GAssetOrderByInput._('handle_DESC');
const GAssetOrderByInput _$gAssetOrderByInputfileName_ASC =
    const GAssetOrderByInput._('fileName_ASC');
const GAssetOrderByInput _$gAssetOrderByInputfileName_DESC =
    const GAssetOrderByInput._('fileName_DESC');
const GAssetOrderByInput _$gAssetOrderByInputheight_ASC =
    const GAssetOrderByInput._('height_ASC');
const GAssetOrderByInput _$gAssetOrderByInputheight_DESC =
    const GAssetOrderByInput._('height_DESC');
const GAssetOrderByInput _$gAssetOrderByInputwidth_ASC =
    const GAssetOrderByInput._('width_ASC');
const GAssetOrderByInput _$gAssetOrderByInputwidth_DESC =
    const GAssetOrderByInput._('width_DESC');
const GAssetOrderByInput _$gAssetOrderByInputsize_ASC =
    const GAssetOrderByInput._('size_ASC');
const GAssetOrderByInput _$gAssetOrderByInputsize_DESC =
    const GAssetOrderByInput._('size_DESC');
const GAssetOrderByInput _$gAssetOrderByInputmimeType_ASC =
    const GAssetOrderByInput._('mimeType_ASC');
const GAssetOrderByInput _$gAssetOrderByInputmimeType_DESC =
    const GAssetOrderByInput._('mimeType_DESC');

GAssetOrderByInput _$gAssetOrderByInputValueOf(String name) {
  switch (name) {
    case 'id_ASC':
      return _$gAssetOrderByInputid_ASC;
    case 'id_DESC':
      return _$gAssetOrderByInputid_DESC;
    case 'createdAt_ASC':
      return _$gAssetOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gAssetOrderByInputcreatedAt_DESC;
    case 'updatedAt_ASC':
      return _$gAssetOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gAssetOrderByInputupdatedAt_DESC;
    case 'publishedAt_ASC':
      return _$gAssetOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gAssetOrderByInputpublishedAt_DESC;
    case 'handle_ASC':
      return _$gAssetOrderByInputhandle_ASC;
    case 'handle_DESC':
      return _$gAssetOrderByInputhandle_DESC;
    case 'fileName_ASC':
      return _$gAssetOrderByInputfileName_ASC;
    case 'fileName_DESC':
      return _$gAssetOrderByInputfileName_DESC;
    case 'height_ASC':
      return _$gAssetOrderByInputheight_ASC;
    case 'height_DESC':
      return _$gAssetOrderByInputheight_DESC;
    case 'width_ASC':
      return _$gAssetOrderByInputwidth_ASC;
    case 'width_DESC':
      return _$gAssetOrderByInputwidth_DESC;
    case 'size_ASC':
      return _$gAssetOrderByInputsize_ASC;
    case 'size_DESC':
      return _$gAssetOrderByInputsize_DESC;
    case 'mimeType_ASC':
      return _$gAssetOrderByInputmimeType_ASC;
    case 'mimeType_DESC':
      return _$gAssetOrderByInputmimeType_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GAssetOrderByInput> _$gAssetOrderByInputValues =
    new BuiltSet<GAssetOrderByInput>(const <GAssetOrderByInput>[
  _$gAssetOrderByInputid_ASC,
  _$gAssetOrderByInputid_DESC,
  _$gAssetOrderByInputcreatedAt_ASC,
  _$gAssetOrderByInputcreatedAt_DESC,
  _$gAssetOrderByInputupdatedAt_ASC,
  _$gAssetOrderByInputupdatedAt_DESC,
  _$gAssetOrderByInputpublishedAt_ASC,
  _$gAssetOrderByInputpublishedAt_DESC,
  _$gAssetOrderByInputhandle_ASC,
  _$gAssetOrderByInputhandle_DESC,
  _$gAssetOrderByInputfileName_ASC,
  _$gAssetOrderByInputfileName_DESC,
  _$gAssetOrderByInputheight_ASC,
  _$gAssetOrderByInputheight_DESC,
  _$gAssetOrderByInputwidth_ASC,
  _$gAssetOrderByInputwidth_DESC,
  _$gAssetOrderByInputsize_ASC,
  _$gAssetOrderByInputsize_DESC,
  _$gAssetOrderByInputmimeType_ASC,
  _$gAssetOrderByInputmimeType_DESC,
]);

const GBodyMeasurements _$gBodyMeasurementsChest =
    const GBodyMeasurements._('Chest');
const GBodyMeasurements _$gBodyMeasurementsHip =
    const GBodyMeasurements._('Hip');
const GBodyMeasurements _$gBodyMeasurementsWaist =
    const GBodyMeasurements._('Waist');
const GBodyMeasurements _$gBodyMeasurementsRight_arm =
    const GBodyMeasurements._('Right_arm');
const GBodyMeasurements _$gBodyMeasurementsLeft_arm =
    const GBodyMeasurements._('Left_arm');

GBodyMeasurements _$gBodyMeasurementsValueOf(String name) {
  switch (name) {
    case 'Chest':
      return _$gBodyMeasurementsChest;
    case 'Hip':
      return _$gBodyMeasurementsHip;
    case 'Waist':
      return _$gBodyMeasurementsWaist;
    case 'Right_arm':
      return _$gBodyMeasurementsRight_arm;
    case 'Left_arm':
      return _$gBodyMeasurementsLeft_arm;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GBodyMeasurements> _$gBodyMeasurementsValues =
    new BuiltSet<GBodyMeasurements>(const <GBodyMeasurements>[
  _$gBodyMeasurementsChest,
  _$gBodyMeasurementsHip,
  _$gBodyMeasurementsWaist,
  _$gBodyMeasurementsRight_arm,
  _$gBodyMeasurementsLeft_arm,
]);

const GCategoryOrderByInput _$gCategoryOrderByInputid_ASC =
    const GCategoryOrderByInput._('id_ASC');
const GCategoryOrderByInput _$gCategoryOrderByInputid_DESC =
    const GCategoryOrderByInput._('id_DESC');
const GCategoryOrderByInput _$gCategoryOrderByInputcreatedAt_ASC =
    const GCategoryOrderByInput._('createdAt_ASC');
const GCategoryOrderByInput _$gCategoryOrderByInputcreatedAt_DESC =
    const GCategoryOrderByInput._('createdAt_DESC');
const GCategoryOrderByInput _$gCategoryOrderByInputupdatedAt_ASC =
    const GCategoryOrderByInput._('updatedAt_ASC');
const GCategoryOrderByInput _$gCategoryOrderByInputupdatedAt_DESC =
    const GCategoryOrderByInput._('updatedAt_DESC');
const GCategoryOrderByInput _$gCategoryOrderByInputpublishedAt_ASC =
    const GCategoryOrderByInput._('publishedAt_ASC');
const GCategoryOrderByInput _$gCategoryOrderByInputpublishedAt_DESC =
    const GCategoryOrderByInput._('publishedAt_DESC');
const GCategoryOrderByInput _$gCategoryOrderByInputtitle_ASC =
    const GCategoryOrderByInput._('title_ASC');
const GCategoryOrderByInput _$gCategoryOrderByInputtitle_DESC =
    const GCategoryOrderByInput._('title_DESC');
const GCategoryOrderByInput _$gCategoryOrderByInputcategoryTitle_ASC =
    const GCategoryOrderByInput._('categoryTitle_ASC');
const GCategoryOrderByInput _$gCategoryOrderByInputcategoryTitle_DESC =
    const GCategoryOrderByInput._('categoryTitle_DESC');

GCategoryOrderByInput _$gCategoryOrderByInputValueOf(String name) {
  switch (name) {
    case 'id_ASC':
      return _$gCategoryOrderByInputid_ASC;
    case 'id_DESC':
      return _$gCategoryOrderByInputid_DESC;
    case 'createdAt_ASC':
      return _$gCategoryOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gCategoryOrderByInputcreatedAt_DESC;
    case 'updatedAt_ASC':
      return _$gCategoryOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gCategoryOrderByInputupdatedAt_DESC;
    case 'publishedAt_ASC':
      return _$gCategoryOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gCategoryOrderByInputpublishedAt_DESC;
    case 'title_ASC':
      return _$gCategoryOrderByInputtitle_ASC;
    case 'title_DESC':
      return _$gCategoryOrderByInputtitle_DESC;
    case 'categoryTitle_ASC':
      return _$gCategoryOrderByInputcategoryTitle_ASC;
    case 'categoryTitle_DESC':
      return _$gCategoryOrderByInputcategoryTitle_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GCategoryOrderByInput> _$gCategoryOrderByInputValues =
    new BuiltSet<GCategoryOrderByInput>(const <GCategoryOrderByInput>[
  _$gCategoryOrderByInputid_ASC,
  _$gCategoryOrderByInputid_DESC,
  _$gCategoryOrderByInputcreatedAt_ASC,
  _$gCategoryOrderByInputcreatedAt_DESC,
  _$gCategoryOrderByInputupdatedAt_ASC,
  _$gCategoryOrderByInputupdatedAt_DESC,
  _$gCategoryOrderByInputpublishedAt_ASC,
  _$gCategoryOrderByInputpublishedAt_DESC,
  _$gCategoryOrderByInputtitle_ASC,
  _$gCategoryOrderByInputtitle_DESC,
  _$gCategoryOrderByInputcategoryTitle_ASC,
  _$gCategoryOrderByInputcategoryTitle_DESC,
]);

const GCategoryTitle _$gCategoryTitleExercises =
    const GCategoryTitle._('Exercises');
const GCategoryTitle _$gCategoryTitleTestimonials =
    const GCategoryTitle._('Testimonials');

GCategoryTitle _$gCategoryTitleValueOf(String name) {
  switch (name) {
    case 'Exercises':
      return _$gCategoryTitleExercises;
    case 'Testimonials':
      return _$gCategoryTitleTestimonials;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GCategoryTitle> _$gCategoryTitleValues =
    new BuiltSet<GCategoryTitle>(const <GCategoryTitle>[
  _$gCategoryTitleExercises,
  _$gCategoryTitleTestimonials,
]);

const GCycle _$gCycleone = const GCycle._('one');
const GCycle _$gCycletwo = const GCycle._('two');
const GCycle _$gCyclethree = const GCycle._('three');

GCycle _$gCycleValueOf(String name) {
  switch (name) {
    case 'one':
      return _$gCycleone;
    case 'two':
      return _$gCycletwo;
    case 'three':
      return _$gCyclethree;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GCycle> _$gCycleValues = new BuiltSet<GCycle>(const <GCycle>[
  _$gCycleone,
  _$gCycletwo,
  _$gCyclethree,
]);

const GDocumentFileTypes _$gDocumentFileTypesjpg =
    const GDocumentFileTypes._('jpg');
const GDocumentFileTypes _$gDocumentFileTypesodp =
    const GDocumentFileTypes._('odp');
const GDocumentFileTypes _$gDocumentFileTypesods =
    const GDocumentFileTypes._('ods');
const GDocumentFileTypes _$gDocumentFileTypesodt =
    const GDocumentFileTypes._('odt');
const GDocumentFileTypes _$gDocumentFileTypespng =
    const GDocumentFileTypes._('png');
const GDocumentFileTypes _$gDocumentFileTypessvg =
    const GDocumentFileTypes._('svg');
const GDocumentFileTypes _$gDocumentFileTypestxt =
    const GDocumentFileTypes._('txt');
const GDocumentFileTypes _$gDocumentFileTypeswebp =
    const GDocumentFileTypes._('webp');
const GDocumentFileTypes _$gDocumentFileTypesdocx =
    const GDocumentFileTypes._('docx');
const GDocumentFileTypes _$gDocumentFileTypespdf =
    const GDocumentFileTypes._('pdf');
const GDocumentFileTypes _$gDocumentFileTypeshtml =
    const GDocumentFileTypes._('html');
const GDocumentFileTypes _$gDocumentFileTypesdoc =
    const GDocumentFileTypes._('doc');
const GDocumentFileTypes _$gDocumentFileTypesxlsx =
    const GDocumentFileTypes._('xlsx');
const GDocumentFileTypes _$gDocumentFileTypesxls =
    const GDocumentFileTypes._('xls');
const GDocumentFileTypes _$gDocumentFileTypespptx =
    const GDocumentFileTypes._('pptx');
const GDocumentFileTypes _$gDocumentFileTypesppt =
    const GDocumentFileTypes._('ppt');

GDocumentFileTypes _$gDocumentFileTypesValueOf(String name) {
  switch (name) {
    case 'jpg':
      return _$gDocumentFileTypesjpg;
    case 'odp':
      return _$gDocumentFileTypesodp;
    case 'ods':
      return _$gDocumentFileTypesods;
    case 'odt':
      return _$gDocumentFileTypesodt;
    case 'png':
      return _$gDocumentFileTypespng;
    case 'svg':
      return _$gDocumentFileTypessvg;
    case 'txt':
      return _$gDocumentFileTypestxt;
    case 'webp':
      return _$gDocumentFileTypeswebp;
    case 'docx':
      return _$gDocumentFileTypesdocx;
    case 'pdf':
      return _$gDocumentFileTypespdf;
    case 'html':
      return _$gDocumentFileTypeshtml;
    case 'doc':
      return _$gDocumentFileTypesdoc;
    case 'xlsx':
      return _$gDocumentFileTypesxlsx;
    case 'xls':
      return _$gDocumentFileTypesxls;
    case 'pptx':
      return _$gDocumentFileTypespptx;
    case 'ppt':
      return _$gDocumentFileTypesppt;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GDocumentFileTypes> _$gDocumentFileTypesValues =
    new BuiltSet<GDocumentFileTypes>(const <GDocumentFileTypes>[
  _$gDocumentFileTypesjpg,
  _$gDocumentFileTypesodp,
  _$gDocumentFileTypesods,
  _$gDocumentFileTypesodt,
  _$gDocumentFileTypespng,
  _$gDocumentFileTypessvg,
  _$gDocumentFileTypestxt,
  _$gDocumentFileTypeswebp,
  _$gDocumentFileTypesdocx,
  _$gDocumentFileTypespdf,
  _$gDocumentFileTypeshtml,
  _$gDocumentFileTypesdoc,
  _$gDocumentFileTypesxlsx,
  _$gDocumentFileTypesxls,
  _$gDocumentFileTypespptx,
  _$gDocumentFileTypesppt,
]);

const GFeedItemCategoryOrderByInput _$gFeedItemCategoryOrderByInputid_ASC =
    const GFeedItemCategoryOrderByInput._('id_ASC');
const GFeedItemCategoryOrderByInput _$gFeedItemCategoryOrderByInputid_DESC =
    const GFeedItemCategoryOrderByInput._('id_DESC');
const GFeedItemCategoryOrderByInput
    _$gFeedItemCategoryOrderByInputcreatedAt_ASC =
    const GFeedItemCategoryOrderByInput._('createdAt_ASC');
const GFeedItemCategoryOrderByInput
    _$gFeedItemCategoryOrderByInputcreatedAt_DESC =
    const GFeedItemCategoryOrderByInput._('createdAt_DESC');
const GFeedItemCategoryOrderByInput
    _$gFeedItemCategoryOrderByInputupdatedAt_ASC =
    const GFeedItemCategoryOrderByInput._('updatedAt_ASC');
const GFeedItemCategoryOrderByInput
    _$gFeedItemCategoryOrderByInputupdatedAt_DESC =
    const GFeedItemCategoryOrderByInput._('updatedAt_DESC');
const GFeedItemCategoryOrderByInput
    _$gFeedItemCategoryOrderByInputpublishedAt_ASC =
    const GFeedItemCategoryOrderByInput._('publishedAt_ASC');
const GFeedItemCategoryOrderByInput
    _$gFeedItemCategoryOrderByInputpublishedAt_DESC =
    const GFeedItemCategoryOrderByInput._('publishedAt_DESC');
const GFeedItemCategoryOrderByInput _$gFeedItemCategoryOrderByInputtitle_ASC =
    const GFeedItemCategoryOrderByInput._('title_ASC');
const GFeedItemCategoryOrderByInput _$gFeedItemCategoryOrderByInputtitle_DESC =
    const GFeedItemCategoryOrderByInput._('title_DESC');
const GFeedItemCategoryOrderByInput
    _$gFeedItemCategoryOrderByInputcategoryTitle_ASC =
    const GFeedItemCategoryOrderByInput._('categoryTitle_ASC');
const GFeedItemCategoryOrderByInput
    _$gFeedItemCategoryOrderByInputcategoryTitle_DESC =
    const GFeedItemCategoryOrderByInput._('categoryTitle_DESC');

GFeedItemCategoryOrderByInput _$gFeedItemCategoryOrderByInputValueOf(
    String name) {
  switch (name) {
    case 'id_ASC':
      return _$gFeedItemCategoryOrderByInputid_ASC;
    case 'id_DESC':
      return _$gFeedItemCategoryOrderByInputid_DESC;
    case 'createdAt_ASC':
      return _$gFeedItemCategoryOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gFeedItemCategoryOrderByInputcreatedAt_DESC;
    case 'updatedAt_ASC':
      return _$gFeedItemCategoryOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gFeedItemCategoryOrderByInputupdatedAt_DESC;
    case 'publishedAt_ASC':
      return _$gFeedItemCategoryOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gFeedItemCategoryOrderByInputpublishedAt_DESC;
    case 'title_ASC':
      return _$gFeedItemCategoryOrderByInputtitle_ASC;
    case 'title_DESC':
      return _$gFeedItemCategoryOrderByInputtitle_DESC;
    case 'categoryTitle_ASC':
      return _$gFeedItemCategoryOrderByInputcategoryTitle_ASC;
    case 'categoryTitle_DESC':
      return _$gFeedItemCategoryOrderByInputcategoryTitle_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GFeedItemCategoryOrderByInput>
    _$gFeedItemCategoryOrderByInputValues = new BuiltSet<
        GFeedItemCategoryOrderByInput>(const <GFeedItemCategoryOrderByInput>[
  _$gFeedItemCategoryOrderByInputid_ASC,
  _$gFeedItemCategoryOrderByInputid_DESC,
  _$gFeedItemCategoryOrderByInputcreatedAt_ASC,
  _$gFeedItemCategoryOrderByInputcreatedAt_DESC,
  _$gFeedItemCategoryOrderByInputupdatedAt_ASC,
  _$gFeedItemCategoryOrderByInputupdatedAt_DESC,
  _$gFeedItemCategoryOrderByInputpublishedAt_ASC,
  _$gFeedItemCategoryOrderByInputpublishedAt_DESC,
  _$gFeedItemCategoryOrderByInputtitle_ASC,
  _$gFeedItemCategoryOrderByInputtitle_DESC,
  _$gFeedItemCategoryOrderByInputcategoryTitle_ASC,
  _$gFeedItemCategoryOrderByInputcategoryTitle_DESC,
]);

const GFeedItemOrderByInput _$gFeedItemOrderByInputid_ASC =
    const GFeedItemOrderByInput._('id_ASC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputid_DESC =
    const GFeedItemOrderByInput._('id_DESC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputcreatedAt_ASC =
    const GFeedItemOrderByInput._('createdAt_ASC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputcreatedAt_DESC =
    const GFeedItemOrderByInput._('createdAt_DESC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputupdatedAt_ASC =
    const GFeedItemOrderByInput._('updatedAt_ASC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputupdatedAt_DESC =
    const GFeedItemOrderByInput._('updatedAt_DESC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputpublishedAt_ASC =
    const GFeedItemOrderByInput._('publishedAt_ASC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputpublishedAt_DESC =
    const GFeedItemOrderByInput._('publishedAt_DESC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputtitle_ASC =
    const GFeedItemOrderByInput._('title_ASC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputtitle_DESC =
    const GFeedItemOrderByInput._('title_DESC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputsubtitle_ASC =
    const GFeedItemOrderByInput._('subtitle_ASC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputsubtitle_DESC =
    const GFeedItemOrderByInput._('subtitle_DESC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputdescription_ASC =
    const GFeedItemOrderByInput._('description_ASC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputdescription_DESC =
    const GFeedItemOrderByInput._('description_DESC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputmainContent_ASC =
    const GFeedItemOrderByInput._('mainContent_ASC');
const GFeedItemOrderByInput _$gFeedItemOrderByInputmainContent_DESC =
    const GFeedItemOrderByInput._('mainContent_DESC');

GFeedItemOrderByInput _$gFeedItemOrderByInputValueOf(String name) {
  switch (name) {
    case 'id_ASC':
      return _$gFeedItemOrderByInputid_ASC;
    case 'id_DESC':
      return _$gFeedItemOrderByInputid_DESC;
    case 'createdAt_ASC':
      return _$gFeedItemOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gFeedItemOrderByInputcreatedAt_DESC;
    case 'updatedAt_ASC':
      return _$gFeedItemOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gFeedItemOrderByInputupdatedAt_DESC;
    case 'publishedAt_ASC':
      return _$gFeedItemOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gFeedItemOrderByInputpublishedAt_DESC;
    case 'title_ASC':
      return _$gFeedItemOrderByInputtitle_ASC;
    case 'title_DESC':
      return _$gFeedItemOrderByInputtitle_DESC;
    case 'subtitle_ASC':
      return _$gFeedItemOrderByInputsubtitle_ASC;
    case 'subtitle_DESC':
      return _$gFeedItemOrderByInputsubtitle_DESC;
    case 'description_ASC':
      return _$gFeedItemOrderByInputdescription_ASC;
    case 'description_DESC':
      return _$gFeedItemOrderByInputdescription_DESC;
    case 'mainContent_ASC':
      return _$gFeedItemOrderByInputmainContent_ASC;
    case 'mainContent_DESC':
      return _$gFeedItemOrderByInputmainContent_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GFeedItemOrderByInput> _$gFeedItemOrderByInputValues =
    new BuiltSet<GFeedItemOrderByInput>(const <GFeedItemOrderByInput>[
  _$gFeedItemOrderByInputid_ASC,
  _$gFeedItemOrderByInputid_DESC,
  _$gFeedItemOrderByInputcreatedAt_ASC,
  _$gFeedItemOrderByInputcreatedAt_DESC,
  _$gFeedItemOrderByInputupdatedAt_ASC,
  _$gFeedItemOrderByInputupdatedAt_DESC,
  _$gFeedItemOrderByInputpublishedAt_ASC,
  _$gFeedItemOrderByInputpublishedAt_DESC,
  _$gFeedItemOrderByInputtitle_ASC,
  _$gFeedItemOrderByInputtitle_DESC,
  _$gFeedItemOrderByInputsubtitle_ASC,
  _$gFeedItemOrderByInputsubtitle_DESC,
  _$gFeedItemOrderByInputdescription_ASC,
  _$gFeedItemOrderByInputdescription_DESC,
  _$gFeedItemOrderByInputmainContent_ASC,
  _$gFeedItemOrderByInputmainContent_DESC,
]);

const GImageFit _$gImageFitclip = const GImageFit._('clip');
const GImageFit _$gImageFitcrop = const GImageFit._('crop');
const GImageFit _$gImageFitscale = const GImageFit._('scale');
const GImageFit _$gImageFitmax = const GImageFit._('max');

GImageFit _$gImageFitValueOf(String name) {
  switch (name) {
    case 'clip':
      return _$gImageFitclip;
    case 'crop':
      return _$gImageFitcrop;
    case 'scale':
      return _$gImageFitscale;
    case 'max':
      return _$gImageFitmax;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GImageFit> _$gImageFitValues =
    new BuiltSet<GImageFit>(const <GImageFit>[
  _$gImageFitclip,
  _$gImageFitcrop,
  _$gImageFitscale,
  _$gImageFitmax,
]);

const GInspirationItemOrderByInput _$gInspirationItemOrderByInputid_ASC =
    const GInspirationItemOrderByInput._('id_ASC');
const GInspirationItemOrderByInput _$gInspirationItemOrderByInputid_DESC =
    const GInspirationItemOrderByInput._('id_DESC');
const GInspirationItemOrderByInput _$gInspirationItemOrderByInputcreatedAt_ASC =
    const GInspirationItemOrderByInput._('createdAt_ASC');
const GInspirationItemOrderByInput
    _$gInspirationItemOrderByInputcreatedAt_DESC =
    const GInspirationItemOrderByInput._('createdAt_DESC');
const GInspirationItemOrderByInput _$gInspirationItemOrderByInputupdatedAt_ASC =
    const GInspirationItemOrderByInput._('updatedAt_ASC');
const GInspirationItemOrderByInput
    _$gInspirationItemOrderByInputupdatedAt_DESC =
    const GInspirationItemOrderByInput._('updatedAt_DESC');
const GInspirationItemOrderByInput
    _$gInspirationItemOrderByInputpublishedAt_ASC =
    const GInspirationItemOrderByInput._('publishedAt_ASC');
const GInspirationItemOrderByInput
    _$gInspirationItemOrderByInputpublishedAt_DESC =
    const GInspirationItemOrderByInput._('publishedAt_DESC');
const GInspirationItemOrderByInput _$gInspirationItemOrderByInputtitle_ASC =
    const GInspirationItemOrderByInput._('title_ASC');
const GInspirationItemOrderByInput _$gInspirationItemOrderByInputtitle_DESC =
    const GInspirationItemOrderByInput._('title_DESC');

GInspirationItemOrderByInput _$gInspirationItemOrderByInputValueOf(
    String name) {
  switch (name) {
    case 'id_ASC':
      return _$gInspirationItemOrderByInputid_ASC;
    case 'id_DESC':
      return _$gInspirationItemOrderByInputid_DESC;
    case 'createdAt_ASC':
      return _$gInspirationItemOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gInspirationItemOrderByInputcreatedAt_DESC;
    case 'updatedAt_ASC':
      return _$gInspirationItemOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gInspirationItemOrderByInputupdatedAt_DESC;
    case 'publishedAt_ASC':
      return _$gInspirationItemOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gInspirationItemOrderByInputpublishedAt_DESC;
    case 'title_ASC':
      return _$gInspirationItemOrderByInputtitle_ASC;
    case 'title_DESC':
      return _$gInspirationItemOrderByInputtitle_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GInspirationItemOrderByInput>
    _$gInspirationItemOrderByInputValues = new BuiltSet<
        GInspirationItemOrderByInput>(const <GInspirationItemOrderByInput>[
  _$gInspirationItemOrderByInputid_ASC,
  _$gInspirationItemOrderByInputid_DESC,
  _$gInspirationItemOrderByInputcreatedAt_ASC,
  _$gInspirationItemOrderByInputcreatedAt_DESC,
  _$gInspirationItemOrderByInputupdatedAt_ASC,
  _$gInspirationItemOrderByInputupdatedAt_DESC,
  _$gInspirationItemOrderByInputpublishedAt_ASC,
  _$gInspirationItemOrderByInputpublishedAt_DESC,
  _$gInspirationItemOrderByInputtitle_ASC,
  _$gInspirationItemOrderByInputtitle_DESC,
]);

const GLevel _$gLevelbeginner = const GLevel._('beginner');
const GLevel _$gLevelintermediate = const GLevel._('intermediate');
const GLevel _$gLeveladvanced = const GLevel._('advanced');

GLevel _$gLevelValueOf(String name) {
  switch (name) {
    case 'beginner':
      return _$gLevelbeginner;
    case 'intermediate':
      return _$gLevelintermediate;
    case 'advanced':
      return _$gLeveladvanced;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GLevel> _$gLevelValues = new BuiltSet<GLevel>(const <GLevel>[
  _$gLevelbeginner,
  _$gLevelintermediate,
  _$gLeveladvanced,
]);

const GLocale _$gLocaleen = const GLocale._('en');

GLocale _$gLocaleValueOf(String name) {
  switch (name) {
    case 'en':
      return _$gLocaleen;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GLocale> _$gLocaleValues = new BuiltSet<GLocale>(const <GLocale>[
  _$gLocaleen,
]);

const GMealSize _$gMealSizeGeneral = const GMealSize._('General');
const GMealSize _$gMealSizeRefuel = const GMealSize._('Refuel');
const GMealSize _$gMealSizeSnack = const GMealSize._('Snack');

GMealSize _$gMealSizeValueOf(String name) {
  switch (name) {
    case 'General':
      return _$gMealSizeGeneral;
    case 'Refuel':
      return _$gMealSizeRefuel;
    case 'Snack':
      return _$gMealSizeSnack;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GMealSize> _$gMealSizeValues =
    new BuiltSet<GMealSize>(const <GMealSize>[
  _$gMealSizeGeneral,
  _$gMealSizeRefuel,
  _$gMealSizeSnack,
]);

const GMealType _$gMealTypeVegetarian = const GMealType._('Vegetarian');
const GMealType _$gMealTypeMixed = const GMealType._('Mixed');
const GMealType _$gMealTypeVegan = const GMealType._('Vegan');
const GMealType _$gMealTypePescatarian = const GMealType._('Pescatarian');

GMealType _$gMealTypeValueOf(String name) {
  switch (name) {
    case 'Vegetarian':
      return _$gMealTypeVegetarian;
    case 'Mixed':
      return _$gMealTypeMixed;
    case 'Vegan':
      return _$gMealTypeVegan;
    case 'Pescatarian':
      return _$gMealTypePescatarian;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GMealType> _$gMealTypeValues =
    new BuiltSet<GMealType>(const <GMealType>[
  _$gMealTypeVegetarian,
  _$gMealTypeMixed,
  _$gMealTypeVegan,
  _$gMealTypePescatarian,
]);

const GPlan _$gPlanMonthly = const GPlan._('Monthly');
const GPlan _$gPlanYearly = const GPlan._('Yearly');
const GPlan _$gPlanQuarterly = const GPlan._('Quarterly');

GPlan _$gPlanValueOf(String name) {
  switch (name) {
    case 'Monthly':
      return _$gPlanMonthly;
    case 'Yearly':
      return _$gPlanYearly;
    case 'Quarterly':
      return _$gPlanQuarterly;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GPlan> _$gPlanValues = new BuiltSet<GPlan>(const <GPlan>[
  _$gPlanMonthly,
  _$gPlanYearly,
  _$gPlanQuarterly,
]);

const GPreExistingCondition _$gPreExistingConditionDiabetes =
    const GPreExistingCondition._('Diabetes');
const GPreExistingCondition _$gPreExistingConditionA_thyroid_conditions =
    const GPreExistingCondition._('A_thyroid_conditions');
const GPreExistingCondition _$gPreExistingConditionIrritable_bowl_condition =
    const GPreExistingCondition._('Irritable_bowl_condition');
const GPreExistingCondition _$gPreExistingConditionAbnormal_blood_condtion =
    const GPreExistingCondition._('Abnormal_blood_condtion');

GPreExistingCondition _$gPreExistingConditionValueOf(String name) {
  switch (name) {
    case 'Diabetes':
      return _$gPreExistingConditionDiabetes;
    case 'A_thyroid_conditions':
      return _$gPreExistingConditionA_thyroid_conditions;
    case 'Irritable_bowl_condition':
      return _$gPreExistingConditionIrritable_bowl_condition;
    case 'Abnormal_blood_condtion':
      return _$gPreExistingConditionAbnormal_blood_condtion;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GPreExistingCondition> _$gPreExistingConditionValues =
    new BuiltSet<GPreExistingCondition>(const <GPreExistingCondition>[
  _$gPreExistingConditionDiabetes,
  _$gPreExistingConditionA_thyroid_conditions,
  _$gPreExistingConditionIrritable_bowl_condition,
  _$gPreExistingConditionAbnormal_blood_condtion,
]);

const GSex _$gSexFemale = const GSex._('Female');
const GSex _$gSexMale = const GSex._('Male');
const GSex _$gSexNon_binary = const GSex._('Non_binary');

GSex _$gSexValueOf(String name) {
  switch (name) {
    case 'Female':
      return _$gSexFemale;
    case 'Male':
      return _$gSexMale;
    case 'Non_binary':
      return _$gSexNon_binary;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GSex> _$gSexValues = new BuiltSet<GSex>(const <GSex>[
  _$gSexFemale,
  _$gSexMale,
  _$gSexNon_binary,
]);

const GStage _$gStageDRAFT = const GStage._('DRAFT');
const GStage _$gStagePUBLISHED = const GStage._('PUBLISHED');

GStage _$gStageValueOf(String name) {
  switch (name) {
    case 'DRAFT':
      return _$gStageDRAFT;
    case 'PUBLISHED':
      return _$gStagePUBLISHED;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GStage> _$gStageValues = new BuiltSet<GStage>(const <GStage>[
  _$gStageDRAFT,
  _$gStagePUBLISHED,
]);

const GSystemDateTimeFieldVariation _$gSystemDateTimeFieldVariationBASE =
    const GSystemDateTimeFieldVariation._('BASE');
const GSystemDateTimeFieldVariation
    _$gSystemDateTimeFieldVariationLOCALIZATION =
    const GSystemDateTimeFieldVariation._('LOCALIZATION');
const GSystemDateTimeFieldVariation _$gSystemDateTimeFieldVariationCOMBINED =
    const GSystemDateTimeFieldVariation._('COMBINED');

GSystemDateTimeFieldVariation _$gSystemDateTimeFieldVariationValueOf(
    String name) {
  switch (name) {
    case 'BASE':
      return _$gSystemDateTimeFieldVariationBASE;
    case 'LOCALIZATION':
      return _$gSystemDateTimeFieldVariationLOCALIZATION;
    case 'COMBINED':
      return _$gSystemDateTimeFieldVariationCOMBINED;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GSystemDateTimeFieldVariation>
    _$gSystemDateTimeFieldVariationValues = new BuiltSet<
        GSystemDateTimeFieldVariation>(const <GSystemDateTimeFieldVariation>[
  _$gSystemDateTimeFieldVariationBASE,
  _$gSystemDateTimeFieldVariationLOCALIZATION,
  _$gSystemDateTimeFieldVariationCOMBINED,
]);

const GUserKind _$gUserKindMEMBER = const GUserKind._('MEMBER');
const GUserKind _$gUserKindPAT = const GUserKind._('PAT');
const GUserKind _$gUserKindPUBLIC = const GUserKind._('PUBLIC');
const GUserKind _$gUserKindWEBHOOK = const GUserKind._('WEBHOOK');

GUserKind _$gUserKindValueOf(String name) {
  switch (name) {
    case 'MEMBER':
      return _$gUserKindMEMBER;
    case 'PAT':
      return _$gUserKindPAT;
    case 'PUBLIC':
      return _$gUserKindPUBLIC;
    case 'WEBHOOK':
      return _$gUserKindWEBHOOK;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GUserKind> _$gUserKindValues =
    new BuiltSet<GUserKind>(const <GUserKind>[
  _$gUserKindMEMBER,
  _$gUserKindPAT,
  _$gUserKindPUBLIC,
  _$gUserKindWEBHOOK,
]);

const GUserOrderByInput _$gUserOrderByInputid_ASC =
    const GUserOrderByInput._('id_ASC');
const GUserOrderByInput _$gUserOrderByInputid_DESC =
    const GUserOrderByInput._('id_DESC');
const GUserOrderByInput _$gUserOrderByInputcreatedAt_ASC =
    const GUserOrderByInput._('createdAt_ASC');
const GUserOrderByInput _$gUserOrderByInputcreatedAt_DESC =
    const GUserOrderByInput._('createdAt_DESC');
const GUserOrderByInput _$gUserOrderByInputupdatedAt_ASC =
    const GUserOrderByInput._('updatedAt_ASC');
const GUserOrderByInput _$gUserOrderByInputupdatedAt_DESC =
    const GUserOrderByInput._('updatedAt_DESC');
const GUserOrderByInput _$gUserOrderByInputpublishedAt_ASC =
    const GUserOrderByInput._('publishedAt_ASC');
const GUserOrderByInput _$gUserOrderByInputpublishedAt_DESC =
    const GUserOrderByInput._('publishedAt_DESC');
const GUserOrderByInput _$gUserOrderByInputname_ASC =
    const GUserOrderByInput._('name_ASC');
const GUserOrderByInput _$gUserOrderByInputname_DESC =
    const GUserOrderByInput._('name_DESC');
const GUserOrderByInput _$gUserOrderByInputpicture_ASC =
    const GUserOrderByInput._('picture_ASC');
const GUserOrderByInput _$gUserOrderByInputpicture_DESC =
    const GUserOrderByInput._('picture_DESC');
const GUserOrderByInput _$gUserOrderByInputisActive_ASC =
    const GUserOrderByInput._('isActive_ASC');
const GUserOrderByInput _$gUserOrderByInputisActive_DESC =
    const GUserOrderByInput._('isActive_DESC');
const GUserOrderByInput _$gUserOrderByInputkind_ASC =
    const GUserOrderByInput._('kind_ASC');
const GUserOrderByInput _$gUserOrderByInputkind_DESC =
    const GUserOrderByInput._('kind_DESC');

GUserOrderByInput _$gUserOrderByInputValueOf(String name) {
  switch (name) {
    case 'id_ASC':
      return _$gUserOrderByInputid_ASC;
    case 'id_DESC':
      return _$gUserOrderByInputid_DESC;
    case 'createdAt_ASC':
      return _$gUserOrderByInputcreatedAt_ASC;
    case 'createdAt_DESC':
      return _$gUserOrderByInputcreatedAt_DESC;
    case 'updatedAt_ASC':
      return _$gUserOrderByInputupdatedAt_ASC;
    case 'updatedAt_DESC':
      return _$gUserOrderByInputupdatedAt_DESC;
    case 'publishedAt_ASC':
      return _$gUserOrderByInputpublishedAt_ASC;
    case 'publishedAt_DESC':
      return _$gUserOrderByInputpublishedAt_DESC;
    case 'name_ASC':
      return _$gUserOrderByInputname_ASC;
    case 'name_DESC':
      return _$gUserOrderByInputname_DESC;
    case 'picture_ASC':
      return _$gUserOrderByInputpicture_ASC;
    case 'picture_DESC':
      return _$gUserOrderByInputpicture_DESC;
    case 'isActive_ASC':
      return _$gUserOrderByInputisActive_ASC;
    case 'isActive_DESC':
      return _$gUserOrderByInputisActive_DESC;
    case 'kind_ASC':
      return _$gUserOrderByInputkind_ASC;
    case 'kind_DESC':
      return _$gUserOrderByInputkind_DESC;
    default:
      throw new ArgumentError(name);
  }
}

final BuiltSet<GUserOrderByInput> _$gUserOrderByInputValues =
    new BuiltSet<GUserOrderByInput>(const <GUserOrderByInput>[
  _$gUserOrderByInputid_ASC,
  _$gUserOrderByInputid_DESC,
  _$gUserOrderByInputcreatedAt_ASC,
  _$gUserOrderByInputcreatedAt_DESC,
  _$gUserOrderByInputupdatedAt_ASC,
  _$gUserOrderByInputupdatedAt_DESC,
  _$gUserOrderByInputpublishedAt_ASC,
  _$gUserOrderByInputpublishedAt_DESC,
  _$gUserOrderByInputname_ASC,
  _$gUserOrderByInputname_DESC,
  _$gUserOrderByInputpicture_ASC,
  _$gUserOrderByInputpicture_DESC,
  _$gUserOrderByInputisActive_ASC,
  _$gUserOrderByInputisActive_DESC,
  _$gUserOrderByInputkind_ASC,
  _$gUserOrderByInputkind_DESC,
]);

Serializer<G_FilterKind> _$gFilterKindSerializer =
    new _$G_FilterKindSerializer();
Serializer<G_MutationInputFieldKind> _$gMutationInputFieldKindSerializer =
    new _$G_MutationInputFieldKindSerializer();
Serializer<G_MutationKind> _$gMutationKindSerializer =
    new _$G_MutationKindSerializer();
Serializer<G_OrderDirection> _$gOrderDirectionSerializer =
    new _$G_OrderDirectionSerializer();
Serializer<G_RelationInputCardinality> _$gRelationInputCardinalitySerializer =
    new _$G_RelationInputCardinalitySerializer();
Serializer<G_RelationInputKind> _$gRelationInputKindSerializer =
    new _$G_RelationInputKindSerializer();
Serializer<G_RelationKind> _$gRelationKindSerializer =
    new _$G_RelationKindSerializer();
Serializer<Guntitled> _$guntitledSerializer = new _$GuntitledSerializer();
Serializer<GAssetConnectInput> _$gAssetConnectInputSerializer =
    new _$GAssetConnectInputSerializer();
Serializer<GAssetCreateInput> _$gAssetCreateInputSerializer =
    new _$GAssetCreateInputSerializer();
Serializer<GAssetCreateLocalizationDataInput>
    _$gAssetCreateLocalizationDataInputSerializer =
    new _$GAssetCreateLocalizationDataInputSerializer();
Serializer<GAssetCreateLocalizationInput>
    _$gAssetCreateLocalizationInputSerializer =
    new _$GAssetCreateLocalizationInputSerializer();
Serializer<GAssetCreateLocalizationsInput>
    _$gAssetCreateLocalizationsInputSerializer =
    new _$GAssetCreateLocalizationsInputSerializer();
Serializer<GAssetCreateManyInlineInput>
    _$gAssetCreateManyInlineInputSerializer =
    new _$GAssetCreateManyInlineInputSerializer();
Serializer<GAssetCreateOneInlineInput> _$gAssetCreateOneInlineInputSerializer =
    new _$GAssetCreateOneInlineInputSerializer();
Serializer<GAssetManyWhereInput> _$gAssetManyWhereInputSerializer =
    new _$GAssetManyWhereInputSerializer();
Serializer<GAssetOrderByInput> _$gAssetOrderByInputSerializer =
    new _$GAssetOrderByInputSerializer();
Serializer<GAssetTransformationInput> _$gAssetTransformationInputSerializer =
    new _$GAssetTransformationInputSerializer();
Serializer<GAssetUpdateInput> _$gAssetUpdateInputSerializer =
    new _$GAssetUpdateInputSerializer();
Serializer<GAssetUpdateLocalizationDataInput>
    _$gAssetUpdateLocalizationDataInputSerializer =
    new _$GAssetUpdateLocalizationDataInputSerializer();
Serializer<GAssetUpdateLocalizationInput>
    _$gAssetUpdateLocalizationInputSerializer =
    new _$GAssetUpdateLocalizationInputSerializer();
Serializer<GAssetUpdateLocalizationsInput>
    _$gAssetUpdateLocalizationsInputSerializer =
    new _$GAssetUpdateLocalizationsInputSerializer();
Serializer<GAssetUpdateManyInlineInput>
    _$gAssetUpdateManyInlineInputSerializer =
    new _$GAssetUpdateManyInlineInputSerializer();
Serializer<GAssetUpdateManyInput> _$gAssetUpdateManyInputSerializer =
    new _$GAssetUpdateManyInputSerializer();
Serializer<GAssetUpdateManyLocalizationDataInput>
    _$gAssetUpdateManyLocalizationDataInputSerializer =
    new _$GAssetUpdateManyLocalizationDataInputSerializer();
Serializer<GAssetUpdateManyLocalizationInput>
    _$gAssetUpdateManyLocalizationInputSerializer =
    new _$GAssetUpdateManyLocalizationInputSerializer();
Serializer<GAssetUpdateManyLocalizationsInput>
    _$gAssetUpdateManyLocalizationsInputSerializer =
    new _$GAssetUpdateManyLocalizationsInputSerializer();
Serializer<GAssetUpdateManyWithNestedWhereInput>
    _$gAssetUpdateManyWithNestedWhereInputSerializer =
    new _$GAssetUpdateManyWithNestedWhereInputSerializer();
Serializer<GAssetUpdateOneInlineInput> _$gAssetUpdateOneInlineInputSerializer =
    new _$GAssetUpdateOneInlineInputSerializer();
Serializer<GAssetUpdateWithNestedWhereUniqueInput>
    _$gAssetUpdateWithNestedWhereUniqueInputSerializer =
    new _$GAssetUpdateWithNestedWhereUniqueInputSerializer();
Serializer<GAssetUpsertInput> _$gAssetUpsertInputSerializer =
    new _$GAssetUpsertInputSerializer();
Serializer<GAssetUpsertLocalizationInput>
    _$gAssetUpsertLocalizationInputSerializer =
    new _$GAssetUpsertLocalizationInputSerializer();
Serializer<GAssetUpsertWithNestedWhereUniqueInput>
    _$gAssetUpsertWithNestedWhereUniqueInputSerializer =
    new _$GAssetUpsertWithNestedWhereUniqueInputSerializer();
Serializer<GAssetWhereInput> _$gAssetWhereInputSerializer =
    new _$GAssetWhereInputSerializer();
Serializer<GAssetWhereUniqueInput> _$gAssetWhereUniqueInputSerializer =
    new _$GAssetWhereUniqueInputSerializer();
Serializer<GBodyMeasurements> _$gBodyMeasurementsSerializer =
    new _$GBodyMeasurementsSerializer();
Serializer<GCategoryConnectInput> _$gCategoryConnectInputSerializer =
    new _$GCategoryConnectInputSerializer();
Serializer<GCategoryCreateInput> _$gCategoryCreateInputSerializer =
    new _$GCategoryCreateInputSerializer();
Serializer<GCategoryCreateManyInlineInput>
    _$gCategoryCreateManyInlineInputSerializer =
    new _$GCategoryCreateManyInlineInputSerializer();
Serializer<GCategoryCreateOneInlineInput>
    _$gCategoryCreateOneInlineInputSerializer =
    new _$GCategoryCreateOneInlineInputSerializer();
Serializer<GCategoryFeedItemsConnectInput>
    _$gCategoryFeedItemsConnectInputSerializer =
    new _$GCategoryFeedItemsConnectInputSerializer();
Serializer<GCategoryFeedItemsCreateInput>
    _$gCategoryFeedItemsCreateInputSerializer =
    new _$GCategoryFeedItemsCreateInputSerializer();
Serializer<GCategoryFeedItemsCreateManyInlineInput>
    _$gCategoryFeedItemsCreateManyInlineInputSerializer =
    new _$GCategoryFeedItemsCreateManyInlineInputSerializer();
Serializer<GCategoryFeedItemsCreateOneInlineInput>
    _$gCategoryFeedItemsCreateOneInlineInputSerializer =
    new _$GCategoryFeedItemsCreateOneInlineInputSerializer();
Serializer<GCategoryFeedItemsUpdateInput>
    _$gCategoryFeedItemsUpdateInputSerializer =
    new _$GCategoryFeedItemsUpdateInputSerializer();
Serializer<GCategoryFeedItemsUpdateManyInlineInput>
    _$gCategoryFeedItemsUpdateManyInlineInputSerializer =
    new _$GCategoryFeedItemsUpdateManyInlineInputSerializer();
Serializer<GCategoryFeedItemsUpdateManyWithNestedWhereInput>
    _$gCategoryFeedItemsUpdateManyWithNestedWhereInputSerializer =
    new _$GCategoryFeedItemsUpdateManyWithNestedWhereInputSerializer();
Serializer<GCategoryFeedItemsUpdateOneInlineInput>
    _$gCategoryFeedItemsUpdateOneInlineInputSerializer =
    new _$GCategoryFeedItemsUpdateOneInlineInputSerializer();
Serializer<GCategoryFeedItemsUpdateWithNestedWhereUniqueInput>
    _$gCategoryFeedItemsUpdateWithNestedWhereUniqueInputSerializer =
    new _$GCategoryFeedItemsUpdateWithNestedWhereUniqueInputSerializer();
Serializer<GCategoryFeedItemsUpsertWithNestedWhereUniqueInput>
    _$gCategoryFeedItemsUpsertWithNestedWhereUniqueInputSerializer =
    new _$GCategoryFeedItemsUpsertWithNestedWhereUniqueInputSerializer();
Serializer<GCategoryFeedItemsWhereInput>
    _$gCategoryFeedItemsWhereInputSerializer =
    new _$GCategoryFeedItemsWhereInputSerializer();
Serializer<GCategoryFeedItemsWhereUniqueInput>
    _$gCategoryFeedItemsWhereUniqueInputSerializer =
    new _$GCategoryFeedItemsWhereUniqueInputSerializer();
Serializer<GCategoryManyWhereInput> _$gCategoryManyWhereInputSerializer =
    new _$GCategoryManyWhereInputSerializer();
Serializer<GCategoryOrderByInput> _$gCategoryOrderByInputSerializer =
    new _$GCategoryOrderByInputSerializer();
Serializer<GCategoryTitle> _$gCategoryTitleSerializer =
    new _$GCategoryTitleSerializer();
Serializer<GCategoryUpdateInput> _$gCategoryUpdateInputSerializer =
    new _$GCategoryUpdateInputSerializer();
Serializer<GCategoryUpdateManyInlineInput>
    _$gCategoryUpdateManyInlineInputSerializer =
    new _$GCategoryUpdateManyInlineInputSerializer();
Serializer<GCategoryUpdateManyInput> _$gCategoryUpdateManyInputSerializer =
    new _$GCategoryUpdateManyInputSerializer();
Serializer<GCategoryUpdateManyWithNestedWhereInput>
    _$gCategoryUpdateManyWithNestedWhereInputSerializer =
    new _$GCategoryUpdateManyWithNestedWhereInputSerializer();
Serializer<GCategoryUpdateOneInlineInput>
    _$gCategoryUpdateOneInlineInputSerializer =
    new _$GCategoryUpdateOneInlineInputSerializer();
Serializer<GCategoryUpdateWithNestedWhereUniqueInput>
    _$gCategoryUpdateWithNestedWhereUniqueInputSerializer =
    new _$GCategoryUpdateWithNestedWhereUniqueInputSerializer();
Serializer<GCategoryUpsertInput> _$gCategoryUpsertInputSerializer =
    new _$GCategoryUpsertInputSerializer();
Serializer<GCategoryUpsertWithNestedWhereUniqueInput>
    _$gCategoryUpsertWithNestedWhereUniqueInputSerializer =
    new _$GCategoryUpsertWithNestedWhereUniqueInputSerializer();
Serializer<GCategoryWhereInput> _$gCategoryWhereInputSerializer =
    new _$GCategoryWhereInputSerializer();
Serializer<GCategoryWhereUniqueInput> _$gCategoryWhereUniqueInputSerializer =
    new _$GCategoryWhereUniqueInputSerializer();
Serializer<GColorInput> _$gColorInputSerializer = new _$GColorInputSerializer();
Serializer<GConnectPositionInput> _$gConnectPositionInputSerializer =
    new _$GConnectPositionInputSerializer();
Serializer<GCycle> _$gCycleSerializer = new _$GCycleSerializer();
Serializer<GDocumentFileTypes> _$gDocumentFileTypesSerializer =
    new _$GDocumentFileTypesSerializer();
Serializer<GDocumentOutputInput> _$gDocumentOutputInputSerializer =
    new _$GDocumentOutputInputSerializer();
Serializer<GDocumentTransformationInput>
    _$gDocumentTransformationInputSerializer =
    new _$GDocumentTransformationInputSerializer();
Serializer<GFeedItemCategoryConnectInput>
    _$gFeedItemCategoryConnectInputSerializer =
    new _$GFeedItemCategoryConnectInputSerializer();
Serializer<GFeedItemCategoryCreateInput>
    _$gFeedItemCategoryCreateInputSerializer =
    new _$GFeedItemCategoryCreateInputSerializer();
Serializer<GFeedItemCategoryCreateManyInlineInput>
    _$gFeedItemCategoryCreateManyInlineInputSerializer =
    new _$GFeedItemCategoryCreateManyInlineInputSerializer();
Serializer<GFeedItemCategoryCreateOneInlineInput>
    _$gFeedItemCategoryCreateOneInlineInputSerializer =
    new _$GFeedItemCategoryCreateOneInlineInputSerializer();
Serializer<GFeedItemCategoryManyWhereInput>
    _$gFeedItemCategoryManyWhereInputSerializer =
    new _$GFeedItemCategoryManyWhereInputSerializer();
Serializer<GFeedItemCategoryOrderByInput>
    _$gFeedItemCategoryOrderByInputSerializer =
    new _$GFeedItemCategoryOrderByInputSerializer();
Serializer<GFeedItemCategoryUpdateInput>
    _$gFeedItemCategoryUpdateInputSerializer =
    new _$GFeedItemCategoryUpdateInputSerializer();
Serializer<GFeedItemCategoryUpdateManyInlineInput>
    _$gFeedItemCategoryUpdateManyInlineInputSerializer =
    new _$GFeedItemCategoryUpdateManyInlineInputSerializer();
Serializer<GFeedItemCategoryUpdateManyInput>
    _$gFeedItemCategoryUpdateManyInputSerializer =
    new _$GFeedItemCategoryUpdateManyInputSerializer();
Serializer<GFeedItemCategoryUpdateManyWithNestedWhereInput>
    _$gFeedItemCategoryUpdateManyWithNestedWhereInputSerializer =
    new _$GFeedItemCategoryUpdateManyWithNestedWhereInputSerializer();
Serializer<GFeedItemCategoryUpdateOneInlineInput>
    _$gFeedItemCategoryUpdateOneInlineInputSerializer =
    new _$GFeedItemCategoryUpdateOneInlineInputSerializer();
Serializer<GFeedItemCategoryUpdateWithNestedWhereUniqueInput>
    _$gFeedItemCategoryUpdateWithNestedWhereUniqueInputSerializer =
    new _$GFeedItemCategoryUpdateWithNestedWhereUniqueInputSerializer();
Serializer<GFeedItemCategoryUpsertInput>
    _$gFeedItemCategoryUpsertInputSerializer =
    new _$GFeedItemCategoryUpsertInputSerializer();
Serializer<GFeedItemCategoryUpsertWithNestedWhereUniqueInput>
    _$gFeedItemCategoryUpsertWithNestedWhereUniqueInputSerializer =
    new _$GFeedItemCategoryUpsertWithNestedWhereUniqueInputSerializer();
Serializer<GFeedItemCategoryWhereInput>
    _$gFeedItemCategoryWhereInputSerializer =
    new _$GFeedItemCategoryWhereInputSerializer();
Serializer<GFeedItemCategoryWhereUniqueInput>
    _$gFeedItemCategoryWhereUniqueInputSerializer =
    new _$GFeedItemCategoryWhereUniqueInputSerializer();
Serializer<GFeedItemConnectInput> _$gFeedItemConnectInputSerializer =
    new _$GFeedItemConnectInputSerializer();
Serializer<GFeedItemCreateInput> _$gFeedItemCreateInputSerializer =
    new _$GFeedItemCreateInputSerializer();
Serializer<GFeedItemCreateManyInlineInput>
    _$gFeedItemCreateManyInlineInputSerializer =
    new _$GFeedItemCreateManyInlineInputSerializer();
Serializer<GFeedItemCreateOneInlineInput>
    _$gFeedItemCreateOneInlineInputSerializer =
    new _$GFeedItemCreateOneInlineInputSerializer();
Serializer<GFeedItemManyWhereInput> _$gFeedItemManyWhereInputSerializer =
    new _$GFeedItemManyWhereInputSerializer();
Serializer<GFeedItemOrderByInput> _$gFeedItemOrderByInputSerializer =
    new _$GFeedItemOrderByInputSerializer();
Serializer<GFeedItemUpdateInput> _$gFeedItemUpdateInputSerializer =
    new _$GFeedItemUpdateInputSerializer();
Serializer<GFeedItemUpdateManyInlineInput>
    _$gFeedItemUpdateManyInlineInputSerializer =
    new _$GFeedItemUpdateManyInlineInputSerializer();
Serializer<GFeedItemUpdateManyInput> _$gFeedItemUpdateManyInputSerializer =
    new _$GFeedItemUpdateManyInputSerializer();
Serializer<GFeedItemUpdateManyWithNestedWhereInput>
    _$gFeedItemUpdateManyWithNestedWhereInputSerializer =
    new _$GFeedItemUpdateManyWithNestedWhereInputSerializer();
Serializer<GFeedItemUpdateOneInlineInput>
    _$gFeedItemUpdateOneInlineInputSerializer =
    new _$GFeedItemUpdateOneInlineInputSerializer();
Serializer<GFeedItemUpdateWithNestedWhereUniqueInput>
    _$gFeedItemUpdateWithNestedWhereUniqueInputSerializer =
    new _$GFeedItemUpdateWithNestedWhereUniqueInputSerializer();
Serializer<GFeedItemUpsertInput> _$gFeedItemUpsertInputSerializer =
    new _$GFeedItemUpsertInputSerializer();
Serializer<GFeedItemUpsertWithNestedWhereUniqueInput>
    _$gFeedItemUpsertWithNestedWhereUniqueInputSerializer =
    new _$GFeedItemUpsertWithNestedWhereUniqueInputSerializer();
Serializer<GFeedItemWhereInput> _$gFeedItemWhereInputSerializer =
    new _$GFeedItemWhereInputSerializer();
Serializer<GFeedItemWhereUniqueInput> _$gFeedItemWhereUniqueInputSerializer =
    new _$GFeedItemWhereUniqueInputSerializer();
Serializer<GImageFit> _$gImageFitSerializer = new _$GImageFitSerializer();
Serializer<GImageResizeInput> _$gImageResizeInputSerializer =
    new _$GImageResizeInputSerializer();
Serializer<GImageTransformationInput> _$gImageTransformationInputSerializer =
    new _$GImageTransformationInputSerializer();
Serializer<GInspirationItemConnectInput>
    _$gInspirationItemConnectInputSerializer =
    new _$GInspirationItemConnectInputSerializer();
Serializer<GInspirationItemCreateInput>
    _$gInspirationItemCreateInputSerializer =
    new _$GInspirationItemCreateInputSerializer();
Serializer<GInspirationItemCreateManyInlineInput>
    _$gInspirationItemCreateManyInlineInputSerializer =
    new _$GInspirationItemCreateManyInlineInputSerializer();
Serializer<GInspirationItemCreateOneInlineInput>
    _$gInspirationItemCreateOneInlineInputSerializer =
    new _$GInspirationItemCreateOneInlineInputSerializer();
Serializer<GInspirationItemManyWhereInput>
    _$gInspirationItemManyWhereInputSerializer =
    new _$GInspirationItemManyWhereInputSerializer();
Serializer<GInspirationItemOrderByInput>
    _$gInspirationItemOrderByInputSerializer =
    new _$GInspirationItemOrderByInputSerializer();
Serializer<GInspirationItemUpdateInput>
    _$gInspirationItemUpdateInputSerializer =
    new _$GInspirationItemUpdateInputSerializer();
Serializer<GInspirationItemUpdateManyInlineInput>
    _$gInspirationItemUpdateManyInlineInputSerializer =
    new _$GInspirationItemUpdateManyInlineInputSerializer();
Serializer<GInspirationItemUpdateManyInput>
    _$gInspirationItemUpdateManyInputSerializer =
    new _$GInspirationItemUpdateManyInputSerializer();
Serializer<GInspirationItemUpdateManyWithNestedWhereInput>
    _$gInspirationItemUpdateManyWithNestedWhereInputSerializer =
    new _$GInspirationItemUpdateManyWithNestedWhereInputSerializer();
Serializer<GInspirationItemUpdateOneInlineInput>
    _$gInspirationItemUpdateOneInlineInputSerializer =
    new _$GInspirationItemUpdateOneInlineInputSerializer();
Serializer<GInspirationItemUpdateWithNestedWhereUniqueInput>
    _$gInspirationItemUpdateWithNestedWhereUniqueInputSerializer =
    new _$GInspirationItemUpdateWithNestedWhereUniqueInputSerializer();
Serializer<GInspirationItemUpsertInput>
    _$gInspirationItemUpsertInputSerializer =
    new _$GInspirationItemUpsertInputSerializer();
Serializer<GInspirationItemUpsertWithNestedWhereUniqueInput>
    _$gInspirationItemUpsertWithNestedWhereUniqueInputSerializer =
    new _$GInspirationItemUpsertWithNestedWhereUniqueInputSerializer();
Serializer<GInspirationItemWhereInput> _$gInspirationItemWhereInputSerializer =
    new _$GInspirationItemWhereInputSerializer();
Serializer<GInspirationItemWhereUniqueInput>
    _$gInspirationItemWhereUniqueInputSerializer =
    new _$GInspirationItemWhereUniqueInputSerializer();
Serializer<GLevel> _$gLevelSerializer = new _$GLevelSerializer();
Serializer<GLocale> _$gLocaleSerializer = new _$GLocaleSerializer();
Serializer<GLocationInput> _$gLocationInputSerializer =
    new _$GLocationInputSerializer();
Serializer<GMealSize> _$gMealSizeSerializer = new _$GMealSizeSerializer();
Serializer<GMealType> _$gMealTypeSerializer = new _$GMealTypeSerializer();
Serializer<GPlan> _$gPlanSerializer = new _$GPlanSerializer();
Serializer<GPreExistingCondition> _$gPreExistingConditionSerializer =
    new _$GPreExistingConditionSerializer();
Serializer<GPublishLocaleInput> _$gPublishLocaleInputSerializer =
    new _$GPublishLocaleInputSerializer();
Serializer<GRGBAInput> _$gRGBAInputSerializer = new _$GRGBAInputSerializer();
Serializer<GSex> _$gSexSerializer = new _$GSexSerializer();
Serializer<GStage> _$gStageSerializer = new _$GStageSerializer();
Serializer<GSystemDateTimeFieldVariation>
    _$gSystemDateTimeFieldVariationSerializer =
    new _$GSystemDateTimeFieldVariationSerializer();
Serializer<GUnpublishLocaleInput> _$gUnpublishLocaleInputSerializer =
    new _$GUnpublishLocaleInputSerializer();
Serializer<GUserConnectInput> _$gUserConnectInputSerializer =
    new _$GUserConnectInputSerializer();
Serializer<GUserCreateManyInlineInput> _$gUserCreateManyInlineInputSerializer =
    new _$GUserCreateManyInlineInputSerializer();
Serializer<GUserCreateOneInlineInput> _$gUserCreateOneInlineInputSerializer =
    new _$GUserCreateOneInlineInputSerializer();
Serializer<GUserKind> _$gUserKindSerializer = new _$GUserKindSerializer();
Serializer<GUserManyWhereInput> _$gUserManyWhereInputSerializer =
    new _$GUserManyWhereInputSerializer();
Serializer<GUserOrderByInput> _$gUserOrderByInputSerializer =
    new _$GUserOrderByInputSerializer();
Serializer<GUserUpdateManyInlineInput> _$gUserUpdateManyInlineInputSerializer =
    new _$GUserUpdateManyInlineInputSerializer();
Serializer<GUserUpdateOneInlineInput> _$gUserUpdateOneInlineInputSerializer =
    new _$GUserUpdateOneInlineInputSerializer();
Serializer<GUserWhereInput> _$gUserWhereInputSerializer =
    new _$GUserWhereInputSerializer();
Serializer<GUserWhereUniqueInput> _$gUserWhereUniqueInputSerializer =
    new _$GUserWhereUniqueInputSerializer();
Serializer<GVersionWhereInput> _$gVersionWhereInputSerializer =
    new _$GVersionWhereInputSerializer();

class _$G_FilterKindSerializer implements PrimitiveSerializer<G_FilterKind> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Gin': 'in',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'in': 'Gin',
  };

  @override
  final Iterable<Type> types = const <Type>[G_FilterKind];
  @override
  final String wireName = 'G_FilterKind';

  @override
  Object serialize(Serializers serializers, G_FilterKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  G_FilterKind deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_FilterKind.valueOf(_fromWire[serialized] ?? serialized as String);
}

class _$G_MutationInputFieldKindSerializer
    implements PrimitiveSerializer<G_MutationInputFieldKind> {
  static const Map<String, Object> _toWire = const <String, Object>{
    'Genum': 'enum',
  };
  static const Map<Object, String> _fromWire = const <Object, String>{
    'enum': 'Genum',
  };

  @override
  final Iterable<Type> types = const <Type>[G_MutationInputFieldKind];
  @override
  final String wireName = 'G_MutationInputFieldKind';

  @override
  Object serialize(Serializers serializers, G_MutationInputFieldKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      _toWire[object.name] ?? object.name;

  @override
  G_MutationInputFieldKind deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_MutationInputFieldKind.valueOf(
          _fromWire[serialized] ?? serialized as String);
}

class _$G_MutationKindSerializer
    implements PrimitiveSerializer<G_MutationKind> {
  @override
  final Iterable<Type> types = const <Type>[G_MutationKind];
  @override
  final String wireName = 'G_MutationKind';

  @override
  Object serialize(Serializers serializers, G_MutationKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  G_MutationKind deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_MutationKind.valueOf(serialized as String);
}

class _$G_OrderDirectionSerializer
    implements PrimitiveSerializer<G_OrderDirection> {
  @override
  final Iterable<Type> types = const <Type>[G_OrderDirection];
  @override
  final String wireName = 'G_OrderDirection';

  @override
  Object serialize(Serializers serializers, G_OrderDirection object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  G_OrderDirection deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_OrderDirection.valueOf(serialized as String);
}

class _$G_RelationInputCardinalitySerializer
    implements PrimitiveSerializer<G_RelationInputCardinality> {
  @override
  final Iterable<Type> types = const <Type>[G_RelationInputCardinality];
  @override
  final String wireName = 'G_RelationInputCardinality';

  @override
  Object serialize(Serializers serializers, G_RelationInputCardinality object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  G_RelationInputCardinality deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_RelationInputCardinality.valueOf(serialized as String);
}

class _$G_RelationInputKindSerializer
    implements PrimitiveSerializer<G_RelationInputKind> {
  @override
  final Iterable<Type> types = const <Type>[G_RelationInputKind];
  @override
  final String wireName = 'G_RelationInputKind';

  @override
  Object serialize(Serializers serializers, G_RelationInputKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  G_RelationInputKind deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_RelationInputKind.valueOf(serialized as String);
}

class _$G_RelationKindSerializer
    implements PrimitiveSerializer<G_RelationKind> {
  @override
  final Iterable<Type> types = const <Type>[G_RelationKind];
  @override
  final String wireName = 'G_RelationKind';

  @override
  Object serialize(Serializers serializers, G_RelationKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  G_RelationKind deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      G_RelationKind.valueOf(serialized as String);
}

class _$GuntitledSerializer implements PrimitiveSerializer<Guntitled> {
  @override
  final Iterable<Type> types = const <Type>[Guntitled];
  @override
  final String wireName = 'Guntitled';

  @override
  Object serialize(Serializers serializers, Guntitled object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  Guntitled deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      Guntitled.valueOf(serialized as String);
}

class _$GAssetConnectInputSerializer
    implements StructuredSerializer<GAssetConnectInput> {
  @override
  final Iterable<Type> types = const [GAssetConnectInput, _$GAssetConnectInput];
  @override
  final String wireName = 'GAssetConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GAssetWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GAssetConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereUniqueInput))!
              as GAssetWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateInputSerializer
    implements StructuredSerializer<GAssetCreateInput> {
  @override
  final Iterable<Type> types = const [GAssetCreateInput, _$GAssetCreateInput];
  @override
  final String wireName = 'GAssetCreateInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GAssetCreateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'handle',
      serializers.serialize(object.handle,
          specifiedType: const FullType(String)),
      'fileName',
      serializers.serialize(object.fileName,
          specifiedType: const FullType(String)),
    ];
    Object? value;
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.height;
    if (value != null) {
      result
        ..add('height')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width;
    if (value != null) {
      result
        ..add('width')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size;
    if (value != null) {
      result
        ..add('size')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.mimeType;
    if (value != null) {
      result
        ..add('mimeType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainImageFeedItem;
    if (value != null) {
      result
        ..add('mainImageFeedItem')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCreateManyInlineInput)));
    }
    value = object.mainImageFeedItemCategory;
    if (value != null) {
      result
        ..add('mainImageFeedItemCategory')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GFeedItemCategoryCreateManyInlineInput)));
    }
    value = object.videoFeedItem;
    if (value != null) {
      result
        ..add('videoFeedItem')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCreateManyInlineInput)));
    }
    value = object.videoInspirationItem;
    if (value != null) {
      result
        ..add('videoInspirationItem')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GInspirationItemCreateManyInlineInput)));
    }
    value = object.mainImageInspirationItem;
    if (value != null) {
      result
        ..add('mainImageInspirationItem')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GInspirationItemCreateManyInlineInput)));
    }
    value = object.mainImageCategory;
    if (value != null) {
      result
        ..add('mainImageCategory')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryCreateManyInlineInput)));
    }
    value = object.localizations;
    if (value != null) {
      result
        ..add('localizations')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateLocalizationsInput)));
    }
    return result;
  }

  @override
  GAssetCreateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'handle':
          result.handle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'height':
          result.height = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size':
          result.size = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'mimeType':
          result.mimeType = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainImageFeedItem':
          result.mainImageFeedItem.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GFeedItemCreateManyInlineInput))!
              as GFeedItemCreateManyInlineInput);
          break;
        case 'mainImageFeedItemCategory':
          result.mainImageFeedItemCategory.replace(serializers.deserialize(
                  value,
                  specifiedType:
                      const FullType(GFeedItemCategoryCreateManyInlineInput))!
              as GFeedItemCategoryCreateManyInlineInput);
          break;
        case 'videoFeedItem':
          result.videoFeedItem.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GFeedItemCreateManyInlineInput))!
              as GFeedItemCreateManyInlineInput);
          break;
        case 'videoInspirationItem':
          result.videoInspirationItem.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GInspirationItemCreateManyInlineInput))!
              as GInspirationItemCreateManyInlineInput);
          break;
        case 'mainImageInspirationItem':
          result.mainImageInspirationItem.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GInspirationItemCreateManyInlineInput))!
              as GInspirationItemCreateManyInlineInput);
          break;
        case 'mainImageCategory':
          result.mainImageCategory.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryCreateManyInlineInput))!
              as GCategoryCreateManyInlineInput);
          break;
        case 'localizations':
          result.localizations.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetCreateLocalizationsInput))!
              as GAssetCreateLocalizationsInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateLocalizationDataInputSerializer
    implements StructuredSerializer<GAssetCreateLocalizationDataInput> {
  @override
  final Iterable<Type> types = const [
    GAssetCreateLocalizationDataInput,
    _$GAssetCreateLocalizationDataInput
  ];
  @override
  final String wireName = 'GAssetCreateLocalizationDataInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetCreateLocalizationDataInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'handle',
      serializers.serialize(object.handle,
          specifiedType: const FullType(String)),
      'fileName',
      serializers.serialize(object.fileName,
          specifiedType: const FullType(String)),
    ];
    Object? value;
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.height;
    if (value != null) {
      result
        ..add('height')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width;
    if (value != null) {
      result
        ..add('width')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size;
    if (value != null) {
      result
        ..add('size')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.mimeType;
    if (value != null) {
      result
        ..add('mimeType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GAssetCreateLocalizationDataInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateLocalizationDataInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'handle':
          result.handle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'height':
          result.height = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size':
          result.size = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'mimeType':
          result.mimeType = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateLocalizationInputSerializer
    implements StructuredSerializer<GAssetCreateLocalizationInput> {
  @override
  final Iterable<Type> types = const [
    GAssetCreateLocalizationInput,
    _$GAssetCreateLocalizationInput
  ];
  @override
  final String wireName = 'GAssetCreateLocalizationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetCreateLocalizationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetCreateLocalizationDataInput)),
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
    ];

    return result;
  }

  @override
  GAssetCreateLocalizationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateLocalizationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetCreateLocalizationDataInput))!
              as GAssetCreateLocalizationDataInput);
          break;
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale)) as GLocale;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateLocalizationsInputSerializer
    implements StructuredSerializer<GAssetCreateLocalizationsInput> {
  @override
  final Iterable<Type> types = const [
    GAssetCreateLocalizationsInput,
    _$GAssetCreateLocalizationsInput
  ];
  @override
  final String wireName = 'GAssetCreateLocalizationsInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetCreateLocalizationsInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetCreateLocalizationInput)])));
    }
    return result;
  }

  @override
  GAssetCreateLocalizationsInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateLocalizationsInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetCreateLocalizationInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateManyInlineInputSerializer
    implements StructuredSerializer<GAssetCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GAssetCreateManyInlineInput,
    _$GAssetCreateManyInlineInput
  ];
  @override
  final String wireName = 'GAssetCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GAssetCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetCreateInput)]))!
              as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetCreateOneInlineInputSerializer
    implements StructuredSerializer<GAssetCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GAssetCreateOneInlineInput,
    _$GAssetCreateOneInlineInput
  ];
  @override
  final String wireName = 'GAssetCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereUniqueInput)));
    }
    return result;
  }

  @override
  GAssetCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateInput))!
              as GAssetCreateInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereUniqueInput))!
              as GAssetWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetManyWhereInputSerializer
    implements StructuredSerializer<GAssetManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GAssetManyWhereInput,
    _$GAssetManyWhereInput
  ];
  @override
  final String wireName = 'GAssetManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.mainImageFeedItem_every;
    if (value != null) {
      result
        ..add('mainImageFeedItem_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.mainImageFeedItem_some;
    if (value != null) {
      result
        ..add('mainImageFeedItem_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.mainImageFeedItem_none;
    if (value != null) {
      result
        ..add('mainImageFeedItem_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.mainImageFeedItemCategory_every;
    if (value != null) {
      result
        ..add('mainImageFeedItemCategory_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCategoryWhereInput)));
    }
    value = object.mainImageFeedItemCategory_some;
    if (value != null) {
      result
        ..add('mainImageFeedItemCategory_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCategoryWhereInput)));
    }
    value = object.mainImageFeedItemCategory_none;
    if (value != null) {
      result
        ..add('mainImageFeedItemCategory_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCategoryWhereInput)));
    }
    value = object.videoFeedItem_every;
    if (value != null) {
      result
        ..add('videoFeedItem_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.videoFeedItem_some;
    if (value != null) {
      result
        ..add('videoFeedItem_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.videoFeedItem_none;
    if (value != null) {
      result
        ..add('videoFeedItem_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.videoInspirationItem_every;
    if (value != null) {
      result
        ..add('videoInspirationItem_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.videoInspirationItem_some;
    if (value != null) {
      result
        ..add('videoInspirationItem_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.videoInspirationItem_none;
    if (value != null) {
      result
        ..add('videoInspirationItem_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.mainImageInspirationItem_every;
    if (value != null) {
      result
        ..add('mainImageInspirationItem_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.mainImageInspirationItem_some;
    if (value != null) {
      result
        ..add('mainImageInspirationItem_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.mainImageInspirationItem_none;
    if (value != null) {
      result
        ..add('mainImageInspirationItem_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.mainImageCategory_every;
    if (value != null) {
      result
        ..add('mainImageCategory_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.mainImageCategory_some;
    if (value != null) {
      result
        ..add('mainImageCategory_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.mainImageCategory_none;
    if (value != null) {
      result
        ..add('mainImageCategory_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    return result;
  }

  @override
  GAssetManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'mainImageFeedItem_every':
          result.mainImageFeedItem_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'mainImageFeedItem_some':
          result.mainImageFeedItem_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'mainImageFeedItem_none':
          result.mainImageFeedItem_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'mainImageFeedItemCategory_every':
          result.mainImageFeedItemCategory_every.replace(
              serializers.deserialize(value,
                      specifiedType:
                          const FullType(GFeedItemCategoryWhereInput))!
                  as GFeedItemCategoryWhereInput);
          break;
        case 'mainImageFeedItemCategory_some':
          result.mainImageFeedItemCategory_some.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GFeedItemCategoryWhereInput))!
              as GFeedItemCategoryWhereInput);
          break;
        case 'mainImageFeedItemCategory_none':
          result.mainImageFeedItemCategory_none.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GFeedItemCategoryWhereInput))!
              as GFeedItemCategoryWhereInput);
          break;
        case 'videoFeedItem_every':
          result.videoFeedItem_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'videoFeedItem_some':
          result.videoFeedItem_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'videoFeedItem_none':
          result.videoFeedItem_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'videoInspirationItem_every':
          result.videoInspirationItem_every.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'videoInspirationItem_some':
          result.videoInspirationItem_some.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'videoInspirationItem_none':
          result.videoInspirationItem_none.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'mainImageInspirationItem_every':
          result.mainImageInspirationItem_every.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'mainImageInspirationItem_some':
          result.mainImageInspirationItem_some.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'mainImageInspirationItem_none':
          result.mainImageInspirationItem_none.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'mainImageCategory_every':
          result.mainImageCategory_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'mainImageCategory_some':
          result.mainImageCategory_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'mainImageCategory_none':
          result.mainImageCategory_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetOrderByInputSerializer
    implements PrimitiveSerializer<GAssetOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GAssetOrderByInput];
  @override
  final String wireName = 'GAssetOrderByInput';

  @override
  Object serialize(Serializers serializers, GAssetOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GAssetOrderByInput deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GAssetOrderByInput.valueOf(serialized as String);
}

class _$GAssetTransformationInputSerializer
    implements StructuredSerializer<GAssetTransformationInput> {
  @override
  final Iterable<Type> types = const [
    GAssetTransformationInput,
    _$GAssetTransformationInput
  ];
  @override
  final String wireName = 'GAssetTransformationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetTransformationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.image;
    if (value != null) {
      result
        ..add('image')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageTransformationInput)));
    }
    value = object.document;
    if (value != null) {
      result
        ..add('document')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDocumentTransformationInput)));
    }
    value = object.validateOptions;
    if (value != null) {
      result
        ..add('validateOptions')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GAssetTransformationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetTransformationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'image':
          result.image.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GImageTransformationInput))!
              as GImageTransformationInput);
          break;
        case 'document':
          result.document.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GDocumentTransformationInput))!
              as GDocumentTransformationInput);
          break;
        case 'validateOptions':
          result.validateOptions = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateInputSerializer
    implements StructuredSerializer<GAssetUpdateInput> {
  @override
  final Iterable<Type> types = const [GAssetUpdateInput, _$GAssetUpdateInput];
  @override
  final String wireName = 'GAssetUpdateInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GAssetUpdateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.handle;
    if (value != null) {
      result
        ..add('handle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.height;
    if (value != null) {
      result
        ..add('height')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width;
    if (value != null) {
      result
        ..add('width')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size;
    if (value != null) {
      result
        ..add('size')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.mimeType;
    if (value != null) {
      result
        ..add('mimeType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainImageFeedItem;
    if (value != null) {
      result
        ..add('mainImageFeedItem')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemUpdateManyInlineInput)));
    }
    value = object.mainImageFeedItemCategory;
    if (value != null) {
      result
        ..add('mainImageFeedItemCategory')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GFeedItemCategoryUpdateManyInlineInput)));
    }
    value = object.videoFeedItem;
    if (value != null) {
      result
        ..add('videoFeedItem')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemUpdateManyInlineInput)));
    }
    value = object.videoInspirationItem;
    if (value != null) {
      result
        ..add('videoInspirationItem')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GInspirationItemUpdateManyInlineInput)));
    }
    value = object.mainImageInspirationItem;
    if (value != null) {
      result
        ..add('mainImageInspirationItem')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GInspirationItemUpdateManyInlineInput)));
    }
    value = object.mainImageCategory;
    if (value != null) {
      result
        ..add('mainImageCategory')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryUpdateManyInlineInput)));
    }
    value = object.localizations;
    if (value != null) {
      result
        ..add('localizations')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUpdateLocalizationsInput)));
    }
    return result;
  }

  @override
  GAssetUpdateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'handle':
          result.handle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'height':
          result.height = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size':
          result.size = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'mimeType':
          result.mimeType = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainImageFeedItem':
          result.mainImageFeedItem.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GFeedItemUpdateManyInlineInput))!
              as GFeedItemUpdateManyInlineInput);
          break;
        case 'mainImageFeedItemCategory':
          result.mainImageFeedItemCategory.replace(serializers.deserialize(
                  value,
                  specifiedType:
                      const FullType(GFeedItemCategoryUpdateManyInlineInput))!
              as GFeedItemCategoryUpdateManyInlineInput);
          break;
        case 'videoFeedItem':
          result.videoFeedItem.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GFeedItemUpdateManyInlineInput))!
              as GFeedItemUpdateManyInlineInput);
          break;
        case 'videoInspirationItem':
          result.videoInspirationItem.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GInspirationItemUpdateManyInlineInput))!
              as GInspirationItemUpdateManyInlineInput);
          break;
        case 'mainImageInspirationItem':
          result.mainImageInspirationItem.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GInspirationItemUpdateManyInlineInput))!
              as GInspirationItemUpdateManyInlineInput);
          break;
        case 'mainImageCategory':
          result.mainImageCategory.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryUpdateManyInlineInput))!
              as GCategoryUpdateManyInlineInput);
          break;
        case 'localizations':
          result.localizations.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateLocalizationsInput))!
              as GAssetUpdateLocalizationsInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateLocalizationDataInputSerializer
    implements StructuredSerializer<GAssetUpdateLocalizationDataInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateLocalizationDataInput,
    _$GAssetUpdateLocalizationDataInput
  ];
  @override
  final String wireName = 'GAssetUpdateLocalizationDataInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateLocalizationDataInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.handle;
    if (value != null) {
      result
        ..add('handle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.height;
    if (value != null) {
      result
        ..add('height')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width;
    if (value != null) {
      result
        ..add('width')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size;
    if (value != null) {
      result
        ..add('size')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.mimeType;
    if (value != null) {
      result
        ..add('mimeType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GAssetUpdateLocalizationDataInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateLocalizationDataInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'handle':
          result.handle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'height':
          result.height = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size':
          result.size = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'mimeType':
          result.mimeType = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateLocalizationInputSerializer
    implements StructuredSerializer<GAssetUpdateLocalizationInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateLocalizationInput,
    _$GAssetUpdateLocalizationInput
  ];
  @override
  final String wireName = 'GAssetUpdateLocalizationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateLocalizationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetUpdateLocalizationDataInput)),
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
    ];

    return result;
  }

  @override
  GAssetUpdateLocalizationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateLocalizationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateLocalizationDataInput))!
              as GAssetUpdateLocalizationDataInput);
          break;
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale)) as GLocale;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateLocalizationsInputSerializer
    implements StructuredSerializer<GAssetUpdateLocalizationsInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateLocalizationsInput,
    _$GAssetUpdateLocalizationsInput
  ];
  @override
  final String wireName = 'GAssetUpdateLocalizationsInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateLocalizationsInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetCreateLocalizationInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetUpdateLocalizationInput)])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetUpsertLocalizationInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GLocale)])));
    }
    return result;
  }

  @override
  GAssetUpdateLocalizationsInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateLocalizationsInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetCreateLocalizationInput)
              ]))! as BuiltList<Object>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUpdateLocalizationInput)
              ]))! as BuiltList<Object>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUpsertLocalizationInput)
              ]))! as BuiltList<Object>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GLocale)]))!
              as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyInlineInputSerializer
    implements StructuredSerializer<GAssetUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyInlineInput,
    _$GAssetUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereUniqueInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GAssetUpdateWithNestedWhereUniqueInput)
            ])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GAssetUpsertWithNestedWhereUniqueInput)
            ])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereUniqueInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GAssetUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetCreateInput)]))!
              as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetConnectInput)]))!
              as BuiltList<Object>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUpdateWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUpsertWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyInputSerializer
    implements StructuredSerializer<GAssetUpdateManyInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyInput,
    _$GAssetUpdateManyInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.height;
    if (value != null) {
      result
        ..add('height')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width;
    if (value != null) {
      result
        ..add('width')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size;
    if (value != null) {
      result
        ..add('size')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.mimeType;
    if (value != null) {
      result
        ..add('mimeType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.localizations;
    if (value != null) {
      result
        ..add('localizations')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUpdateManyLocalizationsInput)));
    }
    return result;
  }

  @override
  GAssetUpdateManyInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'height':
          result.height = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size':
          result.size = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'mimeType':
          result.mimeType = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'localizations':
          result.localizations.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateManyLocalizationsInput))!
              as GAssetUpdateManyLocalizationsInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyLocalizationDataInputSerializer
    implements StructuredSerializer<GAssetUpdateManyLocalizationDataInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyLocalizationDataInput,
    _$GAssetUpdateManyLocalizationDataInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyLocalizationDataInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyLocalizationDataInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.height;
    if (value != null) {
      result
        ..add('height')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width;
    if (value != null) {
      result
        ..add('width')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size;
    if (value != null) {
      result
        ..add('size')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.mimeType;
    if (value != null) {
      result
        ..add('mimeType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GAssetUpdateManyLocalizationDataInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyLocalizationDataInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'height':
          result.height = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size':
          result.size = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'mimeType':
          result.mimeType = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyLocalizationInputSerializer
    implements StructuredSerializer<GAssetUpdateManyLocalizationInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyLocalizationInput,
    _$GAssetUpdateManyLocalizationInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyLocalizationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyLocalizationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetUpdateManyLocalizationDataInput)),
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
    ];

    return result;
  }

  @override
  GAssetUpdateManyLocalizationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyLocalizationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateManyLocalizationDataInput))!
              as GAssetUpdateManyLocalizationDataInput);
          break;
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale)) as GLocale;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyLocalizationsInputSerializer
    implements StructuredSerializer<GAssetUpdateManyLocalizationsInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyLocalizationsInput,
    _$GAssetUpdateManyLocalizationsInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyLocalizationsInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyLocalizationsInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GAssetUpdateManyLocalizationInput)])));
    }
    return result;
  }

  @override
  GAssetUpdateManyLocalizationsInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyLocalizationsInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GAssetUpdateManyLocalizationInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateManyWithNestedWhereInputSerializer
    implements StructuredSerializer<GAssetUpdateManyWithNestedWhereInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateManyWithNestedWhereInput,
    _$GAssetUpdateManyWithNestedWhereInput
  ];
  @override
  final String wireName = 'GAssetUpdateManyWithNestedWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateManyWithNestedWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GAssetWhereInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetUpdateManyInput)),
    ];

    return result;
  }

  @override
  GAssetUpdateManyWithNestedWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateManyWithNestedWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateManyInput))!
              as GAssetUpdateManyInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateOneInlineInputSerializer
    implements StructuredSerializer<GAssetUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateOneInlineInput,
    _$GAssetUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GAssetUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateInput)));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GAssetUpdateWithNestedWhereUniqueInput)));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GAssetUpsertWithNestedWhereUniqueInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GAssetUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateInput))!
              as GAssetCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateWithNestedWhereUniqueInput))!
              as GAssetUpdateWithNestedWhereUniqueInput);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpsertWithNestedWhereUniqueInput))!
              as GAssetUpsertWithNestedWhereUniqueInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereUniqueInput))!
              as GAssetWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
        case 'delete':
          result.delete = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpdateWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GAssetUpdateWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpdateWithNestedWhereUniqueInput,
    _$GAssetUpdateWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GAssetUpdateWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpdateWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GAssetWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetUpdateInput)),
    ];

    return result;
  }

  @override
  GAssetUpdateWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpdateWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereUniqueInput))!
              as GAssetWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateInput))!
              as GAssetUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpsertInputSerializer
    implements StructuredSerializer<GAssetUpsertInput> {
  @override
  final Iterable<Type> types = const [GAssetUpsertInput, _$GAssetUpsertInput];
  @override
  final String wireName = 'GAssetUpsertInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GAssetUpsertInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'create',
      serializers.serialize(object.create,
          specifiedType: const FullType(GAssetCreateInput)),
      'updateIt',
      serializers.serialize(object.updateIt,
          specifiedType: const FullType(GAssetUpdateInput)),
    ];

    return result;
  }

  @override
  GAssetUpsertInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpsertInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateInput))!
              as GAssetCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateInput))!
              as GAssetUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpsertLocalizationInputSerializer
    implements StructuredSerializer<GAssetUpsertLocalizationInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpsertLocalizationInput,
    _$GAssetUpsertLocalizationInput
  ];
  @override
  final String wireName = 'GAssetUpsertLocalizationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpsertLocalizationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'updateIt',
      serializers.serialize(object.updateIt,
          specifiedType: const FullType(GAssetUpdateLocalizationDataInput)),
      'create',
      serializers.serialize(object.create,
          specifiedType: const FullType(GAssetCreateLocalizationDataInput)),
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
    ];

    return result;
  }

  @override
  GAssetUpsertLocalizationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpsertLocalizationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetUpdateLocalizationDataInput))!
              as GAssetUpdateLocalizationDataInput);
          break;
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GAssetCreateLocalizationDataInput))!
              as GAssetCreateLocalizationDataInput);
          break;
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale)) as GLocale;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetUpsertWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GAssetUpsertWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GAssetUpsertWithNestedWhereUniqueInput,
    _$GAssetUpsertWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GAssetUpsertWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetUpsertWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GAssetWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GAssetUpsertInput)),
    ];

    return result;
  }

  @override
  GAssetUpsertWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetUpsertWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereUniqueInput))!
              as GAssetWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpsertInput))!
              as GAssetUpsertInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetWhereInputSerializer
    implements StructuredSerializer<GAssetWhereInput> {
  @override
  final Iterable<Type> types = const [GAssetWhereInput, _$GAssetWhereInput];
  @override
  final String wireName = 'GAssetWhereInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GAssetWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GAssetWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.handle;
    if (value != null) {
      result
        ..add('handle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_not;
    if (value != null) {
      result
        ..add('handle_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_in;
    if (value != null) {
      result
        ..add('handle_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.handle_not_in;
    if (value != null) {
      result
        ..add('handle_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.handle_contains;
    if (value != null) {
      result
        ..add('handle_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_not_contains;
    if (value != null) {
      result
        ..add('handle_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_starts_with;
    if (value != null) {
      result
        ..add('handle_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_not_starts_with;
    if (value != null) {
      result
        ..add('handle_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_ends_with;
    if (value != null) {
      result
        ..add('handle_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.handle_not_ends_with;
    if (value != null) {
      result
        ..add('handle_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName;
    if (value != null) {
      result
        ..add('fileName')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_not;
    if (value != null) {
      result
        ..add('fileName_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_in;
    if (value != null) {
      result
        ..add('fileName_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.fileName_not_in;
    if (value != null) {
      result
        ..add('fileName_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.fileName_contains;
    if (value != null) {
      result
        ..add('fileName_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_not_contains;
    if (value != null) {
      result
        ..add('fileName_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_starts_with;
    if (value != null) {
      result
        ..add('fileName_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_not_starts_with;
    if (value != null) {
      result
        ..add('fileName_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_ends_with;
    if (value != null) {
      result
        ..add('fileName_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.fileName_not_ends_with;
    if (value != null) {
      result
        ..add('fileName_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.height;
    if (value != null) {
      result
        ..add('height')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.height_not;
    if (value != null) {
      result
        ..add('height_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.height_in;
    if (value != null) {
      result
        ..add('height_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(double)])));
    }
    value = object.height_not_in;
    if (value != null) {
      result
        ..add('height_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(double)])));
    }
    value = object.height_lt;
    if (value != null) {
      result
        ..add('height_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.height_lte;
    if (value != null) {
      result
        ..add('height_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.height_gt;
    if (value != null) {
      result
        ..add('height_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.height_gte;
    if (value != null) {
      result
        ..add('height_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width;
    if (value != null) {
      result
        ..add('width')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width_not;
    if (value != null) {
      result
        ..add('width_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width_in;
    if (value != null) {
      result
        ..add('width_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(double)])));
    }
    value = object.width_not_in;
    if (value != null) {
      result
        ..add('width_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(double)])));
    }
    value = object.width_lt;
    if (value != null) {
      result
        ..add('width_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width_lte;
    if (value != null) {
      result
        ..add('width_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width_gt;
    if (value != null) {
      result
        ..add('width_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.width_gte;
    if (value != null) {
      result
        ..add('width_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size;
    if (value != null) {
      result
        ..add('size')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size_not;
    if (value != null) {
      result
        ..add('size_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size_in;
    if (value != null) {
      result
        ..add('size_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(double)])));
    }
    value = object.size_not_in;
    if (value != null) {
      result
        ..add('size_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(double)])));
    }
    value = object.size_lt;
    if (value != null) {
      result
        ..add('size_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size_lte;
    if (value != null) {
      result
        ..add('size_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size_gt;
    if (value != null) {
      result
        ..add('size_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.size_gte;
    if (value != null) {
      result
        ..add('size_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(double)));
    }
    value = object.mimeType;
    if (value != null) {
      result
        ..add('mimeType')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_not;
    if (value != null) {
      result
        ..add('mimeType_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_in;
    if (value != null) {
      result
        ..add('mimeType_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.mimeType_not_in;
    if (value != null) {
      result
        ..add('mimeType_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.mimeType_contains;
    if (value != null) {
      result
        ..add('mimeType_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_not_contains;
    if (value != null) {
      result
        ..add('mimeType_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_starts_with;
    if (value != null) {
      result
        ..add('mimeType_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_not_starts_with;
    if (value != null) {
      result
        ..add('mimeType_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_ends_with;
    if (value != null) {
      result
        ..add('mimeType_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mimeType_not_ends_with;
    if (value != null) {
      result
        ..add('mimeType_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.mainImageFeedItem_every;
    if (value != null) {
      result
        ..add('mainImageFeedItem_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.mainImageFeedItem_some;
    if (value != null) {
      result
        ..add('mainImageFeedItem_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.mainImageFeedItem_none;
    if (value != null) {
      result
        ..add('mainImageFeedItem_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.mainImageFeedItemCategory_every;
    if (value != null) {
      result
        ..add('mainImageFeedItemCategory_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCategoryWhereInput)));
    }
    value = object.mainImageFeedItemCategory_some;
    if (value != null) {
      result
        ..add('mainImageFeedItemCategory_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCategoryWhereInput)));
    }
    value = object.mainImageFeedItemCategory_none;
    if (value != null) {
      result
        ..add('mainImageFeedItemCategory_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCategoryWhereInput)));
    }
    value = object.videoFeedItem_every;
    if (value != null) {
      result
        ..add('videoFeedItem_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.videoFeedItem_some;
    if (value != null) {
      result
        ..add('videoFeedItem_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.videoFeedItem_none;
    if (value != null) {
      result
        ..add('videoFeedItem_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    value = object.videoInspirationItem_every;
    if (value != null) {
      result
        ..add('videoInspirationItem_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.videoInspirationItem_some;
    if (value != null) {
      result
        ..add('videoInspirationItem_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.videoInspirationItem_none;
    if (value != null) {
      result
        ..add('videoInspirationItem_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.mainImageInspirationItem_every;
    if (value != null) {
      result
        ..add('mainImageInspirationItem_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.mainImageInspirationItem_some;
    if (value != null) {
      result
        ..add('mainImageInspirationItem_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.mainImageInspirationItem_none;
    if (value != null) {
      result
        ..add('mainImageInspirationItem_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereInput)));
    }
    value = object.mainImageCategory_every;
    if (value != null) {
      result
        ..add('mainImageCategory_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.mainImageCategory_some;
    if (value != null) {
      result
        ..add('mainImageCategory_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.mainImageCategory_none;
    if (value != null) {
      result
        ..add('mainImageCategory_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    return result;
  }

  @override
  GAssetWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GAssetWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'handle':
          result.handle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'handle_not':
          result.handle_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'handle_in':
          result.handle_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'handle_not_in':
          result.handle_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'handle_contains':
          result.handle_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'handle_not_contains':
          result.handle_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'handle_starts_with':
          result.handle_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'handle_not_starts_with':
          result.handle_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'handle_ends_with':
          result.handle_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'handle_not_ends_with':
          result.handle_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName':
          result.fileName = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName_not':
          result.fileName_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName_in':
          result.fileName_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'fileName_not_in':
          result.fileName_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'fileName_contains':
          result.fileName_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName_not_contains':
          result.fileName_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName_starts_with':
          result.fileName_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName_not_starts_with':
          result.fileName_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName_ends_with':
          result.fileName_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'fileName_not_ends_with':
          result.fileName_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'height':
          result.height = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'height_not':
          result.height_not = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'height_in':
          result.height_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(double)]))!
              as BuiltList<Object>);
          break;
        case 'height_not_in':
          result.height_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(double)]))!
              as BuiltList<Object>);
          break;
        case 'height_lt':
          result.height_lt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'height_lte':
          result.height_lte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'height_gt':
          result.height_gt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'height_gte':
          result.height_gte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width_not':
          result.width_not = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width_in':
          result.width_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(double)]))!
              as BuiltList<Object>);
          break;
        case 'width_not_in':
          result.width_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(double)]))!
              as BuiltList<Object>);
          break;
        case 'width_lt':
          result.width_lt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width_lte':
          result.width_lte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width_gt':
          result.width_gt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'width_gte':
          result.width_gte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size':
          result.size = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size_not':
          result.size_not = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size_in':
          result.size_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(double)]))!
              as BuiltList<Object>);
          break;
        case 'size_not_in':
          result.size_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(double)]))!
              as BuiltList<Object>);
          break;
        case 'size_lt':
          result.size_lt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size_lte':
          result.size_lte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size_gt':
          result.size_gt = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'size_gte':
          result.size_gte = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'mimeType':
          result.mimeType = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mimeType_not':
          result.mimeType_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mimeType_in':
          result.mimeType_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'mimeType_not_in':
          result.mimeType_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'mimeType_contains':
          result.mimeType_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mimeType_not_contains':
          result.mimeType_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mimeType_starts_with':
          result.mimeType_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mimeType_not_starts_with':
          result.mimeType_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mimeType_ends_with':
          result.mimeType_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mimeType_not_ends_with':
          result.mimeType_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'mainImageFeedItem_every':
          result.mainImageFeedItem_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'mainImageFeedItem_some':
          result.mainImageFeedItem_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'mainImageFeedItem_none':
          result.mainImageFeedItem_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'mainImageFeedItemCategory_every':
          result.mainImageFeedItemCategory_every.replace(
              serializers.deserialize(value,
                      specifiedType:
                          const FullType(GFeedItemCategoryWhereInput))!
                  as GFeedItemCategoryWhereInput);
          break;
        case 'mainImageFeedItemCategory_some':
          result.mainImageFeedItemCategory_some.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GFeedItemCategoryWhereInput))!
              as GFeedItemCategoryWhereInput);
          break;
        case 'mainImageFeedItemCategory_none':
          result.mainImageFeedItemCategory_none.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GFeedItemCategoryWhereInput))!
              as GFeedItemCategoryWhereInput);
          break;
        case 'videoFeedItem_every':
          result.videoFeedItem_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'videoFeedItem_some':
          result.videoFeedItem_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'videoFeedItem_none':
          result.videoFeedItem_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'videoInspirationItem_every':
          result.videoInspirationItem_every.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'videoInspirationItem_some':
          result.videoInspirationItem_some.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'videoInspirationItem_none':
          result.videoInspirationItem_none.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'mainImageInspirationItem_every':
          result.mainImageInspirationItem_every.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'mainImageInspirationItem_some':
          result.mainImageInspirationItem_some.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'mainImageInspirationItem_none':
          result.mainImageInspirationItem_none.replace(serializers.deserialize(
                  value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'mainImageCategory_every':
          result.mainImageCategory_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'mainImageCategory_some':
          result.mainImageCategory_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'mainImageCategory_none':
          result.mainImageCategory_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetWhereUniqueInputSerializer
    implements StructuredSerializer<GAssetWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GAssetWhereUniqueInput,
    _$GAssetWhereUniqueInput
  ];
  @override
  final String wireName = 'GAssetWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GAssetWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GAssetWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GAssetWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GBodyMeasurementsSerializer
    implements PrimitiveSerializer<GBodyMeasurements> {
  @override
  final Iterable<Type> types = const <Type>[GBodyMeasurements];
  @override
  final String wireName = 'GBodyMeasurements';

  @override
  Object serialize(Serializers serializers, GBodyMeasurements object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GBodyMeasurements deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GBodyMeasurements.valueOf(serialized as String);
}

class _$GCategoryConnectInputSerializer
    implements StructuredSerializer<GCategoryConnectInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryConnectInput,
    _$GCategoryConnectInput
  ];
  @override
  final String wireName = 'GCategoryConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GCategoryWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GCategoryConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereUniqueInput))!
              as GCategoryWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryCreateInputSerializer
    implements StructuredSerializer<GCategoryCreateInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryCreateInput,
    _$GCategoryCreateInput
  ];
  @override
  final String wireName = 'GCategoryCreateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryCreateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateOneInlineInput)));
    }
    value = object.categoryTitle;
    if (value != null) {
      result
        ..add('categoryTitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    value = object.feedItems;
    if (value != null) {
      result
        ..add('feedItems')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GCategoryFeedItemsCreateManyInlineInput)));
    }
    return result;
  }

  @override
  GCategoryCreateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryCreateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateOneInlineInput))!
              as GAssetCreateOneInlineInput);
          break;
        case 'categoryTitle':
          result.categoryTitle = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
        case 'feedItems':
          result.feedItems.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryFeedItemsCreateManyInlineInput))!
              as GCategoryFeedItemsCreateManyInlineInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryCreateManyInlineInputSerializer
    implements StructuredSerializer<GCategoryCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryCreateManyInlineInput,
    _$GCategoryCreateManyInlineInput
  ];
  @override
  final String wireName = 'GCategoryCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GCategoryCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryCreateInput)]))!
              as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryCreateOneInlineInputSerializer
    implements StructuredSerializer<GCategoryCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryCreateOneInlineInput,
    _$GCategoryCreateOneInlineInput
  ];
  @override
  final String wireName = 'GCategoryCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryCreateInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereUniqueInput)));
    }
    return result;
  }

  @override
  GCategoryCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryCreateInput))!
              as GCategoryCreateInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereUniqueInput))!
              as GCategoryWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsConnectInputSerializer
    implements StructuredSerializer<GCategoryFeedItemsConnectInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsConnectInput,
    _$GCategoryFeedItemsConnectInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryFeedItemsConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.FeedItem;
    if (value != null) {
      result
        ..add('FeedItem')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemConnectInput)));
    }
    return result;
  }

  @override
  GCategoryFeedItemsConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryFeedItemsConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'FeedItem':
          result.FeedItem.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemConnectInput))!
              as GFeedItemConnectInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsCreateInputSerializer
    implements StructuredSerializer<GCategoryFeedItemsCreateInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsCreateInput,
    _$GCategoryFeedItemsCreateInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsCreateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryFeedItemsCreateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.FeedItem;
    if (value != null) {
      result
        ..add('FeedItem')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCreateInput)));
    }
    return result;
  }

  @override
  GCategoryFeedItemsCreateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryFeedItemsCreateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'FeedItem':
          result.FeedItem.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemCreateInput))!
              as GFeedItemCreateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsCreateManyInlineInputSerializer
    implements StructuredSerializer<GCategoryFeedItemsCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsCreateManyInlineInput,
    _$GCategoryFeedItemsCreateManyInlineInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryFeedItemsCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryFeedItemsCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryFeedItemsWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GCategoryFeedItemsCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryFeedItemsCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryFeedItemsCreateInput)
              ]))! as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryFeedItemsWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsCreateOneInlineInputSerializer
    implements StructuredSerializer<GCategoryFeedItemsCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsCreateOneInlineInput,
    _$GCategoryFeedItemsCreateOneInlineInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryFeedItemsCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryFeedItemsCreateInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryFeedItemsWhereUniqueInput)));
    }
    return result;
  }

  @override
  GCategoryFeedItemsCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryFeedItemsCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryFeedItemsCreateInput))!
              as GCategoryFeedItemsCreateInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryFeedItemsWhereUniqueInput))!
              as GCategoryFeedItemsWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsUpdateInputSerializer
    implements StructuredSerializer<GCategoryFeedItemsUpdateInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsUpdateInput,
    _$GCategoryFeedItemsUpdateInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsUpdateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryFeedItemsUpdateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.FeedItem;
    if (value != null) {
      result
        ..add('FeedItem')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemUpdateInput)));
    }
    return result;
  }

  @override
  GCategoryFeedItemsUpdateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryFeedItemsUpdateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'FeedItem':
          result.FeedItem.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemUpdateInput))!
              as GFeedItemUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsUpdateManyInlineInputSerializer
    implements StructuredSerializer<GCategoryFeedItemsUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsUpdateManyInlineInput,
    _$GCategoryFeedItemsUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryFeedItemsUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryFeedItemsCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryFeedItemsConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryFeedItemsWhereUniqueInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GCategoryFeedItemsUpdateWithNestedWhereUniqueInput)
            ])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GCategoryFeedItemsUpsertWithNestedWhereUniqueInput)
            ])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryFeedItemsWhereUniqueInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GCategoryFeedItemsWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GCategoryFeedItemsUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryFeedItemsUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryFeedItemsCreateInput)
              ]))! as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryFeedItemsConnectInput)
              ]))! as BuiltList<Object>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryFeedItemsWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(
                    GCategoryFeedItemsUpdateWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(
                    GCategoryFeedItemsUpsertWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryFeedItemsWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryFeedItemsWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsUpdateManyWithNestedWhereInputSerializer
    implements
        StructuredSerializer<GCategoryFeedItemsUpdateManyWithNestedWhereInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsUpdateManyWithNestedWhereInput,
    _$GCategoryFeedItemsUpdateManyWithNestedWhereInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsUpdateManyWithNestedWhereInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GCategoryFeedItemsUpdateManyWithNestedWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.FeedItem;
    if (value != null) {
      result
        ..add('FeedItem')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GFeedItemUpdateManyWithNestedWhereInput)));
    }
    return result;
  }

  @override
  GCategoryFeedItemsUpdateManyWithNestedWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GCategoryFeedItemsUpdateManyWithNestedWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'FeedItem':
          result.FeedItem.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GFeedItemUpdateManyWithNestedWhereInput))!
              as GFeedItemUpdateManyWithNestedWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsUpdateOneInlineInputSerializer
    implements StructuredSerializer<GCategoryFeedItemsUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsUpdateOneInlineInput,
    _$GCategoryFeedItemsUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryFeedItemsUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryFeedItemsCreateInput)));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GCategoryFeedItemsUpdateWithNestedWhereUniqueInput)));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GCategoryFeedItemsUpsertWithNestedWhereUniqueInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryFeedItemsWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GCategoryFeedItemsUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryFeedItemsUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryFeedItemsCreateInput))!
              as GCategoryFeedItemsCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GCategoryFeedItemsUpdateWithNestedWhereUniqueInput))!
              as GCategoryFeedItemsUpdateWithNestedWhereUniqueInput);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GCategoryFeedItemsUpsertWithNestedWhereUniqueInput))!
              as GCategoryFeedItemsUpsertWithNestedWhereUniqueInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryFeedItemsWhereUniqueInput))!
              as GCategoryFeedItemsWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
        case 'delete':
          result.delete = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsUpdateWithNestedWhereUniqueInputSerializer
    implements
        StructuredSerializer<
            GCategoryFeedItemsUpdateWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsUpdateWithNestedWhereUniqueInput,
    _$GCategoryFeedItemsUpdateWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsUpdateWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GCategoryFeedItemsUpdateWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.FeedItem;
    if (value != null) {
      result
        ..add('FeedItem')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GFeedItemUpdateWithNestedWhereUniqueInput)));
    }
    return result;
  }

  @override
  GCategoryFeedItemsUpdateWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'FeedItem':
          result.FeedItem.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GFeedItemUpdateWithNestedWhereUniqueInput))!
              as GFeedItemUpdateWithNestedWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsUpsertWithNestedWhereUniqueInputSerializer
    implements
        StructuredSerializer<
            GCategoryFeedItemsUpsertWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsUpsertWithNestedWhereUniqueInput,
    _$GCategoryFeedItemsUpsertWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsUpsertWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GCategoryFeedItemsUpsertWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.FeedItem;
    if (value != null) {
      result
        ..add('FeedItem')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GFeedItemUpsertWithNestedWhereUniqueInput)));
    }
    return result;
  }

  @override
  GCategoryFeedItemsUpsertWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'FeedItem':
          result.FeedItem.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GFeedItemUpsertWithNestedWhereUniqueInput))!
              as GFeedItemUpsertWithNestedWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsWhereInputSerializer
    implements StructuredSerializer<GCategoryFeedItemsWhereInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsWhereInput,
    _$GCategoryFeedItemsWhereInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryFeedItemsWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.FeedItem;
    if (value != null) {
      result
        ..add('FeedItem')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereInput)));
    }
    return result;
  }

  @override
  GCategoryFeedItemsWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryFeedItemsWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'FeedItem':
          result.FeedItem.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryFeedItemsWhereUniqueInputSerializer
    implements StructuredSerializer<GCategoryFeedItemsWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryFeedItemsWhereUniqueInput,
    _$GCategoryFeedItemsWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryFeedItemsWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryFeedItemsWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.FeedItem;
    if (value != null) {
      result
        ..add('FeedItem')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereUniqueInput)));
    }
    return result;
  }

  @override
  GCategoryFeedItemsWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryFeedItemsWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'FeedItem':
          result.FeedItem.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereUniqueInput))!
              as GFeedItemWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryManyWhereInputSerializer
    implements StructuredSerializer<GCategoryManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryManyWhereInput,
    _$GCategoryManyWhereInput
  ];
  @override
  final String wireName = 'GCategoryManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.categoryTitle;
    if (value != null) {
      result
        ..add('categoryTitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    value = object.categoryTitle_not;
    if (value != null) {
      result
        ..add('categoryTitle_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    value = object.categoryTitle_in;
    if (value != null) {
      result
        ..add('categoryTitle_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryTitle)])));
    }
    value = object.categoryTitle_not_in;
    if (value != null) {
      result
        ..add('categoryTitle_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryTitle)])));
    }
    return result;
  }

  @override
  GCategoryManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'categoryTitle':
          result.categoryTitle = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
        case 'categoryTitle_not':
          result.categoryTitle_not = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
        case 'categoryTitle_in':
          result.categoryTitle_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryTitle)]))!
              as BuiltList<Object>);
          break;
        case 'categoryTitle_not_in':
          result.categoryTitle_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryTitle)]))!
              as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryOrderByInputSerializer
    implements PrimitiveSerializer<GCategoryOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GCategoryOrderByInput];
  @override
  final String wireName = 'GCategoryOrderByInput';

  @override
  Object serialize(Serializers serializers, GCategoryOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GCategoryOrderByInput deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GCategoryOrderByInput.valueOf(serialized as String);
}

class _$GCategoryTitleSerializer
    implements PrimitiveSerializer<GCategoryTitle> {
  @override
  final Iterable<Type> types = const <Type>[GCategoryTitle];
  @override
  final String wireName = 'GCategoryTitle';

  @override
  Object serialize(Serializers serializers, GCategoryTitle object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GCategoryTitle deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GCategoryTitle.valueOf(serialized as String);
}

class _$GCategoryUpdateInputSerializer
    implements StructuredSerializer<GCategoryUpdateInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateInput,
    _$GCategoryUpdateInput
  ];
  @override
  final String wireName = 'GCategoryUpdateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUpdateOneInlineInput)));
    }
    value = object.categoryTitle;
    if (value != null) {
      result
        ..add('categoryTitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    value = object.feedItems;
    if (value != null) {
      result
        ..add('feedItems')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GCategoryFeedItemsUpdateManyInlineInput)));
    }
    return result;
  }

  @override
  GCategoryUpdateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateOneInlineInput))!
              as GAssetUpdateOneInlineInput);
          break;
        case 'categoryTitle':
          result.categoryTitle = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
        case 'feedItems':
          result.feedItems.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryFeedItemsUpdateManyInlineInput))!
              as GCategoryFeedItemsUpdateManyInlineInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpdateManyInlineInputSerializer
    implements StructuredSerializer<GCategoryUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateManyInlineInput,
    _$GCategoryUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GCategoryUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereUniqueInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GCategoryUpdateWithNestedWhereUniqueInput)
            ])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GCategoryUpsertWithNestedWhereUniqueInput)
            ])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereUniqueInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GCategoryUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryCreateInput)]))!
              as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryConnectInput)
              ]))! as BuiltList<Object>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryUpdateWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryUpsertWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GCategoryWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpdateManyInputSerializer
    implements StructuredSerializer<GCategoryUpdateManyInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateManyInput,
    _$GCategoryUpdateManyInput
  ];
  @override
  final String wireName = 'GCategoryUpdateManyInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateManyInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.categoryTitle;
    if (value != null) {
      result
        ..add('categoryTitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    return result;
  }

  @override
  GCategoryUpdateManyInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateManyInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'categoryTitle':
          result.categoryTitle = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpdateManyWithNestedWhereInputSerializer
    implements StructuredSerializer<GCategoryUpdateManyWithNestedWhereInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateManyWithNestedWhereInput,
    _$GCategoryUpdateManyWithNestedWhereInput
  ];
  @override
  final String wireName = 'GCategoryUpdateManyWithNestedWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateManyWithNestedWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GCategoryWhereInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GCategoryUpdateManyInput)),
    ];

    return result;
  }

  @override
  GCategoryUpdateManyWithNestedWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateManyWithNestedWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryUpdateManyInput))!
              as GCategoryUpdateManyInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpdateOneInlineInputSerializer
    implements StructuredSerializer<GCategoryUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateOneInlineInput,
    _$GCategoryUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GCategoryUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryCreateInput)));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GCategoryUpdateWithNestedWhereUniqueInput)));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GCategoryUpsertWithNestedWhereUniqueInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GCategoryUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryCreateInput))!
              as GCategoryCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GCategoryUpdateWithNestedWhereUniqueInput))!
              as GCategoryUpdateWithNestedWhereUniqueInput);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GCategoryUpsertWithNestedWhereUniqueInput))!
              as GCategoryUpsertWithNestedWhereUniqueInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereUniqueInput))!
              as GCategoryWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
        case 'delete':
          result.delete = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpdateWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GCategoryUpdateWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpdateWithNestedWhereUniqueInput,
    _$GCategoryUpdateWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryUpdateWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpdateWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GCategoryWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GCategoryUpdateInput)),
    ];

    return result;
  }

  @override
  GCategoryUpdateWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpdateWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereUniqueInput))!
              as GCategoryWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryUpdateInput))!
              as GCategoryUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpsertInputSerializer
    implements StructuredSerializer<GCategoryUpsertInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpsertInput,
    _$GCategoryUpsertInput
  ];
  @override
  final String wireName = 'GCategoryUpsertInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpsertInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'create',
      serializers.serialize(object.create,
          specifiedType: const FullType(GCategoryCreateInput)),
      'updateIt',
      serializers.serialize(object.updateIt,
          specifiedType: const FullType(GCategoryUpdateInput)),
    ];

    return result;
  }

  @override
  GCategoryUpsertInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpsertInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryCreateInput))!
              as GCategoryCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryUpdateInput))!
              as GCategoryUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryUpsertWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GCategoryUpsertWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryUpsertWithNestedWhereUniqueInput,
    _$GCategoryUpsertWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryUpsertWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryUpsertWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GCategoryWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GCategoryUpsertInput)),
    ];

    return result;
  }

  @override
  GCategoryUpsertWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryUpsertWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereUniqueInput))!
              as GCategoryWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryUpsertInput))!
              as GCategoryUpsertInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryWhereInputSerializer
    implements StructuredSerializer<GCategoryWhereInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryWhereInput,
    _$GCategoryWhereInput
  ];
  @override
  final String wireName = 'GCategoryWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.categoryTitle;
    if (value != null) {
      result
        ..add('categoryTitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    value = object.categoryTitle_not;
    if (value != null) {
      result
        ..add('categoryTitle_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    value = object.categoryTitle_in;
    if (value != null) {
      result
        ..add('categoryTitle_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryTitle)])));
    }
    value = object.categoryTitle_not_in;
    if (value != null) {
      result
        ..add('categoryTitle_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryTitle)])));
    }
    return result;
  }

  @override
  GCategoryWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'categoryTitle':
          result.categoryTitle = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
        case 'categoryTitle_not':
          result.categoryTitle_not = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
        case 'categoryTitle_in':
          result.categoryTitle_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryTitle)]))!
              as BuiltList<Object>);
          break;
        case 'categoryTitle_not_in':
          result.categoryTitle_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryTitle)]))!
              as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GCategoryWhereUniqueInputSerializer
    implements StructuredSerializer<GCategoryWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GCategoryWhereUniqueInput,
    _$GCategoryWhereUniqueInput
  ];
  @override
  final String wireName = 'GCategoryWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GCategoryWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GCategoryWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GCategoryWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GColorInputSerializer implements StructuredSerializer<GColorInput> {
  @override
  final Iterable<Type> types = const [GColorInput, _$GColorInput];
  @override
  final String wireName = 'GColorInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GColorInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.hex;
    if (value != null) {
      result
        ..add('hex')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.rgba;
    if (value != null) {
      result
        ..add('rgba')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GRGBAInput)));
    }
    return result;
  }

  @override
  GColorInput deserialize(Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GColorInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'hex':
          result.hex = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'rgba':
          result.rgba.replace(serializers.deserialize(value,
              specifiedType: const FullType(GRGBAInput))! as GRGBAInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GConnectPositionInputSerializer
    implements StructuredSerializer<GConnectPositionInput> {
  @override
  final Iterable<Type> types = const [
    GConnectPositionInput,
    _$GConnectPositionInput
  ];
  @override
  final String wireName = 'GConnectPositionInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GConnectPositionInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.after;
    if (value != null) {
      result
        ..add('after')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.before;
    if (value != null) {
      result
        ..add('before')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.start;
    if (value != null) {
      result
        ..add('start')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.end;
    if (value != null) {
      result
        ..add('end')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GConnectPositionInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GConnectPositionInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'after':
          result.after = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'before':
          result.before = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'start':
          result.start = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
        case 'end':
          result.end = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GCycleSerializer implements PrimitiveSerializer<GCycle> {
  @override
  final Iterable<Type> types = const <Type>[GCycle];
  @override
  final String wireName = 'GCycle';

  @override
  Object serialize(Serializers serializers, GCycle object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GCycle deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GCycle.valueOf(serialized as String);
}

class _$GDocumentFileTypesSerializer
    implements PrimitiveSerializer<GDocumentFileTypes> {
  @override
  final Iterable<Type> types = const <Type>[GDocumentFileTypes];
  @override
  final String wireName = 'GDocumentFileTypes';

  @override
  Object serialize(Serializers serializers, GDocumentFileTypes object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GDocumentFileTypes deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GDocumentFileTypes.valueOf(serialized as String);
}

class _$GDocumentOutputInputSerializer
    implements StructuredSerializer<GDocumentOutputInput> {
  @override
  final Iterable<Type> types = const [
    GDocumentOutputInput,
    _$GDocumentOutputInput
  ];
  @override
  final String wireName = 'GDocumentOutputInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GDocumentOutputInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.format;
    if (value != null) {
      result
        ..add('format')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDocumentFileTypes)));
    }
    return result;
  }

  @override
  GDocumentOutputInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GDocumentOutputInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'format':
          result.format = serializers.deserialize(value,
                  specifiedType: const FullType(GDocumentFileTypes))
              as GDocumentFileTypes;
          break;
      }
    }

    return result.build();
  }
}

class _$GDocumentTransformationInputSerializer
    implements StructuredSerializer<GDocumentTransformationInput> {
  @override
  final Iterable<Type> types = const [
    GDocumentTransformationInput,
    _$GDocumentTransformationInput
  ];
  @override
  final String wireName = 'GDocumentTransformationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GDocumentTransformationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.output;
    if (value != null) {
      result
        ..add('output')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GDocumentOutputInput)));
    }
    return result;
  }

  @override
  GDocumentTransformationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GDocumentTransformationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'output':
          result.output.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GDocumentOutputInput))!
              as GDocumentOutputInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryConnectInputSerializer
    implements StructuredSerializer<GFeedItemCategoryConnectInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryConnectInput,
    _$GFeedItemCategoryConnectInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GFeedItemCategoryWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GFeedItemCategoryConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GFeedItemCategoryWhereUniqueInput))!
              as GFeedItemCategoryWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryCreateInputSerializer
    implements StructuredSerializer<GFeedItemCategoryCreateInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryCreateInput,
    _$GFeedItemCategoryCreateInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryCreateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryCreateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'mainImage',
      serializers.serialize(object.mainImage,
          specifiedType: const FullType(GAssetCreateOneInlineInput)),
    ];
    Object? value;
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.categoryTitle;
    if (value != null) {
      result
        ..add('categoryTitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    return result;
  }

  @override
  GFeedItemCategoryCreateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryCreateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateOneInlineInput))!
              as GAssetCreateOneInlineInput);
          break;
        case 'categoryTitle':
          result.categoryTitle = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryCreateManyInlineInputSerializer
    implements StructuredSerializer<GFeedItemCategoryCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryCreateManyInlineInput,
    _$GFeedItemCategoryCreateManyInlineInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GFeedItemCategoryCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryCreateInput)
              ]))! as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryCreateOneInlineInputSerializer
    implements StructuredSerializer<GFeedItemCategoryCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryCreateOneInlineInput,
    _$GFeedItemCategoryCreateOneInlineInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCategoryCreateInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCategoryWhereUniqueInput)));
    }
    return result;
  }

  @override
  GFeedItemCategoryCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemCategoryCreateInput))!
              as GFeedItemCategoryCreateInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GFeedItemCategoryWhereUniqueInput))!
              as GFeedItemCategoryWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryManyWhereInputSerializer
    implements StructuredSerializer<GFeedItemCategoryManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryManyWhereInput,
    _$GFeedItemCategoryManyWhereInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.categoryTitle;
    if (value != null) {
      result
        ..add('categoryTitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    value = object.categoryTitle_not;
    if (value != null) {
      result
        ..add('categoryTitle_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    value = object.categoryTitle_in;
    if (value != null) {
      result
        ..add('categoryTitle_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryTitle)])));
    }
    value = object.categoryTitle_not_in;
    if (value != null) {
      result
        ..add('categoryTitle_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryTitle)])));
    }
    return result;
  }

  @override
  GFeedItemCategoryManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'categoryTitle':
          result.categoryTitle = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
        case 'categoryTitle_not':
          result.categoryTitle_not = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
        case 'categoryTitle_in':
          result.categoryTitle_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryTitle)]))!
              as BuiltList<Object>);
          break;
        case 'categoryTitle_not_in':
          result.categoryTitle_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryTitle)]))!
              as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryOrderByInputSerializer
    implements PrimitiveSerializer<GFeedItemCategoryOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GFeedItemCategoryOrderByInput];
  @override
  final String wireName = 'GFeedItemCategoryOrderByInput';

  @override
  Object serialize(
          Serializers serializers, GFeedItemCategoryOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GFeedItemCategoryOrderByInput deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GFeedItemCategoryOrderByInput.valueOf(serialized as String);
}

class _$GFeedItemCategoryUpdateInputSerializer
    implements StructuredSerializer<GFeedItemCategoryUpdateInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryUpdateInput,
    _$GFeedItemCategoryUpdateInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryUpdateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryUpdateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUpdateOneInlineInput)));
    }
    value = object.categoryTitle;
    if (value != null) {
      result
        ..add('categoryTitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    return result;
  }

  @override
  GFeedItemCategoryUpdateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryUpdateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateOneInlineInput))!
              as GAssetUpdateOneInlineInput);
          break;
        case 'categoryTitle':
          result.categoryTitle = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryUpdateManyInlineInputSerializer
    implements StructuredSerializer<GFeedItemCategoryUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryUpdateManyInlineInput,
    _$GFeedItemCategoryUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryWhereUniqueInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GFeedItemCategoryUpdateWithNestedWhereUniqueInput)
            ])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GFeedItemCategoryUpsertWithNestedWhereUniqueInput)
            ])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryWhereUniqueInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GFeedItemCategoryUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryCreateInput)
              ]))! as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryConnectInput)
              ]))! as BuiltList<Object>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(
                    GFeedItemCategoryUpdateWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(
                    GFeedItemCategoryUpsertWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryUpdateManyInputSerializer
    implements StructuredSerializer<GFeedItemCategoryUpdateManyInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryUpdateManyInput,
    _$GFeedItemCategoryUpdateManyInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryUpdateManyInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryUpdateManyInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.categoryTitle;
    if (value != null) {
      result
        ..add('categoryTitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    return result;
  }

  @override
  GFeedItemCategoryUpdateManyInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryUpdateManyInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'categoryTitle':
          result.categoryTitle = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryUpdateManyWithNestedWhereInputSerializer
    implements
        StructuredSerializer<GFeedItemCategoryUpdateManyWithNestedWhereInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryUpdateManyWithNestedWhereInput,
    _$GFeedItemCategoryUpdateManyWithNestedWhereInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryUpdateManyWithNestedWhereInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GFeedItemCategoryUpdateManyWithNestedWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GFeedItemCategoryWhereInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GFeedItemCategoryUpdateManyInput)),
    ];

    return result;
  }

  @override
  GFeedItemCategoryUpdateManyWithNestedWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryUpdateManyWithNestedWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemCategoryWhereInput))!
              as GFeedItemCategoryWhereInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GFeedItemCategoryUpdateManyInput))!
              as GFeedItemCategoryUpdateManyInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryUpdateOneInlineInputSerializer
    implements StructuredSerializer<GFeedItemCategoryUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryUpdateOneInlineInput,
    _$GFeedItemCategoryUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCategoryCreateInput)));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GFeedItemCategoryUpdateWithNestedWhereUniqueInput)));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GFeedItemCategoryUpsertWithNestedWhereUniqueInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCategoryWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GFeedItemCategoryUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemCategoryCreateInput))!
              as GFeedItemCategoryCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GFeedItemCategoryUpdateWithNestedWhereUniqueInput))!
              as GFeedItemCategoryUpdateWithNestedWhereUniqueInput);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GFeedItemCategoryUpsertWithNestedWhereUniqueInput))!
              as GFeedItemCategoryUpsertWithNestedWhereUniqueInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GFeedItemCategoryWhereUniqueInput))!
              as GFeedItemCategoryWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
        case 'delete':
          result.delete = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryUpdateWithNestedWhereUniqueInputSerializer
    implements
        StructuredSerializer<
            GFeedItemCategoryUpdateWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryUpdateWithNestedWhereUniqueInput,
    _$GFeedItemCategoryUpdateWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryUpdateWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GFeedItemCategoryUpdateWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GFeedItemCategoryWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GFeedItemCategoryUpdateInput)),
    ];

    return result;
  }

  @override
  GFeedItemCategoryUpdateWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GFeedItemCategoryWhereUniqueInput))!
              as GFeedItemCategoryWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemCategoryUpdateInput))!
              as GFeedItemCategoryUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryUpsertInputSerializer
    implements StructuredSerializer<GFeedItemCategoryUpsertInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryUpsertInput,
    _$GFeedItemCategoryUpsertInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryUpsertInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryUpsertInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'create',
      serializers.serialize(object.create,
          specifiedType: const FullType(GFeedItemCategoryCreateInput)),
      'updateIt',
      serializers.serialize(object.updateIt,
          specifiedType: const FullType(GFeedItemCategoryUpdateInput)),
    ];

    return result;
  }

  @override
  GFeedItemCategoryUpsertInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryUpsertInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemCategoryCreateInput))!
              as GFeedItemCategoryCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemCategoryUpdateInput))!
              as GFeedItemCategoryUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryUpsertWithNestedWhereUniqueInputSerializer
    implements
        StructuredSerializer<
            GFeedItemCategoryUpsertWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryUpsertWithNestedWhereUniqueInput,
    _$GFeedItemCategoryUpsertWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryUpsertWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GFeedItemCategoryUpsertWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GFeedItemCategoryWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GFeedItemCategoryUpsertInput)),
    ];

    return result;
  }

  @override
  GFeedItemCategoryUpsertWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GFeedItemCategoryWhereUniqueInput))!
              as GFeedItemCategoryWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemCategoryUpsertInput))!
              as GFeedItemCategoryUpsertInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryWhereInputSerializer
    implements StructuredSerializer<GFeedItemCategoryWhereInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryWhereInput,
    _$GFeedItemCategoryWhereInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GFeedItemCategoryWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.categoryTitle;
    if (value != null) {
      result
        ..add('categoryTitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    value = object.categoryTitle_not;
    if (value != null) {
      result
        ..add('categoryTitle_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryTitle)));
    }
    value = object.categoryTitle_in;
    if (value != null) {
      result
        ..add('categoryTitle_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryTitle)])));
    }
    value = object.categoryTitle_not_in;
    if (value != null) {
      result
        ..add('categoryTitle_not_in')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GCategoryTitle)])));
    }
    return result;
  }

  @override
  GFeedItemCategoryWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemCategoryWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'categoryTitle':
          result.categoryTitle = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
        case 'categoryTitle_not':
          result.categoryTitle_not = serializers.deserialize(value,
              specifiedType: const FullType(GCategoryTitle)) as GCategoryTitle;
          break;
        case 'categoryTitle_in':
          result.categoryTitle_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryTitle)]))!
              as BuiltList<Object>);
          break;
        case 'categoryTitle_not_in':
          result.categoryTitle_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GCategoryTitle)]))!
              as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCategoryWhereUniqueInputSerializer
    implements StructuredSerializer<GFeedItemCategoryWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCategoryWhereUniqueInput,
    _$GFeedItemCategoryWhereUniqueInput
  ];
  @override
  final String wireName = 'GFeedItemCategoryWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCategoryWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GFeedItemCategoryWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCategoryWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemConnectInputSerializer
    implements StructuredSerializer<GFeedItemConnectInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemConnectInput,
    _$GFeedItemConnectInput
  ];
  @override
  final String wireName = 'GFeedItemConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GFeedItemWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GFeedItemConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereUniqueInput))!
              as GFeedItemWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCreateInputSerializer
    implements StructuredSerializer<GFeedItemCreateInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCreateInput,
    _$GFeedItemCreateInput
  ];
  @override
  final String wireName = 'GFeedItemCreateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCreateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle;
    if (value != null) {
      result
        ..add('subtitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent;
    if (value != null) {
      result
        ..add('mainContent')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateOneInlineInput)));
    }
    value = object.video;
    if (value != null) {
      result
        ..add('video')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateOneInlineInput)));
    }
    value = object.categories;
    if (value != null) {
      result
        ..add('categories')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryCreateManyInlineInput)));
    }
    return result;
  }

  @override
  GFeedItemCreateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCreateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle':
          result.subtitle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent':
          result.mainContent = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateOneInlineInput))!
              as GAssetCreateOneInlineInput);
          break;
        case 'video':
          result.video.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateOneInlineInput))!
              as GAssetCreateOneInlineInput);
          break;
        case 'categories':
          result.categories.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryCreateManyInlineInput))!
              as GCategoryCreateManyInlineInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCreateManyInlineInputSerializer
    implements StructuredSerializer<GFeedItemCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCreateManyInlineInput,
    _$GFeedItemCreateManyInlineInput
  ];
  @override
  final String wireName = 'GFeedItemCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GFeedItemCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GFeedItemCreateInput)]))!
              as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemCreateOneInlineInputSerializer
    implements StructuredSerializer<GFeedItemCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemCreateOneInlineInput,
    _$GFeedItemCreateOneInlineInput
  ];
  @override
  final String wireName = 'GFeedItemCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCreateInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereUniqueInput)));
    }
    return result;
  }

  @override
  GFeedItemCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemCreateInput))!
              as GFeedItemCreateInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereUniqueInput))!
              as GFeedItemWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemManyWhereInputSerializer
    implements StructuredSerializer<GFeedItemManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemManyWhereInput,
    _$GFeedItemManyWhereInput
  ];
  @override
  final String wireName = 'GFeedItemManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle;
    if (value != null) {
      result
        ..add('subtitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not;
    if (value != null) {
      result
        ..add('subtitle_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_in;
    if (value != null) {
      result
        ..add('subtitle_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.subtitle_not_in;
    if (value != null) {
      result
        ..add('subtitle_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.subtitle_contains;
    if (value != null) {
      result
        ..add('subtitle_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_contains;
    if (value != null) {
      result
        ..add('subtitle_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_starts_with;
    if (value != null) {
      result
        ..add('subtitle_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_starts_with;
    if (value != null) {
      result
        ..add('subtitle_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_ends_with;
    if (value != null) {
      result
        ..add('subtitle_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_ends_with;
    if (value != null) {
      result
        ..add('subtitle_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not;
    if (value != null) {
      result
        ..add('description_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_in;
    if (value != null) {
      result
        ..add('description_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.description_not_in;
    if (value != null) {
      result
        ..add('description_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.description_contains;
    if (value != null) {
      result
        ..add('description_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_contains;
    if (value != null) {
      result
        ..add('description_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_starts_with;
    if (value != null) {
      result
        ..add('description_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_starts_with;
    if (value != null) {
      result
        ..add('description_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_ends_with;
    if (value != null) {
      result
        ..add('description_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_ends_with;
    if (value != null) {
      result
        ..add('description_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent;
    if (value != null) {
      result
        ..add('mainContent')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_not;
    if (value != null) {
      result
        ..add('mainContent_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_in;
    if (value != null) {
      result
        ..add('mainContent_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.mainContent_not_in;
    if (value != null) {
      result
        ..add('mainContent_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.mainContent_contains;
    if (value != null) {
      result
        ..add('mainContent_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_not_contains;
    if (value != null) {
      result
        ..add('mainContent_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_starts_with;
    if (value != null) {
      result
        ..add('mainContent_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_not_starts_with;
    if (value != null) {
      result
        ..add('mainContent_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_ends_with;
    if (value != null) {
      result
        ..add('mainContent_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_not_ends_with;
    if (value != null) {
      result
        ..add('mainContent_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.video;
    if (value != null) {
      result
        ..add('video')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.categories_every;
    if (value != null) {
      result
        ..add('categories_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.categories_some;
    if (value != null) {
      result
        ..add('categories_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.categories_none;
    if (value != null) {
      result
        ..add('categories_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    return result;
  }

  @override
  GFeedItemManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GFeedItemWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GFeedItemWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GFeedItemWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle':
          result.subtitle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_not':
          result.subtitle_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_in':
          result.subtitle_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'subtitle_not_in':
          result.subtitle_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'subtitle_contains':
          result.subtitle_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_not_contains':
          result.subtitle_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_starts_with':
          result.subtitle_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_not_starts_with':
          result.subtitle_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_ends_with':
          result.subtitle_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_not_ends_with':
          result.subtitle_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_not':
          result.description_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_in':
          result.description_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'description_not_in':
          result.description_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'description_contains':
          result.description_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_not_contains':
          result.description_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_starts_with':
          result.description_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_not_starts_with':
          result.description_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_ends_with':
          result.description_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_not_ends_with':
          result.description_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent':
          result.mainContent = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_not':
          result.mainContent_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_in':
          result.mainContent_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'mainContent_not_in':
          result.mainContent_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'mainContent_contains':
          result.mainContent_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_not_contains':
          result.mainContent_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_starts_with':
          result.mainContent_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_not_starts_with':
          result.mainContent_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_ends_with':
          result.mainContent_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_not_ends_with':
          result.mainContent_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'video':
          result.video.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'categories_every':
          result.categories_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'categories_some':
          result.categories_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'categories_none':
          result.categories_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemOrderByInputSerializer
    implements PrimitiveSerializer<GFeedItemOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GFeedItemOrderByInput];
  @override
  final String wireName = 'GFeedItemOrderByInput';

  @override
  Object serialize(Serializers serializers, GFeedItemOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GFeedItemOrderByInput deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GFeedItemOrderByInput.valueOf(serialized as String);
}

class _$GFeedItemUpdateInputSerializer
    implements StructuredSerializer<GFeedItemUpdateInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemUpdateInput,
    _$GFeedItemUpdateInput
  ];
  @override
  final String wireName = 'GFeedItemUpdateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemUpdateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle;
    if (value != null) {
      result
        ..add('subtitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent;
    if (value != null) {
      result
        ..add('mainContent')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUpdateOneInlineInput)));
    }
    value = object.video;
    if (value != null) {
      result
        ..add('video')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUpdateOneInlineInput)));
    }
    value = object.categories;
    if (value != null) {
      result
        ..add('categories')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryUpdateManyInlineInput)));
    }
    return result;
  }

  @override
  GFeedItemUpdateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemUpdateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle':
          result.subtitle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent':
          result.mainContent = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateOneInlineInput))!
              as GAssetUpdateOneInlineInput);
          break;
        case 'video':
          result.video.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateOneInlineInput))!
              as GAssetUpdateOneInlineInput);
          break;
        case 'categories':
          result.categories.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GCategoryUpdateManyInlineInput))!
              as GCategoryUpdateManyInlineInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemUpdateManyInlineInputSerializer
    implements StructuredSerializer<GFeedItemUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemUpdateManyInlineInput,
    _$GFeedItemUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GFeedItemUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemWhereUniqueInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GFeedItemUpdateWithNestedWhereUniqueInput)
            ])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GFeedItemUpsertWithNestedWhereUniqueInput)
            ])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemWhereUniqueInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GFeedItemUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GFeedItemCreateInput)]))!
              as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemConnectInput)
              ]))! as BuiltList<Object>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemUpdateWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemUpsertWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GFeedItemWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemUpdateManyInputSerializer
    implements StructuredSerializer<GFeedItemUpdateManyInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemUpdateManyInput,
    _$GFeedItemUpdateManyInput
  ];
  @override
  final String wireName = 'GFeedItemUpdateManyInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemUpdateManyInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle;
    if (value != null) {
      result
        ..add('subtitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent;
    if (value != null) {
      result
        ..add('mainContent')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GFeedItemUpdateManyInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemUpdateManyInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle':
          result.subtitle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent':
          result.mainContent = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemUpdateManyWithNestedWhereInputSerializer
    implements StructuredSerializer<GFeedItemUpdateManyWithNestedWhereInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemUpdateManyWithNestedWhereInput,
    _$GFeedItemUpdateManyWithNestedWhereInput
  ];
  @override
  final String wireName = 'GFeedItemUpdateManyWithNestedWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemUpdateManyWithNestedWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GFeedItemWhereInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GFeedItemUpdateManyInput)),
    ];

    return result;
  }

  @override
  GFeedItemUpdateManyWithNestedWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemUpdateManyWithNestedWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereInput))!
              as GFeedItemWhereInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemUpdateManyInput))!
              as GFeedItemUpdateManyInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemUpdateOneInlineInputSerializer
    implements StructuredSerializer<GFeedItemUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemUpdateOneInlineInput,
    _$GFeedItemUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GFeedItemUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemCreateInput)));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GFeedItemUpdateWithNestedWhereUniqueInput)));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(GFeedItemUpsertWithNestedWhereUniqueInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GFeedItemWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GFeedItemUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemCreateInput))!
              as GFeedItemCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GFeedItemUpdateWithNestedWhereUniqueInput))!
              as GFeedItemUpdateWithNestedWhereUniqueInput);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GFeedItemUpsertWithNestedWhereUniqueInput))!
              as GFeedItemUpsertWithNestedWhereUniqueInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereUniqueInput))!
              as GFeedItemWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
        case 'delete':
          result.delete = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemUpdateWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GFeedItemUpdateWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemUpdateWithNestedWhereUniqueInput,
    _$GFeedItemUpdateWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GFeedItemUpdateWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemUpdateWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GFeedItemWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GFeedItemUpdateInput)),
    ];

    return result;
  }

  @override
  GFeedItemUpdateWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemUpdateWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereUniqueInput))!
              as GFeedItemWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemUpdateInput))!
              as GFeedItemUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemUpsertInputSerializer
    implements StructuredSerializer<GFeedItemUpsertInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemUpsertInput,
    _$GFeedItemUpsertInput
  ];
  @override
  final String wireName = 'GFeedItemUpsertInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemUpsertInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'create',
      serializers.serialize(object.create,
          specifiedType: const FullType(GFeedItemCreateInput)),
      'updateIt',
      serializers.serialize(object.updateIt,
          specifiedType: const FullType(GFeedItemUpdateInput)),
    ];

    return result;
  }

  @override
  GFeedItemUpsertInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemUpsertInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemCreateInput))!
              as GFeedItemCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemUpdateInput))!
              as GFeedItemUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemUpsertWithNestedWhereUniqueInputSerializer
    implements StructuredSerializer<GFeedItemUpsertWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemUpsertWithNestedWhereUniqueInput,
    _$GFeedItemUpsertWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GFeedItemUpsertWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemUpsertWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GFeedItemWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GFeedItemUpsertInput)),
    ];

    return result;
  }

  @override
  GFeedItemUpsertWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemUpsertWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemWhereUniqueInput))!
              as GFeedItemWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GFeedItemUpsertInput))!
              as GFeedItemUpsertInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemWhereInputSerializer
    implements StructuredSerializer<GFeedItemWhereInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemWhereInput,
    _$GFeedItemWhereInput
  ];
  @override
  final String wireName = 'GFeedItemWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GFeedItemWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle;
    if (value != null) {
      result
        ..add('subtitle')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not;
    if (value != null) {
      result
        ..add('subtitle_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_in;
    if (value != null) {
      result
        ..add('subtitle_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.subtitle_not_in;
    if (value != null) {
      result
        ..add('subtitle_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.subtitle_contains;
    if (value != null) {
      result
        ..add('subtitle_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_contains;
    if (value != null) {
      result
        ..add('subtitle_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_starts_with;
    if (value != null) {
      result
        ..add('subtitle_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_starts_with;
    if (value != null) {
      result
        ..add('subtitle_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_ends_with;
    if (value != null) {
      result
        ..add('subtitle_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.subtitle_not_ends_with;
    if (value != null) {
      result
        ..add('subtitle_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description;
    if (value != null) {
      result
        ..add('description')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not;
    if (value != null) {
      result
        ..add('description_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_in;
    if (value != null) {
      result
        ..add('description_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.description_not_in;
    if (value != null) {
      result
        ..add('description_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.description_contains;
    if (value != null) {
      result
        ..add('description_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_contains;
    if (value != null) {
      result
        ..add('description_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_starts_with;
    if (value != null) {
      result
        ..add('description_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_starts_with;
    if (value != null) {
      result
        ..add('description_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_ends_with;
    if (value != null) {
      result
        ..add('description_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.description_not_ends_with;
    if (value != null) {
      result
        ..add('description_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent;
    if (value != null) {
      result
        ..add('mainContent')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_not;
    if (value != null) {
      result
        ..add('mainContent_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_in;
    if (value != null) {
      result
        ..add('mainContent_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.mainContent_not_in;
    if (value != null) {
      result
        ..add('mainContent_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.mainContent_contains;
    if (value != null) {
      result
        ..add('mainContent_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_not_contains;
    if (value != null) {
      result
        ..add('mainContent_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_starts_with;
    if (value != null) {
      result
        ..add('mainContent_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_not_starts_with;
    if (value != null) {
      result
        ..add('mainContent_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_ends_with;
    if (value != null) {
      result
        ..add('mainContent_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.mainContent_not_ends_with;
    if (value != null) {
      result
        ..add('mainContent_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.video;
    if (value != null) {
      result
        ..add('video')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.categories_every;
    if (value != null) {
      result
        ..add('categories_every')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.categories_some;
    if (value != null) {
      result
        ..add('categories_some')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    value = object.categories_none;
    if (value != null) {
      result
        ..add('categories_none')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GCategoryWhereInput)));
    }
    return result;
  }

  @override
  GFeedItemWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GFeedItemWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GFeedItemWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GFeedItemWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle':
          result.subtitle = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_not':
          result.subtitle_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_in':
          result.subtitle_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'subtitle_not_in':
          result.subtitle_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'subtitle_contains':
          result.subtitle_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_not_contains':
          result.subtitle_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_starts_with':
          result.subtitle_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_not_starts_with':
          result.subtitle_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_ends_with':
          result.subtitle_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'subtitle_not_ends_with':
          result.subtitle_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description':
          result.description = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_not':
          result.description_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_in':
          result.description_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'description_not_in':
          result.description_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'description_contains':
          result.description_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_not_contains':
          result.description_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_starts_with':
          result.description_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_not_starts_with':
          result.description_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_ends_with':
          result.description_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'description_not_ends_with':
          result.description_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent':
          result.mainContent = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_not':
          result.mainContent_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_in':
          result.mainContent_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'mainContent_not_in':
          result.mainContent_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'mainContent_contains':
          result.mainContent_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_not_contains':
          result.mainContent_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_starts_with':
          result.mainContent_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_not_starts_with':
          result.mainContent_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_ends_with':
          result.mainContent_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'mainContent_not_ends_with':
          result.mainContent_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'video':
          result.video.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'categories_every':
          result.categories_every.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'categories_some':
          result.categories_some.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
        case 'categories_none':
          result.categories_none.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GCategoryWhereInput))!
              as GCategoryWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GFeedItemWhereUniqueInputSerializer
    implements StructuredSerializer<GFeedItemWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GFeedItemWhereUniqueInput,
    _$GFeedItemWhereUniqueInput
  ];
  @override
  final String wireName = 'GFeedItemWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GFeedItemWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GFeedItemWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GFeedItemWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GImageFitSerializer implements PrimitiveSerializer<GImageFit> {
  @override
  final Iterable<Type> types = const <Type>[GImageFit];
  @override
  final String wireName = 'GImageFit';

  @override
  Object serialize(Serializers serializers, GImageFit object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GImageFit deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GImageFit.valueOf(serialized as String);
}

class _$GImageResizeInputSerializer
    implements StructuredSerializer<GImageResizeInput> {
  @override
  final Iterable<Type> types = const [GImageResizeInput, _$GImageResizeInput];
  @override
  final String wireName = 'GImageResizeInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GImageResizeInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.width;
    if (value != null) {
      result
        ..add('width')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.height;
    if (value != null) {
      result
        ..add('height')
        ..add(serializers.serialize(value, specifiedType: const FullType(int)));
    }
    value = object.fit;
    if (value != null) {
      result
        ..add('fit')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageFit)));
    }
    return result;
  }

  @override
  GImageResizeInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GImageResizeInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'width':
          result.width = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int;
          break;
        case 'height':
          result.height = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int;
          break;
        case 'fit':
          result.fit = serializers.deserialize(value,
              specifiedType: const FullType(GImageFit)) as GImageFit;
          break;
      }
    }

    return result.build();
  }
}

class _$GImageTransformationInputSerializer
    implements StructuredSerializer<GImageTransformationInput> {
  @override
  final Iterable<Type> types = const [
    GImageTransformationInput,
    _$GImageTransformationInput
  ];
  @override
  final String wireName = 'GImageTransformationInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GImageTransformationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.resize;
    if (value != null) {
      result
        ..add('resize')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GImageResizeInput)));
    }
    return result;
  }

  @override
  GImageTransformationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GImageTransformationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'resize':
          result.resize.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GImageResizeInput))!
              as GImageResizeInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemConnectInputSerializer
    implements StructuredSerializer<GInspirationItemConnectInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemConnectInput,
    _$GInspirationItemConnectInput
  ];
  @override
  final String wireName = 'GInspirationItemConnectInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GInspirationItemWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GInspirationItemConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GInspirationItemWhereUniqueInput))!
              as GInspirationItemWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemCreateInputSerializer
    implements StructuredSerializer<GInspirationItemCreateInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemCreateInput,
    _$GInspirationItemCreateInput
  ];
  @override
  final String wireName = 'GInspirationItemCreateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemCreateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.video;
    if (value != null) {
      result
        ..add('video')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateOneInlineInput)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetCreateOneInlineInput)));
    }
    return result;
  }

  @override
  GInspirationItemCreateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemCreateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'video':
          result.video.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateOneInlineInput))!
              as GAssetCreateOneInlineInput);
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetCreateOneInlineInput))!
              as GAssetCreateOneInlineInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemCreateManyInlineInputSerializer
    implements StructuredSerializer<GInspirationItemCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemCreateManyInlineInput,
    _$GInspirationItemCreateManyInlineInput
  ];
  @override
  final String wireName = 'GInspirationItemCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GInspirationItemCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemCreateInput)
              ]))! as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemCreateOneInlineInputSerializer
    implements StructuredSerializer<GInspirationItemCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemCreateOneInlineInput,
    _$GInspirationItemCreateOneInlineInput
  ];
  @override
  final String wireName = 'GInspirationItemCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemCreateInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereUniqueInput)));
    }
    return result;
  }

  @override
  GInspirationItemCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInspirationItemCreateInput))!
              as GInspirationItemCreateInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GInspirationItemWhereUniqueInput))!
              as GInspirationItemWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemManyWhereInputSerializer
    implements StructuredSerializer<GInspirationItemManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemManyWhereInput,
    _$GInspirationItemManyWhereInput
  ];
  @override
  final String wireName = 'GInspirationItemManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.video;
    if (value != null) {
      result
        ..add('video')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    return result;
  }

  @override
  GInspirationItemManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'video':
          result.video.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemOrderByInputSerializer
    implements PrimitiveSerializer<GInspirationItemOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GInspirationItemOrderByInput];
  @override
  final String wireName = 'GInspirationItemOrderByInput';

  @override
  Object serialize(Serializers serializers, GInspirationItemOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GInspirationItemOrderByInput deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GInspirationItemOrderByInput.valueOf(serialized as String);
}

class _$GInspirationItemUpdateInputSerializer
    implements StructuredSerializer<GInspirationItemUpdateInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemUpdateInput,
    _$GInspirationItemUpdateInput
  ];
  @override
  final String wireName = 'GInspirationItemUpdateInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemUpdateInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.video;
    if (value != null) {
      result
        ..add('video')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUpdateOneInlineInput)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetUpdateOneInlineInput)));
    }
    return result;
  }

  @override
  GInspirationItemUpdateInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemUpdateInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'video':
          result.video.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateOneInlineInput))!
              as GAssetUpdateOneInlineInput);
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetUpdateOneInlineInput))!
              as GAssetUpdateOneInlineInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemUpdateManyInlineInputSerializer
    implements StructuredSerializer<GInspirationItemUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemUpdateManyInlineInput,
    _$GInspirationItemUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GInspirationItemUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemCreateInput)])));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemWhereUniqueInput)])));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GInspirationItemUpdateWithNestedWhereUniqueInput)
            ])));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList, const [
              const FullType(GInspirationItemUpsertWithNestedWhereUniqueInput)
            ])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemWhereUniqueInput)])));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GInspirationItemUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemCreateInput)
              ]))! as BuiltList<Object>);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemConnectInput)
              ]))! as BuiltList<Object>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemUpdateWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemUpsertWithNestedWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'delete':
          result.delete.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemUpdateManyInputSerializer
    implements StructuredSerializer<GInspirationItemUpdateManyInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemUpdateManyInput,
    _$GInspirationItemUpdateManyInput
  ];
  @override
  final String wireName = 'GInspirationItemUpdateManyInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemUpdateManyInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GInspirationItemUpdateManyInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemUpdateManyInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemUpdateManyWithNestedWhereInputSerializer
    implements
        StructuredSerializer<GInspirationItemUpdateManyWithNestedWhereInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemUpdateManyWithNestedWhereInput,
    _$GInspirationItemUpdateManyWithNestedWhereInput
  ];
  @override
  final String wireName = 'GInspirationItemUpdateManyWithNestedWhereInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GInspirationItemUpdateManyWithNestedWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GInspirationItemWhereInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GInspirationItemUpdateManyInput)),
    ];

    return result;
  }

  @override
  GInspirationItemUpdateManyWithNestedWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemUpdateManyWithNestedWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInspirationItemWhereInput))!
              as GInspirationItemWhereInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GInspirationItemUpdateManyInput))!
              as GInspirationItemUpdateManyInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemUpdateOneInlineInputSerializer
    implements StructuredSerializer<GInspirationItemUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemUpdateOneInlineInput,
    _$GInspirationItemUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GInspirationItemUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.create;
    if (value != null) {
      result
        ..add('create')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemCreateInput)));
    }
    value = object.updateIt;
    if (value != null) {
      result
        ..add('updateIt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GInspirationItemUpdateWithNestedWhereUniqueInput)));
    }
    value = object.upsert;
    if (value != null) {
      result
        ..add('upsert')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                GInspirationItemUpsertWithNestedWhereUniqueInput)));
    }
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GInspirationItemWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.delete;
    if (value != null) {
      result
        ..add('delete')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GInspirationItemUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInspirationItemCreateInput))!
              as GInspirationItemCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GInspirationItemUpdateWithNestedWhereUniqueInput))!
              as GInspirationItemUpdateWithNestedWhereUniqueInput);
          break;
        case 'upsert':
          result.upsert.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      GInspirationItemUpsertWithNestedWhereUniqueInput))!
              as GInspirationItemUpsertWithNestedWhereUniqueInput);
          break;
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GInspirationItemWhereUniqueInput))!
              as GInspirationItemWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
        case 'delete':
          result.delete = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemUpdateWithNestedWhereUniqueInputSerializer
    implements
        StructuredSerializer<GInspirationItemUpdateWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemUpdateWithNestedWhereUniqueInput,
    _$GInspirationItemUpdateWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GInspirationItemUpdateWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GInspirationItemUpdateWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GInspirationItemWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GInspirationItemUpdateInput)),
    ];

    return result;
  }

  @override
  GInspirationItemUpdateWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GInspirationItemUpdateWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GInspirationItemWhereUniqueInput))!
              as GInspirationItemWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInspirationItemUpdateInput))!
              as GInspirationItemUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemUpsertInputSerializer
    implements StructuredSerializer<GInspirationItemUpsertInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemUpsertInput,
    _$GInspirationItemUpsertInput
  ];
  @override
  final String wireName = 'GInspirationItemUpsertInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemUpsertInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'create',
      serializers.serialize(object.create,
          specifiedType: const FullType(GInspirationItemCreateInput)),
      'updateIt',
      serializers.serialize(object.updateIt,
          specifiedType: const FullType(GInspirationItemUpdateInput)),
    ];

    return result;
  }

  @override
  GInspirationItemUpsertInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemUpsertInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'create':
          result.create.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInspirationItemCreateInput))!
              as GInspirationItemCreateInput);
          break;
        case 'updateIt':
          result.updateIt.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInspirationItemUpdateInput))!
              as GInspirationItemUpdateInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemUpsertWithNestedWhereUniqueInputSerializer
    implements
        StructuredSerializer<GInspirationItemUpsertWithNestedWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemUpsertWithNestedWhereUniqueInput,
    _$GInspirationItemUpsertWithNestedWhereUniqueInput
  ];
  @override
  final String wireName = 'GInspirationItemUpsertWithNestedWhereUniqueInput';

  @override
  Iterable<Object?> serialize(Serializers serializers,
      GInspirationItemUpsertWithNestedWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GInspirationItemWhereUniqueInput)),
      'data',
      serializers.serialize(object.data,
          specifiedType: const FullType(GInspirationItemUpsertInput)),
    ];

    return result;
  }

  @override
  GInspirationItemUpsertWithNestedWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result =
        new GInspirationItemUpsertWithNestedWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType:
                      const FullType(GInspirationItemWhereUniqueInput))!
              as GInspirationItemWhereUniqueInput);
          break;
        case 'data':
          result.data.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GInspirationItemUpsertInput))!
              as GInspirationItemUpsertInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemWhereInputSerializer
    implements StructuredSerializer<GInspirationItemWhereInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemWhereInput,
    _$GInspirationItemWhereInput
  ];
  @override
  final String wireName = 'GInspirationItemWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(BuiltList,
                const [const FullType(GInspirationItemWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.title;
    if (value != null) {
      result
        ..add('title')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not;
    if (value != null) {
      result
        ..add('title_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_in;
    if (value != null) {
      result
        ..add('title_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_not_in;
    if (value != null) {
      result
        ..add('title_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.title_contains;
    if (value != null) {
      result
        ..add('title_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_contains;
    if (value != null) {
      result
        ..add('title_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_starts_with;
    if (value != null) {
      result
        ..add('title_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_starts_with;
    if (value != null) {
      result
        ..add('title_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_ends_with;
    if (value != null) {
      result
        ..add('title_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.title_not_ends_with;
    if (value != null) {
      result
        ..add('title_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdBy;
    if (value != null) {
      result
        ..add('createdBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.updatedBy;
    if (value != null) {
      result
        ..add('updatedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.publishedBy;
    if (value != null) {
      result
        ..add('publishedBy')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereInput)));
    }
    value = object.video;
    if (value != null) {
      result
        ..add('video')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    value = object.mainImage;
    if (value != null) {
      result
        ..add('mainImage')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GAssetWhereInput)));
    }
    return result;
  }

  @override
  GInspirationItemWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GInspirationItemWhereInput)
              ]))! as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'title':
          result.title = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not':
          result.title_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_in':
          result.title_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_not_in':
          result.title_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'title_contains':
          result.title_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_contains':
          result.title_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_starts_with':
          result.title_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_starts_with':
          result.title_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_ends_with':
          result.title_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'title_not_ends_with':
          result.title_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdBy':
          result.createdBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'updatedBy':
          result.updatedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'publishedBy':
          result.publishedBy.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereInput))!
              as GUserWhereInput);
          break;
        case 'video':
          result.video.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
        case 'mainImage':
          result.mainImage.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GAssetWhereInput))!
              as GAssetWhereInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GInspirationItemWhereUniqueInputSerializer
    implements StructuredSerializer<GInspirationItemWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GInspirationItemWhereUniqueInput,
    _$GInspirationItemWhereUniqueInput
  ];
  @override
  final String wireName = 'GInspirationItemWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GInspirationItemWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GInspirationItemWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GInspirationItemWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GLevelSerializer implements PrimitiveSerializer<GLevel> {
  @override
  final Iterable<Type> types = const <Type>[GLevel];
  @override
  final String wireName = 'GLevel';

  @override
  Object serialize(Serializers serializers, GLevel object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GLevel deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GLevel.valueOf(serialized as String);
}

class _$GLocaleSerializer implements PrimitiveSerializer<GLocale> {
  @override
  final Iterable<Type> types = const <Type>[GLocale];
  @override
  final String wireName = 'GLocale';

  @override
  Object serialize(Serializers serializers, GLocale object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GLocale deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GLocale.valueOf(serialized as String);
}

class _$GLocationInputSerializer
    implements StructuredSerializer<GLocationInput> {
  @override
  final Iterable<Type> types = const [GLocationInput, _$GLocationInput];
  @override
  final String wireName = 'GLocationInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GLocationInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'latitude',
      serializers.serialize(object.latitude,
          specifiedType: const FullType(double)),
      'longitude',
      serializers.serialize(object.longitude,
          specifiedType: const FullType(double)),
    ];

    return result;
  }

  @override
  GLocationInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GLocationInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'latitude':
          result.latitude = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
        case 'longitude':
          result.longitude = serializers.deserialize(value,
              specifiedType: const FullType(double)) as double;
          break;
      }
    }

    return result.build();
  }
}

class _$GMealSizeSerializer implements PrimitiveSerializer<GMealSize> {
  @override
  final Iterable<Type> types = const <Type>[GMealSize];
  @override
  final String wireName = 'GMealSize';

  @override
  Object serialize(Serializers serializers, GMealSize object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GMealSize deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GMealSize.valueOf(serialized as String);
}

class _$GMealTypeSerializer implements PrimitiveSerializer<GMealType> {
  @override
  final Iterable<Type> types = const <Type>[GMealType];
  @override
  final String wireName = 'GMealType';

  @override
  Object serialize(Serializers serializers, GMealType object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GMealType deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GMealType.valueOf(serialized as String);
}

class _$GPlanSerializer implements PrimitiveSerializer<GPlan> {
  @override
  final Iterable<Type> types = const <Type>[GPlan];
  @override
  final String wireName = 'GPlan';

  @override
  Object serialize(Serializers serializers, GPlan object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GPlan deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GPlan.valueOf(serialized as String);
}

class _$GPreExistingConditionSerializer
    implements PrimitiveSerializer<GPreExistingCondition> {
  @override
  final Iterable<Type> types = const <Type>[GPreExistingCondition];
  @override
  final String wireName = 'GPreExistingCondition';

  @override
  Object serialize(Serializers serializers, GPreExistingCondition object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GPreExistingCondition deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GPreExistingCondition.valueOf(serialized as String);
}

class _$GPublishLocaleInputSerializer
    implements StructuredSerializer<GPublishLocaleInput> {
  @override
  final Iterable<Type> types = const [
    GPublishLocaleInput,
    _$GPublishLocaleInput
  ];
  @override
  final String wireName = 'GPublishLocaleInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GPublishLocaleInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
      'stages',
      serializers.serialize(object.stages,
          specifiedType:
              const FullType(BuiltList, const [const FullType(GStage)])),
    ];

    return result;
  }

  @override
  GPublishLocaleInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GPublishLocaleInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale)) as GLocale;
          break;
        case 'stages':
          result.stages.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GStage)]))!
              as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GRGBAInputSerializer implements StructuredSerializer<GRGBAInput> {
  @override
  final Iterable<Type> types = const [GRGBAInput, _$GRGBAInput];
  @override
  final String wireName = 'GRGBAInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GRGBAInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'r',
      serializers.serialize(object.r, specifiedType: const FullType(String)),
      'g',
      serializers.serialize(object.g, specifiedType: const FullType(String)),
      'b',
      serializers.serialize(object.b, specifiedType: const FullType(String)),
      'a',
      serializers.serialize(object.a, specifiedType: const FullType(String)),
    ];

    return result;
  }

  @override
  GRGBAInput deserialize(Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GRGBAInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'r':
          result.r = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'g':
          result.g = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'b':
          result.b = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'a':
          result.a = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GSexSerializer implements PrimitiveSerializer<GSex> {
  @override
  final Iterable<Type> types = const <Type>[GSex];
  @override
  final String wireName = 'GSex';

  @override
  Object serialize(Serializers serializers, GSex object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GSex deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GSex.valueOf(serialized as String);
}

class _$GStageSerializer implements PrimitiveSerializer<GStage> {
  @override
  final Iterable<Type> types = const <Type>[GStage];
  @override
  final String wireName = 'GStage';

  @override
  Object serialize(Serializers serializers, GStage object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GStage deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GStage.valueOf(serialized as String);
}

class _$GSystemDateTimeFieldVariationSerializer
    implements PrimitiveSerializer<GSystemDateTimeFieldVariation> {
  @override
  final Iterable<Type> types = const <Type>[GSystemDateTimeFieldVariation];
  @override
  final String wireName = 'GSystemDateTimeFieldVariation';

  @override
  Object serialize(
          Serializers serializers, GSystemDateTimeFieldVariation object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GSystemDateTimeFieldVariation deserialize(
          Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GSystemDateTimeFieldVariation.valueOf(serialized as String);
}

class _$GUnpublishLocaleInputSerializer
    implements StructuredSerializer<GUnpublishLocaleInput> {
  @override
  final Iterable<Type> types = const [
    GUnpublishLocaleInput,
    _$GUnpublishLocaleInput
  ];
  @override
  final String wireName = 'GUnpublishLocaleInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUnpublishLocaleInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'locale',
      serializers.serialize(object.locale,
          specifiedType: const FullType(GLocale)),
      'stages',
      serializers.serialize(object.stages,
          specifiedType:
              const FullType(BuiltList, const [const FullType(GStage)])),
    ];

    return result;
  }

  @override
  GUnpublishLocaleInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUnpublishLocaleInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'locale':
          result.locale = serializers.deserialize(value,
              specifiedType: const FullType(GLocale)) as GLocale;
          break;
        case 'stages':
          result.stages.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GStage)]))!
              as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserConnectInputSerializer
    implements StructuredSerializer<GUserConnectInput> {
  @override
  final Iterable<Type> types = const [GUserConnectInput, _$GUserConnectInput];
  @override
  final String wireName = 'GUserConnectInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GUserConnectInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'where',
      serializers.serialize(object.where,
          specifiedType: const FullType(GUserWhereUniqueInput)),
    ];
    Object? value;
    value = object.position;
    if (value != null) {
      result
        ..add('position')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GConnectPositionInput)));
    }
    return result;
  }

  @override
  GUserConnectInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserConnectInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'where':
          result.where.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereUniqueInput))!
              as GUserWhereUniqueInput);
          break;
        case 'position':
          result.position.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GConnectPositionInput))!
              as GConnectPositionInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserCreateManyInlineInputSerializer
    implements StructuredSerializer<GUserCreateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GUserCreateManyInlineInput,
    _$GUserCreateManyInlineInput
  ];
  @override
  final String wireName = 'GUserCreateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserCreateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GUserCreateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserCreateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GUserWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserCreateOneInlineInputSerializer
    implements StructuredSerializer<GUserCreateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GUserCreateOneInlineInput,
    _$GUserCreateOneInlineInput
  ];
  @override
  final String wireName = 'GUserCreateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserCreateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereUniqueInput)));
    }
    return result;
  }

  @override
  GUserCreateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserCreateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereUniqueInput))!
              as GUserWhereUniqueInput);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserKindSerializer implements PrimitiveSerializer<GUserKind> {
  @override
  final Iterable<Type> types = const <Type>[GUserKind];
  @override
  final String wireName = 'GUserKind';

  @override
  Object serialize(Serializers serializers, GUserKind object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GUserKind deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GUserKind.valueOf(serialized as String);
}

class _$GUserManyWhereInputSerializer
    implements StructuredSerializer<GUserManyWhereInput> {
  @override
  final Iterable<Type> types = const [
    GUserManyWhereInput,
    _$GUserManyWhereInput
  ];
  @override
  final String wireName = 'GUserManyWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserManyWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not;
    if (value != null) {
      result
        ..add('name_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_in;
    if (value != null) {
      result
        ..add('name_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.name_not_in;
    if (value != null) {
      result
        ..add('name_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.name_contains;
    if (value != null) {
      result
        ..add('name_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_contains;
    if (value != null) {
      result
        ..add('name_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_starts_with;
    if (value != null) {
      result
        ..add('name_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_starts_with;
    if (value != null) {
      result
        ..add('name_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_ends_with;
    if (value != null) {
      result
        ..add('name_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_ends_with;
    if (value != null) {
      result
        ..add('name_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture;
    if (value != null) {
      result
        ..add('picture')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not;
    if (value != null) {
      result
        ..add('picture_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_in;
    if (value != null) {
      result
        ..add('picture_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.picture_not_in;
    if (value != null) {
      result
        ..add('picture_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.picture_contains;
    if (value != null) {
      result
        ..add('picture_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_contains;
    if (value != null) {
      result
        ..add('picture_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_starts_with;
    if (value != null) {
      result
        ..add('picture_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_starts_with;
    if (value != null) {
      result
        ..add('picture_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_ends_with;
    if (value != null) {
      result
        ..add('picture_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_ends_with;
    if (value != null) {
      result
        ..add('picture_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.isActive_not;
    if (value != null) {
      result
        ..add('isActive_not')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.kind;
    if (value != null) {
      result
        ..add('kind')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserKind)));
    }
    value = object.kind_not;
    if (value != null) {
      result
        ..add('kind_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserKind)));
    }
    value = object.kind_in;
    if (value != null) {
      result
        ..add('kind_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GUserKind)])));
    }
    value = object.kind_not_in;
    if (value != null) {
      result
        ..add('kind_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GUserKind)])));
    }
    return result;
  }

  @override
  GUserManyWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserManyWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_not':
          result.name_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_in':
          result.name_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'name_not_in':
          result.name_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'name_contains':
          result.name_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_not_contains':
          result.name_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_starts_with':
          result.name_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_not_starts_with':
          result.name_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_ends_with':
          result.name_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_not_ends_with':
          result.name_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture':
          result.picture = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_not':
          result.picture_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_in':
          result.picture_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'picture_not_in':
          result.picture_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'picture_contains':
          result.picture_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_not_contains':
          result.picture_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_starts_with':
          result.picture_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_not_starts_with':
          result.picture_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_ends_with':
          result.picture_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_not_ends_with':
          result.picture_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
        case 'isActive_not':
          result.isActive_not = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
        case 'kind':
          result.kind = serializers.deserialize(value,
              specifiedType: const FullType(GUserKind)) as GUserKind;
          break;
        case 'kind_not':
          result.kind_not = serializers.deserialize(value,
              specifiedType: const FullType(GUserKind)) as GUserKind;
          break;
        case 'kind_in':
          result.kind_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserKind)]))!
              as BuiltList<Object>);
          break;
        case 'kind_not_in':
          result.kind_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserKind)]))!
              as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserOrderByInputSerializer
    implements PrimitiveSerializer<GUserOrderByInput> {
  @override
  final Iterable<Type> types = const <Type>[GUserOrderByInput];
  @override
  final String wireName = 'GUserOrderByInput';

  @override
  Object serialize(Serializers serializers, GUserOrderByInput object,
          {FullType specifiedType = FullType.unspecified}) =>
      object.name;

  @override
  GUserOrderByInput deserialize(Serializers serializers, Object serialized,
          {FullType specifiedType = FullType.unspecified}) =>
      GUserOrderByInput.valueOf(serialized as String);
}

class _$GUserUpdateManyInlineInputSerializer
    implements StructuredSerializer<GUserUpdateManyInlineInput> {
  @override
  final Iterable<Type> types = const [
    GUserUpdateManyInlineInput,
    _$GUserUpdateManyInlineInput
  ];
  @override
  final String wireName = 'GUserUpdateManyInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserUpdateManyInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserConnectInput)])));
    }
    value = object.set;
    if (value != null) {
      result
        ..add('set')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereUniqueInput)])));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereUniqueInput)])));
    }
    return result;
  }

  @override
  GUserUpdateManyInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserUpdateManyInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserConnectInput)]))!
              as BuiltList<Object>);
          break;
        case 'set':
          result.set.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GUserWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
        case 'disconnect':
          result.disconnect.replace(serializers.deserialize(value,
              specifiedType: const FullType(BuiltList, const [
                const FullType(GUserWhereUniqueInput)
              ]))! as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserUpdateOneInlineInputSerializer
    implements StructuredSerializer<GUserUpdateOneInlineInput> {
  @override
  final Iterable<Type> types = const [
    GUserUpdateOneInlineInput,
    _$GUserUpdateOneInlineInput
  ];
  @override
  final String wireName = 'GUserUpdateOneInlineInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserUpdateOneInlineInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.connect;
    if (value != null) {
      result
        ..add('connect')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserWhereUniqueInput)));
    }
    value = object.disconnect;
    if (value != null) {
      result
        ..add('disconnect')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    return result;
  }

  @override
  GUserUpdateOneInlineInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserUpdateOneInlineInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'connect':
          result.connect.replace(serializers.deserialize(value,
                  specifiedType: const FullType(GUserWhereUniqueInput))!
              as GUserWhereUniqueInput);
          break;
        case 'disconnect':
          result.disconnect = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
      }
    }

    return result.build();
  }
}

class _$GUserWhereInputSerializer
    implements StructuredSerializer<GUserWhereInput> {
  @override
  final Iterable<Type> types = const [GUserWhereInput, _$GUserWhereInput];
  @override
  final String wireName = 'GUserWhereInput';

  @override
  Iterable<Object?> serialize(Serializers serializers, GUserWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.G_search;
    if (value != null) {
      result
        ..add('_search')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.AND;
    if (value != null) {
      result
        ..add('AND')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.OR;
    if (value != null) {
      result
        ..add('OR')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.NOT;
    if (value != null) {
      result
        ..add('NOT')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(
                BuiltList, const [const FullType(GUserWhereInput)])));
    }
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not;
    if (value != null) {
      result
        ..add('id_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_in;
    if (value != null) {
      result
        ..add('id_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_not_in;
    if (value != null) {
      result
        ..add('id_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.id_contains;
    if (value != null) {
      result
        ..add('id_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_contains;
    if (value != null) {
      result
        ..add('id_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_starts_with;
    if (value != null) {
      result
        ..add('id_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_starts_with;
    if (value != null) {
      result
        ..add('id_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_ends_with;
    if (value != null) {
      result
        ..add('id_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.id_not_ends_with;
    if (value != null) {
      result
        ..add('id_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.createdAt;
    if (value != null) {
      result
        ..add('createdAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_not;
    if (value != null) {
      result
        ..add('createdAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_in;
    if (value != null) {
      result
        ..add('createdAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_not_in;
    if (value != null) {
      result
        ..add('createdAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.createdAt_lt;
    if (value != null) {
      result
        ..add('createdAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_lte;
    if (value != null) {
      result
        ..add('createdAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gt;
    if (value != null) {
      result
        ..add('createdAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.createdAt_gte;
    if (value != null) {
      result
        ..add('createdAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt;
    if (value != null) {
      result
        ..add('updatedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_not;
    if (value != null) {
      result
        ..add('updatedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_in;
    if (value != null) {
      result
        ..add('updatedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_not_in;
    if (value != null) {
      result
        ..add('updatedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.updatedAt_lt;
    if (value != null) {
      result
        ..add('updatedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_lte;
    if (value != null) {
      result
        ..add('updatedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gt;
    if (value != null) {
      result
        ..add('updatedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.updatedAt_gte;
    if (value != null) {
      result
        ..add('updatedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt;
    if (value != null) {
      result
        ..add('publishedAt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_not;
    if (value != null) {
      result
        ..add('publishedAt_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_in;
    if (value != null) {
      result
        ..add('publishedAt_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_not_in;
    if (value != null) {
      result
        ..add('publishedAt_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(DateTime)])));
    }
    value = object.publishedAt_lt;
    if (value != null) {
      result
        ..add('publishedAt_lt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_lte;
    if (value != null) {
      result
        ..add('publishedAt_lte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gt;
    if (value != null) {
      result
        ..add('publishedAt_gt')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.publishedAt_gte;
    if (value != null) {
      result
        ..add('publishedAt_gte')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(DateTime)));
    }
    value = object.name;
    if (value != null) {
      result
        ..add('name')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not;
    if (value != null) {
      result
        ..add('name_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_in;
    if (value != null) {
      result
        ..add('name_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.name_not_in;
    if (value != null) {
      result
        ..add('name_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.name_contains;
    if (value != null) {
      result
        ..add('name_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_contains;
    if (value != null) {
      result
        ..add('name_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_starts_with;
    if (value != null) {
      result
        ..add('name_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_starts_with;
    if (value != null) {
      result
        ..add('name_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_ends_with;
    if (value != null) {
      result
        ..add('name_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.name_not_ends_with;
    if (value != null) {
      result
        ..add('name_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture;
    if (value != null) {
      result
        ..add('picture')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not;
    if (value != null) {
      result
        ..add('picture_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_in;
    if (value != null) {
      result
        ..add('picture_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.picture_not_in;
    if (value != null) {
      result
        ..add('picture_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(String)])));
    }
    value = object.picture_contains;
    if (value != null) {
      result
        ..add('picture_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_contains;
    if (value != null) {
      result
        ..add('picture_not_contains')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_starts_with;
    if (value != null) {
      result
        ..add('picture_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_starts_with;
    if (value != null) {
      result
        ..add('picture_not_starts_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_ends_with;
    if (value != null) {
      result
        ..add('picture_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.picture_not_ends_with;
    if (value != null) {
      result
        ..add('picture_not_ends_with')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    value = object.isActive;
    if (value != null) {
      result
        ..add('isActive')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.isActive_not;
    if (value != null) {
      result
        ..add('isActive_not')
        ..add(
            serializers.serialize(value, specifiedType: const FullType(bool)));
    }
    value = object.kind;
    if (value != null) {
      result
        ..add('kind')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserKind)));
    }
    value = object.kind_not;
    if (value != null) {
      result
        ..add('kind_not')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(GUserKind)));
    }
    value = object.kind_in;
    if (value != null) {
      result
        ..add('kind_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GUserKind)])));
    }
    value = object.kind_not_in;
    if (value != null) {
      result
        ..add('kind_not_in')
        ..add(serializers.serialize(value,
            specifiedType:
                const FullType(BuiltList, const [const FullType(GUserKind)])));
    }
    return result;
  }

  @override
  GUserWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case '_search':
          result.G_search = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'AND':
          result.AND.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'OR':
          result.OR.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'NOT':
          result.NOT.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserWhereInput)]))!
              as BuiltList<Object>);
          break;
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not':
          result.id_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_in':
          result.id_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_not_in':
          result.id_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'id_contains':
          result.id_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_contains':
          result.id_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_starts_with':
          result.id_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_starts_with':
          result.id_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_ends_with':
          result.id_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'id_not_ends_with':
          result.id_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'createdAt':
          result.createdAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_not':
          result.createdAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_in':
          result.createdAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_not_in':
          result.createdAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'createdAt_lt':
          result.createdAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_lte':
          result.createdAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gt':
          result.createdAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'createdAt_gte':
          result.createdAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt':
          result.updatedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_not':
          result.updatedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_in':
          result.updatedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_not_in':
          result.updatedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'updatedAt_lt':
          result.updatedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_lte':
          result.updatedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gt':
          result.updatedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'updatedAt_gte':
          result.updatedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt':
          result.publishedAt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_not':
          result.publishedAt_not = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_in':
          result.publishedAt_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_not_in':
          result.publishedAt_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(DateTime)]))!
              as BuiltList<Object>);
          break;
        case 'publishedAt_lt':
          result.publishedAt_lt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_lte':
          result.publishedAt_lte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gt':
          result.publishedAt_gt = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'publishedAt_gte':
          result.publishedAt_gte = serializers.deserialize(value,
              specifiedType: const FullType(DateTime)) as DateTime;
          break;
        case 'name':
          result.name = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_not':
          result.name_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_in':
          result.name_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'name_not_in':
          result.name_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'name_contains':
          result.name_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_not_contains':
          result.name_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_starts_with':
          result.name_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_not_starts_with':
          result.name_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_ends_with':
          result.name_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'name_not_ends_with':
          result.name_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture':
          result.picture = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_not':
          result.picture_not = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_in':
          result.picture_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'picture_not_in':
          result.picture_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(String)]))!
              as BuiltList<Object>);
          break;
        case 'picture_contains':
          result.picture_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_not_contains':
          result.picture_not_contains = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_starts_with':
          result.picture_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_not_starts_with':
          result.picture_not_starts_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_ends_with':
          result.picture_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'picture_not_ends_with':
          result.picture_not_ends_with = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'isActive':
          result.isActive = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
        case 'isActive_not':
          result.isActive_not = serializers.deserialize(value,
              specifiedType: const FullType(bool)) as bool;
          break;
        case 'kind':
          result.kind = serializers.deserialize(value,
              specifiedType: const FullType(GUserKind)) as GUserKind;
          break;
        case 'kind_not':
          result.kind_not = serializers.deserialize(value,
              specifiedType: const FullType(GUserKind)) as GUserKind;
          break;
        case 'kind_in':
          result.kind_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserKind)]))!
              as BuiltList<Object>);
          break;
        case 'kind_not_in':
          result.kind_not_in.replace(serializers.deserialize(value,
                  specifiedType: const FullType(
                      BuiltList, const [const FullType(GUserKind)]))!
              as BuiltList<Object>);
          break;
      }
    }

    return result.build();
  }
}

class _$GUserWhereUniqueInputSerializer
    implements StructuredSerializer<GUserWhereUniqueInput> {
  @override
  final Iterable<Type> types = const [
    GUserWhereUniqueInput,
    _$GUserWhereUniqueInput
  ];
  @override
  final String wireName = 'GUserWhereUniqueInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GUserWhereUniqueInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[];
    Object? value;
    value = object.id;
    if (value != null) {
      result
        ..add('id')
        ..add(serializers.serialize(value,
            specifiedType: const FullType(String)));
    }
    return result;
  }

  @override
  GUserWhereUniqueInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GUserWhereUniqueInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
      }
    }

    return result.build();
  }
}

class _$GVersionWhereInputSerializer
    implements StructuredSerializer<GVersionWhereInput> {
  @override
  final Iterable<Type> types = const [GVersionWhereInput, _$GVersionWhereInput];
  @override
  final String wireName = 'GVersionWhereInput';

  @override
  Iterable<Object?> serialize(
      Serializers serializers, GVersionWhereInput object,
      {FullType specifiedType = FullType.unspecified}) {
    final result = <Object?>[
      'id',
      serializers.serialize(object.id, specifiedType: const FullType(String)),
      'stage',
      serializers.serialize(object.stage,
          specifiedType: const FullType(GStage)),
      'revision',
      serializers.serialize(object.revision,
          specifiedType: const FullType(int)),
    ];

    return result;
  }

  @override
  GVersionWhereInput deserialize(
      Serializers serializers, Iterable<Object?> serialized,
      {FullType specifiedType = FullType.unspecified}) {
    final result = new GVersionWhereInputBuilder();

    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final Object? value = iterator.current;
      switch (key) {
        case 'id':
          result.id = serializers.deserialize(value,
              specifiedType: const FullType(String)) as String;
          break;
        case 'stage':
          result.stage = serializers.deserialize(value,
              specifiedType: const FullType(GStage)) as GStage;
          break;
        case 'revision':
          result.revision = serializers.deserialize(value,
              specifiedType: const FullType(int)) as int;
          break;
      }
    }

    return result.build();
  }
}

class _$GAssetConnectInput extends GAssetConnectInput {
  @override
  final GAssetWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GAssetConnectInput(
          [void Function(GAssetConnectInputBuilder)? updates]) =>
      (new GAssetConnectInputBuilder()..update(updates)).build();

  _$GAssetConnectInput._({required this.where, this.position}) : super._() {
    BuiltValueNullFieldError.checkNotNull(where, 'GAssetConnectInput', 'where');
  }

  @override
  GAssetConnectInput rebuild(
          void Function(GAssetConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetConnectInputBuilder toBuilder() =>
      new GAssetConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), position.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GAssetConnectInputBuilder
    implements Builder<GAssetConnectInput, GAssetConnectInputBuilder> {
  _$GAssetConnectInput? _$v;

  GAssetWhereUniqueInputBuilder? _where;
  GAssetWhereUniqueInputBuilder get where =>
      _$this._where ??= new GAssetWhereUniqueInputBuilder();
  set where(GAssetWhereUniqueInputBuilder? where) => _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GAssetConnectInputBuilder();

  GAssetConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetConnectInput;
  }

  @override
  void update(void Function(GAssetConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetConnectInput build() {
    _$GAssetConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateInput extends GAssetCreateInput {
  @override
  final DateTime? createdAt;
  @override
  final DateTime? updatedAt;
  @override
  final String handle;
  @override
  final String fileName;
  @override
  final double? height;
  @override
  final double? width;
  @override
  final double? size;
  @override
  final String? mimeType;
  @override
  final GFeedItemCreateManyInlineInput? mainImageFeedItem;
  @override
  final GFeedItemCategoryCreateManyInlineInput? mainImageFeedItemCategory;
  @override
  final GFeedItemCreateManyInlineInput? videoFeedItem;
  @override
  final GInspirationItemCreateManyInlineInput? videoInspirationItem;
  @override
  final GInspirationItemCreateManyInlineInput? mainImageInspirationItem;
  @override
  final GCategoryCreateManyInlineInput? mainImageCategory;
  @override
  final GAssetCreateLocalizationsInput? localizations;

  factory _$GAssetCreateInput(
          [void Function(GAssetCreateInputBuilder)? updates]) =>
      (new GAssetCreateInputBuilder()..update(updates)).build();

  _$GAssetCreateInput._(
      {this.createdAt,
      this.updatedAt,
      required this.handle,
      required this.fileName,
      this.height,
      this.width,
      this.size,
      this.mimeType,
      this.mainImageFeedItem,
      this.mainImageFeedItemCategory,
      this.videoFeedItem,
      this.videoInspirationItem,
      this.mainImageInspirationItem,
      this.mainImageCategory,
      this.localizations})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        handle, 'GAssetCreateInput', 'handle');
    BuiltValueNullFieldError.checkNotNull(
        fileName, 'GAssetCreateInput', 'fileName');
  }

  @override
  GAssetCreateInput rebuild(void Function(GAssetCreateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateInputBuilder toBuilder() =>
      new GAssetCreateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateInput &&
        createdAt == other.createdAt &&
        updatedAt == other.updatedAt &&
        handle == other.handle &&
        fileName == other.fileName &&
        height == other.height &&
        width == other.width &&
        size == other.size &&
        mimeType == other.mimeType &&
        mainImageFeedItem == other.mainImageFeedItem &&
        mainImageFeedItemCategory == other.mainImageFeedItemCategory &&
        videoFeedItem == other.videoFeedItem &&
        videoInspirationItem == other.videoInspirationItem &&
        mainImageInspirationItem == other.mainImageInspirationItem &&
        mainImageCategory == other.mainImageCategory &&
        localizations == other.localizations;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                0,
                                                                createdAt
                                                                    .hashCode),
                                                            updatedAt.hashCode),
                                                        handle.hashCode),
                                                    fileName.hashCode),
                                                height.hashCode),
                                            width.hashCode),
                                        size.hashCode),
                                    mimeType.hashCode),
                                mainImageFeedItem.hashCode),
                            mainImageFeedItemCategory.hashCode),
                        videoFeedItem.hashCode),
                    videoInspirationItem.hashCode),
                mainImageInspirationItem.hashCode),
            mainImageCategory.hashCode),
        localizations.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetCreateInput')
          ..add('createdAt', createdAt)
          ..add('updatedAt', updatedAt)
          ..add('handle', handle)
          ..add('fileName', fileName)
          ..add('height', height)
          ..add('width', width)
          ..add('size', size)
          ..add('mimeType', mimeType)
          ..add('mainImageFeedItem', mainImageFeedItem)
          ..add('mainImageFeedItemCategory', mainImageFeedItemCategory)
          ..add('videoFeedItem', videoFeedItem)
          ..add('videoInspirationItem', videoInspirationItem)
          ..add('mainImageInspirationItem', mainImageInspirationItem)
          ..add('mainImageCategory', mainImageCategory)
          ..add('localizations', localizations))
        .toString();
  }
}

class GAssetCreateInputBuilder
    implements Builder<GAssetCreateInput, GAssetCreateInputBuilder> {
  _$GAssetCreateInput? _$v;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  String? _handle;
  String? get handle => _$this._handle;
  set handle(String? handle) => _$this._handle = handle;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  double? _height;
  double? get height => _$this._height;
  set height(double? height) => _$this._height = height;

  double? _width;
  double? get width => _$this._width;
  set width(double? width) => _$this._width = width;

  double? _size;
  double? get size => _$this._size;
  set size(double? size) => _$this._size = size;

  String? _mimeType;
  String? get mimeType => _$this._mimeType;
  set mimeType(String? mimeType) => _$this._mimeType = mimeType;

  GFeedItemCreateManyInlineInputBuilder? _mainImageFeedItem;
  GFeedItemCreateManyInlineInputBuilder get mainImageFeedItem =>
      _$this._mainImageFeedItem ??= new GFeedItemCreateManyInlineInputBuilder();
  set mainImageFeedItem(
          GFeedItemCreateManyInlineInputBuilder? mainImageFeedItem) =>
      _$this._mainImageFeedItem = mainImageFeedItem;

  GFeedItemCategoryCreateManyInlineInputBuilder? _mainImageFeedItemCategory;
  GFeedItemCategoryCreateManyInlineInputBuilder get mainImageFeedItemCategory =>
      _$this._mainImageFeedItemCategory ??=
          new GFeedItemCategoryCreateManyInlineInputBuilder();
  set mainImageFeedItemCategory(
          GFeedItemCategoryCreateManyInlineInputBuilder?
              mainImageFeedItemCategory) =>
      _$this._mainImageFeedItemCategory = mainImageFeedItemCategory;

  GFeedItemCreateManyInlineInputBuilder? _videoFeedItem;
  GFeedItemCreateManyInlineInputBuilder get videoFeedItem =>
      _$this._videoFeedItem ??= new GFeedItemCreateManyInlineInputBuilder();
  set videoFeedItem(GFeedItemCreateManyInlineInputBuilder? videoFeedItem) =>
      _$this._videoFeedItem = videoFeedItem;

  GInspirationItemCreateManyInlineInputBuilder? _videoInspirationItem;
  GInspirationItemCreateManyInlineInputBuilder get videoInspirationItem =>
      _$this._videoInspirationItem ??=
          new GInspirationItemCreateManyInlineInputBuilder();
  set videoInspirationItem(
          GInspirationItemCreateManyInlineInputBuilder? videoInspirationItem) =>
      _$this._videoInspirationItem = videoInspirationItem;

  GInspirationItemCreateManyInlineInputBuilder? _mainImageInspirationItem;
  GInspirationItemCreateManyInlineInputBuilder get mainImageInspirationItem =>
      _$this._mainImageInspirationItem ??=
          new GInspirationItemCreateManyInlineInputBuilder();
  set mainImageInspirationItem(
          GInspirationItemCreateManyInlineInputBuilder?
              mainImageInspirationItem) =>
      _$this._mainImageInspirationItem = mainImageInspirationItem;

  GCategoryCreateManyInlineInputBuilder? _mainImageCategory;
  GCategoryCreateManyInlineInputBuilder get mainImageCategory =>
      _$this._mainImageCategory ??= new GCategoryCreateManyInlineInputBuilder();
  set mainImageCategory(
          GCategoryCreateManyInlineInputBuilder? mainImageCategory) =>
      _$this._mainImageCategory = mainImageCategory;

  GAssetCreateLocalizationsInputBuilder? _localizations;
  GAssetCreateLocalizationsInputBuilder get localizations =>
      _$this._localizations ??= new GAssetCreateLocalizationsInputBuilder();
  set localizations(GAssetCreateLocalizationsInputBuilder? localizations) =>
      _$this._localizations = localizations;

  GAssetCreateInputBuilder();

  GAssetCreateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _createdAt = $v.createdAt;
      _updatedAt = $v.updatedAt;
      _handle = $v.handle;
      _fileName = $v.fileName;
      _height = $v.height;
      _width = $v.width;
      _size = $v.size;
      _mimeType = $v.mimeType;
      _mainImageFeedItem = $v.mainImageFeedItem?.toBuilder();
      _mainImageFeedItemCategory = $v.mainImageFeedItemCategory?.toBuilder();
      _videoFeedItem = $v.videoFeedItem?.toBuilder();
      _videoInspirationItem = $v.videoInspirationItem?.toBuilder();
      _mainImageInspirationItem = $v.mainImageInspirationItem?.toBuilder();
      _mainImageCategory = $v.mainImageCategory?.toBuilder();
      _localizations = $v.localizations?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateInput;
  }

  @override
  void update(void Function(GAssetCreateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetCreateInput build() {
    _$GAssetCreateInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetCreateInput._(
              createdAt: createdAt,
              updatedAt: updatedAt,
              handle: BuiltValueNullFieldError.checkNotNull(
                  handle, 'GAssetCreateInput', 'handle'),
              fileName: BuiltValueNullFieldError.checkNotNull(
                  fileName, 'GAssetCreateInput', 'fileName'),
              height: height,
              width: width,
              size: size,
              mimeType: mimeType,
              mainImageFeedItem: _mainImageFeedItem?.build(),
              mainImageFeedItemCategory: _mainImageFeedItemCategory?.build(),
              videoFeedItem: _videoFeedItem?.build(),
              videoInspirationItem: _videoInspirationItem?.build(),
              mainImageInspirationItem: _mainImageInspirationItem?.build(),
              mainImageCategory: _mainImageCategory?.build(),
              localizations: _localizations?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'mainImageFeedItem';
        _mainImageFeedItem?.build();
        _$failedField = 'mainImageFeedItemCategory';
        _mainImageFeedItemCategory?.build();
        _$failedField = 'videoFeedItem';
        _videoFeedItem?.build();
        _$failedField = 'videoInspirationItem';
        _videoInspirationItem?.build();
        _$failedField = 'mainImageInspirationItem';
        _mainImageInspirationItem?.build();
        _$failedField = 'mainImageCategory';
        _mainImageCategory?.build();
        _$failedField = 'localizations';
        _localizations?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetCreateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateLocalizationDataInput
    extends GAssetCreateLocalizationDataInput {
  @override
  final DateTime? createdAt;
  @override
  final DateTime? updatedAt;
  @override
  final String handle;
  @override
  final String fileName;
  @override
  final double? height;
  @override
  final double? width;
  @override
  final double? size;
  @override
  final String? mimeType;

  factory _$GAssetCreateLocalizationDataInput(
          [void Function(GAssetCreateLocalizationDataInputBuilder)? updates]) =>
      (new GAssetCreateLocalizationDataInputBuilder()..update(updates)).build();

  _$GAssetCreateLocalizationDataInput._(
      {this.createdAt,
      this.updatedAt,
      required this.handle,
      required this.fileName,
      this.height,
      this.width,
      this.size,
      this.mimeType})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        handle, 'GAssetCreateLocalizationDataInput', 'handle');
    BuiltValueNullFieldError.checkNotNull(
        fileName, 'GAssetCreateLocalizationDataInput', 'fileName');
  }

  @override
  GAssetCreateLocalizationDataInput rebuild(
          void Function(GAssetCreateLocalizationDataInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateLocalizationDataInputBuilder toBuilder() =>
      new GAssetCreateLocalizationDataInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateLocalizationDataInput &&
        createdAt == other.createdAt &&
        updatedAt == other.updatedAt &&
        handle == other.handle &&
        fileName == other.fileName &&
        height == other.height &&
        width == other.width &&
        size == other.size &&
        mimeType == other.mimeType;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc($jc($jc(0, createdAt.hashCode), updatedAt.hashCode),
                            handle.hashCode),
                        fileName.hashCode),
                    height.hashCode),
                width.hashCode),
            size.hashCode),
        mimeType.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetCreateLocalizationDataInput')
          ..add('createdAt', createdAt)
          ..add('updatedAt', updatedAt)
          ..add('handle', handle)
          ..add('fileName', fileName)
          ..add('height', height)
          ..add('width', width)
          ..add('size', size)
          ..add('mimeType', mimeType))
        .toString();
  }
}

class GAssetCreateLocalizationDataInputBuilder
    implements
        Builder<GAssetCreateLocalizationDataInput,
            GAssetCreateLocalizationDataInputBuilder> {
  _$GAssetCreateLocalizationDataInput? _$v;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  String? _handle;
  String? get handle => _$this._handle;
  set handle(String? handle) => _$this._handle = handle;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  double? _height;
  double? get height => _$this._height;
  set height(double? height) => _$this._height = height;

  double? _width;
  double? get width => _$this._width;
  set width(double? width) => _$this._width = width;

  double? _size;
  double? get size => _$this._size;
  set size(double? size) => _$this._size = size;

  String? _mimeType;
  String? get mimeType => _$this._mimeType;
  set mimeType(String? mimeType) => _$this._mimeType = mimeType;

  GAssetCreateLocalizationDataInputBuilder();

  GAssetCreateLocalizationDataInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _createdAt = $v.createdAt;
      _updatedAt = $v.updatedAt;
      _handle = $v.handle;
      _fileName = $v.fileName;
      _height = $v.height;
      _width = $v.width;
      _size = $v.size;
      _mimeType = $v.mimeType;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateLocalizationDataInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateLocalizationDataInput;
  }

  @override
  void update(
      void Function(GAssetCreateLocalizationDataInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetCreateLocalizationDataInput build() {
    final _$result = _$v ??
        new _$GAssetCreateLocalizationDataInput._(
            createdAt: createdAt,
            updatedAt: updatedAt,
            handle: BuiltValueNullFieldError.checkNotNull(
                handle, 'GAssetCreateLocalizationDataInput', 'handle'),
            fileName: BuiltValueNullFieldError.checkNotNull(
                fileName, 'GAssetCreateLocalizationDataInput', 'fileName'),
            height: height,
            width: width,
            size: size,
            mimeType: mimeType);
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateLocalizationInput extends GAssetCreateLocalizationInput {
  @override
  final GAssetCreateLocalizationDataInput data;
  @override
  final GLocale locale;

  factory _$GAssetCreateLocalizationInput(
          [void Function(GAssetCreateLocalizationInputBuilder)? updates]) =>
      (new GAssetCreateLocalizationInputBuilder()..update(updates)).build();

  _$GAssetCreateLocalizationInput._({required this.data, required this.locale})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, 'GAssetCreateLocalizationInput', 'data');
    BuiltValueNullFieldError.checkNotNull(
        locale, 'GAssetCreateLocalizationInput', 'locale');
  }

  @override
  GAssetCreateLocalizationInput rebuild(
          void Function(GAssetCreateLocalizationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateLocalizationInputBuilder toBuilder() =>
      new GAssetCreateLocalizationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateLocalizationInput &&
        data == other.data &&
        locale == other.locale;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), locale.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetCreateLocalizationInput')
          ..add('data', data)
          ..add('locale', locale))
        .toString();
  }
}

class GAssetCreateLocalizationInputBuilder
    implements
        Builder<GAssetCreateLocalizationInput,
            GAssetCreateLocalizationInputBuilder> {
  _$GAssetCreateLocalizationInput? _$v;

  GAssetCreateLocalizationDataInputBuilder? _data;
  GAssetCreateLocalizationDataInputBuilder get data =>
      _$this._data ??= new GAssetCreateLocalizationDataInputBuilder();
  set data(GAssetCreateLocalizationDataInputBuilder? data) =>
      _$this._data = data;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  GAssetCreateLocalizationInputBuilder();

  GAssetCreateLocalizationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _locale = $v.locale;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateLocalizationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateLocalizationInput;
  }

  @override
  void update(void Function(GAssetCreateLocalizationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetCreateLocalizationInput build() {
    _$GAssetCreateLocalizationInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetCreateLocalizationInput._(
              data: data.build(),
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, 'GAssetCreateLocalizationInput', 'locale'));
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetCreateLocalizationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateLocalizationsInput extends GAssetCreateLocalizationsInput {
  @override
  final BuiltList<GAssetCreateLocalizationInput>? create;

  factory _$GAssetCreateLocalizationsInput(
          [void Function(GAssetCreateLocalizationsInputBuilder)? updates]) =>
      (new GAssetCreateLocalizationsInputBuilder()..update(updates)).build();

  _$GAssetCreateLocalizationsInput._({this.create}) : super._();

  @override
  GAssetCreateLocalizationsInput rebuild(
          void Function(GAssetCreateLocalizationsInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateLocalizationsInputBuilder toBuilder() =>
      new GAssetCreateLocalizationsInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateLocalizationsInput && create == other.create;
  }

  @override
  int get hashCode {
    return $jf($jc(0, create.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetCreateLocalizationsInput')
          ..add('create', create))
        .toString();
  }
}

class GAssetCreateLocalizationsInputBuilder
    implements
        Builder<GAssetCreateLocalizationsInput,
            GAssetCreateLocalizationsInputBuilder> {
  _$GAssetCreateLocalizationsInput? _$v;

  ListBuilder<GAssetCreateLocalizationInput>? _create;
  ListBuilder<GAssetCreateLocalizationInput> get create =>
      _$this._create ??= new ListBuilder<GAssetCreateLocalizationInput>();
  set create(ListBuilder<GAssetCreateLocalizationInput>? create) =>
      _$this._create = create;

  GAssetCreateLocalizationsInputBuilder();

  GAssetCreateLocalizationsInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateLocalizationsInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateLocalizationsInput;
  }

  @override
  void update(void Function(GAssetCreateLocalizationsInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetCreateLocalizationsInput build() {
    _$GAssetCreateLocalizationsInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetCreateLocalizationsInput._(create: _create?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetCreateLocalizationsInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateManyInlineInput extends GAssetCreateManyInlineInput {
  @override
  final BuiltList<GAssetCreateInput>? create;
  @override
  final BuiltList<GAssetWhereUniqueInput>? connect;

  factory _$GAssetCreateManyInlineInput(
          [void Function(GAssetCreateManyInlineInputBuilder)? updates]) =>
      (new GAssetCreateManyInlineInputBuilder()..update(updates)).build();

  _$GAssetCreateManyInlineInput._({this.create, this.connect}) : super._();

  @override
  GAssetCreateManyInlineInput rebuild(
          void Function(GAssetCreateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateManyInlineInputBuilder toBuilder() =>
      new GAssetCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateManyInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetCreateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GAssetCreateManyInlineInputBuilder
    implements
        Builder<GAssetCreateManyInlineInput,
            GAssetCreateManyInlineInputBuilder> {
  _$GAssetCreateManyInlineInput? _$v;

  ListBuilder<GAssetCreateInput>? _create;
  ListBuilder<GAssetCreateInput> get create =>
      _$this._create ??= new ListBuilder<GAssetCreateInput>();
  set create(ListBuilder<GAssetCreateInput>? create) => _$this._create = create;

  ListBuilder<GAssetWhereUniqueInput>? _connect;
  ListBuilder<GAssetWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GAssetWhereUniqueInput>();
  set connect(ListBuilder<GAssetWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GAssetCreateManyInlineInputBuilder();

  GAssetCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateManyInlineInput;
  }

  @override
  void update(void Function(GAssetCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetCreateManyInlineInput build() {
    _$GAssetCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetCreateManyInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetCreateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetCreateOneInlineInput extends GAssetCreateOneInlineInput {
  @override
  final GAssetCreateInput? create;
  @override
  final GAssetWhereUniqueInput? connect;

  factory _$GAssetCreateOneInlineInput(
          [void Function(GAssetCreateOneInlineInputBuilder)? updates]) =>
      (new GAssetCreateOneInlineInputBuilder()..update(updates)).build();

  _$GAssetCreateOneInlineInput._({this.create, this.connect}) : super._();

  @override
  GAssetCreateOneInlineInput rebuild(
          void Function(GAssetCreateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetCreateOneInlineInputBuilder toBuilder() =>
      new GAssetCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetCreateOneInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetCreateOneInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GAssetCreateOneInlineInputBuilder
    implements
        Builder<GAssetCreateOneInlineInput, GAssetCreateOneInlineInputBuilder> {
  _$GAssetCreateOneInlineInput? _$v;

  GAssetCreateInputBuilder? _create;
  GAssetCreateInputBuilder get create =>
      _$this._create ??= new GAssetCreateInputBuilder();
  set create(GAssetCreateInputBuilder? create) => _$this._create = create;

  GAssetWhereUniqueInputBuilder? _connect;
  GAssetWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GAssetWhereUniqueInputBuilder();
  set connect(GAssetWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GAssetCreateOneInlineInputBuilder();

  GAssetCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetCreateOneInlineInput;
  }

  @override
  void update(void Function(GAssetCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetCreateOneInlineInput build() {
    _$GAssetCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetCreateOneInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetCreateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetManyWhereInput extends GAssetManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GAssetWhereInput>? AND;
  @override
  final BuiltList<GAssetWhereInput>? OR;
  @override
  final BuiltList<GAssetWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GFeedItemWhereInput? mainImageFeedItem_every;
  @override
  final GFeedItemWhereInput? mainImageFeedItem_some;
  @override
  final GFeedItemWhereInput? mainImageFeedItem_none;
  @override
  final GFeedItemCategoryWhereInput? mainImageFeedItemCategory_every;
  @override
  final GFeedItemCategoryWhereInput? mainImageFeedItemCategory_some;
  @override
  final GFeedItemCategoryWhereInput? mainImageFeedItemCategory_none;
  @override
  final GFeedItemWhereInput? videoFeedItem_every;
  @override
  final GFeedItemWhereInput? videoFeedItem_some;
  @override
  final GFeedItemWhereInput? videoFeedItem_none;
  @override
  final GInspirationItemWhereInput? videoInspirationItem_every;
  @override
  final GInspirationItemWhereInput? videoInspirationItem_some;
  @override
  final GInspirationItemWhereInput? videoInspirationItem_none;
  @override
  final GInspirationItemWhereInput? mainImageInspirationItem_every;
  @override
  final GInspirationItemWhereInput? mainImageInspirationItem_some;
  @override
  final GInspirationItemWhereInput? mainImageInspirationItem_none;
  @override
  final GCategoryWhereInput? mainImageCategory_every;
  @override
  final GCategoryWhereInput? mainImageCategory_some;
  @override
  final GCategoryWhereInput? mainImageCategory_none;

  factory _$GAssetManyWhereInput(
          [void Function(GAssetManyWhereInputBuilder)? updates]) =>
      (new GAssetManyWhereInputBuilder()..update(updates)).build();

  _$GAssetManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.createdBy,
      this.updatedBy,
      this.publishedBy,
      this.mainImageFeedItem_every,
      this.mainImageFeedItem_some,
      this.mainImageFeedItem_none,
      this.mainImageFeedItemCategory_every,
      this.mainImageFeedItemCategory_some,
      this.mainImageFeedItemCategory_none,
      this.videoFeedItem_every,
      this.videoFeedItem_some,
      this.videoFeedItem_none,
      this.videoInspirationItem_every,
      this.videoInspirationItem_some,
      this.videoInspirationItem_none,
      this.mainImageInspirationItem_every,
      this.mainImageInspirationItem_some,
      this.mainImageInspirationItem_none,
      this.mainImageCategory_every,
      this.mainImageCategory_some,
      this.mainImageCategory_none})
      : super._();

  @override
  GAssetManyWhereInput rebuild(
          void Function(GAssetManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetManyWhereInputBuilder toBuilder() =>
      new GAssetManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        createdBy == other.createdBy &&
        updatedBy == other.updatedBy &&
        publishedBy == other.publishedBy &&
        mainImageFeedItem_every == other.mainImageFeedItem_every &&
        mainImageFeedItem_some == other.mainImageFeedItem_some &&
        mainImageFeedItem_none == other.mainImageFeedItem_none &&
        mainImageFeedItemCategory_every ==
            other.mainImageFeedItemCategory_every &&
        mainImageFeedItemCategory_some ==
            other.mainImageFeedItemCategory_some &&
        mainImageFeedItemCategory_none ==
            other.mainImageFeedItemCategory_none &&
        videoFeedItem_every == other.videoFeedItem_every &&
        videoFeedItem_some == other.videoFeedItem_some &&
        videoFeedItem_none == other.videoFeedItem_none &&
        videoInspirationItem_every == other.videoInspirationItem_every &&
        videoInspirationItem_some == other.videoInspirationItem_some &&
        videoInspirationItem_none == other.videoInspirationItem_none &&
        mainImageInspirationItem_every ==
            other.mainImageInspirationItem_every &&
        mainImageInspirationItem_some == other.mainImageInspirationItem_some &&
        mainImageInspirationItem_none == other.mainImageInspirationItem_none &&
        mainImageCategory_every == other.mainImageCategory_every &&
        mainImageCategory_some == other.mainImageCategory_some &&
        mainImageCategory_none == other.mainImageCategory_none;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode), publishedAt_lt.hashCode), publishedAt_lte.hashCode), publishedAt_gt.hashCode), publishedAt_gte.hashCode), createdBy.hashCode), updatedBy.hashCode),
                                                                                publishedBy.hashCode),
                                                                            mainImageFeedItem_every.hashCode),
                                                                        mainImageFeedItem_some.hashCode),
                                                                    mainImageFeedItem_none.hashCode),
                                                                mainImageFeedItemCategory_every.hashCode),
                                                            mainImageFeedItemCategory_some.hashCode),
                                                        mainImageFeedItemCategory_none.hashCode),
                                                    videoFeedItem_every.hashCode),
                                                videoFeedItem_some.hashCode),
                                            videoFeedItem_none.hashCode),
                                        videoInspirationItem_every.hashCode),
                                    videoInspirationItem_some.hashCode),
                                videoInspirationItem_none.hashCode),
                            mainImageInspirationItem_every.hashCode),
                        mainImageInspirationItem_some.hashCode),
                    mainImageInspirationItem_none.hashCode),
                mainImageCategory_every.hashCode),
            mainImageCategory_some.hashCode),
        mainImageCategory_none.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('createdBy', createdBy)
          ..add('updatedBy', updatedBy)
          ..add('publishedBy', publishedBy)
          ..add('mainImageFeedItem_every', mainImageFeedItem_every)
          ..add('mainImageFeedItem_some', mainImageFeedItem_some)
          ..add('mainImageFeedItem_none', mainImageFeedItem_none)
          ..add('mainImageFeedItemCategory_every',
              mainImageFeedItemCategory_every)
          ..add(
              'mainImageFeedItemCategory_some', mainImageFeedItemCategory_some)
          ..add(
              'mainImageFeedItemCategory_none', mainImageFeedItemCategory_none)
          ..add('videoFeedItem_every', videoFeedItem_every)
          ..add('videoFeedItem_some', videoFeedItem_some)
          ..add('videoFeedItem_none', videoFeedItem_none)
          ..add('videoInspirationItem_every', videoInspirationItem_every)
          ..add('videoInspirationItem_some', videoInspirationItem_some)
          ..add('videoInspirationItem_none', videoInspirationItem_none)
          ..add(
              'mainImageInspirationItem_every', mainImageInspirationItem_every)
          ..add('mainImageInspirationItem_some', mainImageInspirationItem_some)
          ..add('mainImageInspirationItem_none', mainImageInspirationItem_none)
          ..add('mainImageCategory_every', mainImageCategory_every)
          ..add('mainImageCategory_some', mainImageCategory_some)
          ..add('mainImageCategory_none', mainImageCategory_none))
        .toString();
  }
}

class GAssetManyWhereInputBuilder
    implements Builder<GAssetManyWhereInput, GAssetManyWhereInputBuilder> {
  _$GAssetManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GAssetWhereInput>? _AND;
  ListBuilder<GAssetWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GAssetWhereInput>();
  set AND(ListBuilder<GAssetWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GAssetWhereInput>? _OR;
  ListBuilder<GAssetWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GAssetWhereInput>();
  set OR(ListBuilder<GAssetWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GAssetWhereInput>? _NOT;
  ListBuilder<GAssetWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GAssetWhereInput>();
  set NOT(ListBuilder<GAssetWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GFeedItemWhereInputBuilder? _mainImageFeedItem_every;
  GFeedItemWhereInputBuilder get mainImageFeedItem_every =>
      _$this._mainImageFeedItem_every ??= new GFeedItemWhereInputBuilder();
  set mainImageFeedItem_every(
          GFeedItemWhereInputBuilder? mainImageFeedItem_every) =>
      _$this._mainImageFeedItem_every = mainImageFeedItem_every;

  GFeedItemWhereInputBuilder? _mainImageFeedItem_some;
  GFeedItemWhereInputBuilder get mainImageFeedItem_some =>
      _$this._mainImageFeedItem_some ??= new GFeedItemWhereInputBuilder();
  set mainImageFeedItem_some(
          GFeedItemWhereInputBuilder? mainImageFeedItem_some) =>
      _$this._mainImageFeedItem_some = mainImageFeedItem_some;

  GFeedItemWhereInputBuilder? _mainImageFeedItem_none;
  GFeedItemWhereInputBuilder get mainImageFeedItem_none =>
      _$this._mainImageFeedItem_none ??= new GFeedItemWhereInputBuilder();
  set mainImageFeedItem_none(
          GFeedItemWhereInputBuilder? mainImageFeedItem_none) =>
      _$this._mainImageFeedItem_none = mainImageFeedItem_none;

  GFeedItemCategoryWhereInputBuilder? _mainImageFeedItemCategory_every;
  GFeedItemCategoryWhereInputBuilder get mainImageFeedItemCategory_every =>
      _$this._mainImageFeedItemCategory_every ??=
          new GFeedItemCategoryWhereInputBuilder();
  set mainImageFeedItemCategory_every(
          GFeedItemCategoryWhereInputBuilder?
              mainImageFeedItemCategory_every) =>
      _$this._mainImageFeedItemCategory_every = mainImageFeedItemCategory_every;

  GFeedItemCategoryWhereInputBuilder? _mainImageFeedItemCategory_some;
  GFeedItemCategoryWhereInputBuilder get mainImageFeedItemCategory_some =>
      _$this._mainImageFeedItemCategory_some ??=
          new GFeedItemCategoryWhereInputBuilder();
  set mainImageFeedItemCategory_some(
          GFeedItemCategoryWhereInputBuilder? mainImageFeedItemCategory_some) =>
      _$this._mainImageFeedItemCategory_some = mainImageFeedItemCategory_some;

  GFeedItemCategoryWhereInputBuilder? _mainImageFeedItemCategory_none;
  GFeedItemCategoryWhereInputBuilder get mainImageFeedItemCategory_none =>
      _$this._mainImageFeedItemCategory_none ??=
          new GFeedItemCategoryWhereInputBuilder();
  set mainImageFeedItemCategory_none(
          GFeedItemCategoryWhereInputBuilder? mainImageFeedItemCategory_none) =>
      _$this._mainImageFeedItemCategory_none = mainImageFeedItemCategory_none;

  GFeedItemWhereInputBuilder? _videoFeedItem_every;
  GFeedItemWhereInputBuilder get videoFeedItem_every =>
      _$this._videoFeedItem_every ??= new GFeedItemWhereInputBuilder();
  set videoFeedItem_every(GFeedItemWhereInputBuilder? videoFeedItem_every) =>
      _$this._videoFeedItem_every = videoFeedItem_every;

  GFeedItemWhereInputBuilder? _videoFeedItem_some;
  GFeedItemWhereInputBuilder get videoFeedItem_some =>
      _$this._videoFeedItem_some ??= new GFeedItemWhereInputBuilder();
  set videoFeedItem_some(GFeedItemWhereInputBuilder? videoFeedItem_some) =>
      _$this._videoFeedItem_some = videoFeedItem_some;

  GFeedItemWhereInputBuilder? _videoFeedItem_none;
  GFeedItemWhereInputBuilder get videoFeedItem_none =>
      _$this._videoFeedItem_none ??= new GFeedItemWhereInputBuilder();
  set videoFeedItem_none(GFeedItemWhereInputBuilder? videoFeedItem_none) =>
      _$this._videoFeedItem_none = videoFeedItem_none;

  GInspirationItemWhereInputBuilder? _videoInspirationItem_every;
  GInspirationItemWhereInputBuilder get videoInspirationItem_every =>
      _$this._videoInspirationItem_every ??=
          new GInspirationItemWhereInputBuilder();
  set videoInspirationItem_every(
          GInspirationItemWhereInputBuilder? videoInspirationItem_every) =>
      _$this._videoInspirationItem_every = videoInspirationItem_every;

  GInspirationItemWhereInputBuilder? _videoInspirationItem_some;
  GInspirationItemWhereInputBuilder get videoInspirationItem_some =>
      _$this._videoInspirationItem_some ??=
          new GInspirationItemWhereInputBuilder();
  set videoInspirationItem_some(
          GInspirationItemWhereInputBuilder? videoInspirationItem_some) =>
      _$this._videoInspirationItem_some = videoInspirationItem_some;

  GInspirationItemWhereInputBuilder? _videoInspirationItem_none;
  GInspirationItemWhereInputBuilder get videoInspirationItem_none =>
      _$this._videoInspirationItem_none ??=
          new GInspirationItemWhereInputBuilder();
  set videoInspirationItem_none(
          GInspirationItemWhereInputBuilder? videoInspirationItem_none) =>
      _$this._videoInspirationItem_none = videoInspirationItem_none;

  GInspirationItemWhereInputBuilder? _mainImageInspirationItem_every;
  GInspirationItemWhereInputBuilder get mainImageInspirationItem_every =>
      _$this._mainImageInspirationItem_every ??=
          new GInspirationItemWhereInputBuilder();
  set mainImageInspirationItem_every(
          GInspirationItemWhereInputBuilder? mainImageInspirationItem_every) =>
      _$this._mainImageInspirationItem_every = mainImageInspirationItem_every;

  GInspirationItemWhereInputBuilder? _mainImageInspirationItem_some;
  GInspirationItemWhereInputBuilder get mainImageInspirationItem_some =>
      _$this._mainImageInspirationItem_some ??=
          new GInspirationItemWhereInputBuilder();
  set mainImageInspirationItem_some(
          GInspirationItemWhereInputBuilder? mainImageInspirationItem_some) =>
      _$this._mainImageInspirationItem_some = mainImageInspirationItem_some;

  GInspirationItemWhereInputBuilder? _mainImageInspirationItem_none;
  GInspirationItemWhereInputBuilder get mainImageInspirationItem_none =>
      _$this._mainImageInspirationItem_none ??=
          new GInspirationItemWhereInputBuilder();
  set mainImageInspirationItem_none(
          GInspirationItemWhereInputBuilder? mainImageInspirationItem_none) =>
      _$this._mainImageInspirationItem_none = mainImageInspirationItem_none;

  GCategoryWhereInputBuilder? _mainImageCategory_every;
  GCategoryWhereInputBuilder get mainImageCategory_every =>
      _$this._mainImageCategory_every ??= new GCategoryWhereInputBuilder();
  set mainImageCategory_every(
          GCategoryWhereInputBuilder? mainImageCategory_every) =>
      _$this._mainImageCategory_every = mainImageCategory_every;

  GCategoryWhereInputBuilder? _mainImageCategory_some;
  GCategoryWhereInputBuilder get mainImageCategory_some =>
      _$this._mainImageCategory_some ??= new GCategoryWhereInputBuilder();
  set mainImageCategory_some(
          GCategoryWhereInputBuilder? mainImageCategory_some) =>
      _$this._mainImageCategory_some = mainImageCategory_some;

  GCategoryWhereInputBuilder? _mainImageCategory_none;
  GCategoryWhereInputBuilder get mainImageCategory_none =>
      _$this._mainImageCategory_none ??= new GCategoryWhereInputBuilder();
  set mainImageCategory_none(
          GCategoryWhereInputBuilder? mainImageCategory_none) =>
      _$this._mainImageCategory_none = mainImageCategory_none;

  GAssetManyWhereInputBuilder();

  GAssetManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _createdBy = $v.createdBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _mainImageFeedItem_every = $v.mainImageFeedItem_every?.toBuilder();
      _mainImageFeedItem_some = $v.mainImageFeedItem_some?.toBuilder();
      _mainImageFeedItem_none = $v.mainImageFeedItem_none?.toBuilder();
      _mainImageFeedItemCategory_every =
          $v.mainImageFeedItemCategory_every?.toBuilder();
      _mainImageFeedItemCategory_some =
          $v.mainImageFeedItemCategory_some?.toBuilder();
      _mainImageFeedItemCategory_none =
          $v.mainImageFeedItemCategory_none?.toBuilder();
      _videoFeedItem_every = $v.videoFeedItem_every?.toBuilder();
      _videoFeedItem_some = $v.videoFeedItem_some?.toBuilder();
      _videoFeedItem_none = $v.videoFeedItem_none?.toBuilder();
      _videoInspirationItem_every = $v.videoInspirationItem_every?.toBuilder();
      _videoInspirationItem_some = $v.videoInspirationItem_some?.toBuilder();
      _videoInspirationItem_none = $v.videoInspirationItem_none?.toBuilder();
      _mainImageInspirationItem_every =
          $v.mainImageInspirationItem_every?.toBuilder();
      _mainImageInspirationItem_some =
          $v.mainImageInspirationItem_some?.toBuilder();
      _mainImageInspirationItem_none =
          $v.mainImageInspirationItem_none?.toBuilder();
      _mainImageCategory_every = $v.mainImageCategory_every?.toBuilder();
      _mainImageCategory_some = $v.mainImageCategory_some?.toBuilder();
      _mainImageCategory_none = $v.mainImageCategory_none?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetManyWhereInput;
  }

  @override
  void update(void Function(GAssetManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetManyWhereInput build() {
    _$GAssetManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              createdBy: _createdBy?.build(),
              updatedBy: _updatedBy?.build(),
              publishedBy: _publishedBy?.build(),
              mainImageFeedItem_every: _mainImageFeedItem_every?.build(),
              mainImageFeedItem_some: _mainImageFeedItem_some?.build(),
              mainImageFeedItem_none: _mainImageFeedItem_none?.build(),
              mainImageFeedItemCategory_every:
                  _mainImageFeedItemCategory_every?.build(),
              mainImageFeedItemCategory_some:
                  _mainImageFeedItemCategory_some?.build(),
              mainImageFeedItemCategory_none:
                  _mainImageFeedItemCategory_none?.build(),
              videoFeedItem_every: _videoFeedItem_every?.build(),
              videoFeedItem_some: _videoFeedItem_some?.build(),
              videoFeedItem_none: _videoFeedItem_none?.build(),
              videoInspirationItem_every: _videoInspirationItem_every?.build(),
              videoInspirationItem_some: _videoInspirationItem_some?.build(),
              videoInspirationItem_none: _videoInspirationItem_none?.build(),
              mainImageInspirationItem_every:
                  _mainImageInspirationItem_every?.build(),
              mainImageInspirationItem_some:
                  _mainImageInspirationItem_some?.build(),
              mainImageInspirationItem_none:
                  _mainImageInspirationItem_none?.build(),
              mainImageCategory_every: _mainImageCategory_every?.build(),
              mainImageCategory_some: _mainImageCategory_some?.build(),
              mainImageCategory_none: _mainImageCategory_none?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'mainImageFeedItem_every';
        _mainImageFeedItem_every?.build();
        _$failedField = 'mainImageFeedItem_some';
        _mainImageFeedItem_some?.build();
        _$failedField = 'mainImageFeedItem_none';
        _mainImageFeedItem_none?.build();
        _$failedField = 'mainImageFeedItemCategory_every';
        _mainImageFeedItemCategory_every?.build();
        _$failedField = 'mainImageFeedItemCategory_some';
        _mainImageFeedItemCategory_some?.build();
        _$failedField = 'mainImageFeedItemCategory_none';
        _mainImageFeedItemCategory_none?.build();
        _$failedField = 'videoFeedItem_every';
        _videoFeedItem_every?.build();
        _$failedField = 'videoFeedItem_some';
        _videoFeedItem_some?.build();
        _$failedField = 'videoFeedItem_none';
        _videoFeedItem_none?.build();
        _$failedField = 'videoInspirationItem_every';
        _videoInspirationItem_every?.build();
        _$failedField = 'videoInspirationItem_some';
        _videoInspirationItem_some?.build();
        _$failedField = 'videoInspirationItem_none';
        _videoInspirationItem_none?.build();
        _$failedField = 'mainImageInspirationItem_every';
        _mainImageInspirationItem_every?.build();
        _$failedField = 'mainImageInspirationItem_some';
        _mainImageInspirationItem_some?.build();
        _$failedField = 'mainImageInspirationItem_none';
        _mainImageInspirationItem_none?.build();
        _$failedField = 'mainImageCategory_every';
        _mainImageCategory_every?.build();
        _$failedField = 'mainImageCategory_some';
        _mainImageCategory_some?.build();
        _$failedField = 'mainImageCategory_none';
        _mainImageCategory_none?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetTransformationInput extends GAssetTransformationInput {
  @override
  final GImageTransformationInput? image;
  @override
  final GDocumentTransformationInput? document;
  @override
  final bool? validateOptions;

  factory _$GAssetTransformationInput(
          [void Function(GAssetTransformationInputBuilder)? updates]) =>
      (new GAssetTransformationInputBuilder()..update(updates)).build();

  _$GAssetTransformationInput._(
      {this.image, this.document, this.validateOptions})
      : super._();

  @override
  GAssetTransformationInput rebuild(
          void Function(GAssetTransformationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetTransformationInputBuilder toBuilder() =>
      new GAssetTransformationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetTransformationInput &&
        image == other.image &&
        document == other.document &&
        validateOptions == other.validateOptions;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, image.hashCode), document.hashCode),
        validateOptions.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetTransformationInput')
          ..add('image', image)
          ..add('document', document)
          ..add('validateOptions', validateOptions))
        .toString();
  }
}

class GAssetTransformationInputBuilder
    implements
        Builder<GAssetTransformationInput, GAssetTransformationInputBuilder> {
  _$GAssetTransformationInput? _$v;

  GImageTransformationInputBuilder? _image;
  GImageTransformationInputBuilder get image =>
      _$this._image ??= new GImageTransformationInputBuilder();
  set image(GImageTransformationInputBuilder? image) => _$this._image = image;

  GDocumentTransformationInputBuilder? _document;
  GDocumentTransformationInputBuilder get document =>
      _$this._document ??= new GDocumentTransformationInputBuilder();
  set document(GDocumentTransformationInputBuilder? document) =>
      _$this._document = document;

  bool? _validateOptions;
  bool? get validateOptions => _$this._validateOptions;
  set validateOptions(bool? validateOptions) =>
      _$this._validateOptions = validateOptions;

  GAssetTransformationInputBuilder();

  GAssetTransformationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _image = $v.image?.toBuilder();
      _document = $v.document?.toBuilder();
      _validateOptions = $v.validateOptions;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetTransformationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetTransformationInput;
  }

  @override
  void update(void Function(GAssetTransformationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetTransformationInput build() {
    _$GAssetTransformationInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetTransformationInput._(
              image: _image?.build(),
              document: _document?.build(),
              validateOptions: validateOptions);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'image';
        _image?.build();
        _$failedField = 'document';
        _document?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetTransformationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateInput extends GAssetUpdateInput {
  @override
  final String? handle;
  @override
  final String? fileName;
  @override
  final double? height;
  @override
  final double? width;
  @override
  final double? size;
  @override
  final String? mimeType;
  @override
  final GFeedItemUpdateManyInlineInput? mainImageFeedItem;
  @override
  final GFeedItemCategoryUpdateManyInlineInput? mainImageFeedItemCategory;
  @override
  final GFeedItemUpdateManyInlineInput? videoFeedItem;
  @override
  final GInspirationItemUpdateManyInlineInput? videoInspirationItem;
  @override
  final GInspirationItemUpdateManyInlineInput? mainImageInspirationItem;
  @override
  final GCategoryUpdateManyInlineInput? mainImageCategory;
  @override
  final GAssetUpdateLocalizationsInput? localizations;

  factory _$GAssetUpdateInput(
          [void Function(GAssetUpdateInputBuilder)? updates]) =>
      (new GAssetUpdateInputBuilder()..update(updates)).build();

  _$GAssetUpdateInput._(
      {this.handle,
      this.fileName,
      this.height,
      this.width,
      this.size,
      this.mimeType,
      this.mainImageFeedItem,
      this.mainImageFeedItemCategory,
      this.videoFeedItem,
      this.videoInspirationItem,
      this.mainImageInspirationItem,
      this.mainImageCategory,
      this.localizations})
      : super._();

  @override
  GAssetUpdateInput rebuild(void Function(GAssetUpdateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateInputBuilder toBuilder() =>
      new GAssetUpdateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateInput &&
        handle == other.handle &&
        fileName == other.fileName &&
        height == other.height &&
        width == other.width &&
        size == other.size &&
        mimeType == other.mimeType &&
        mainImageFeedItem == other.mainImageFeedItem &&
        mainImageFeedItemCategory == other.mainImageFeedItemCategory &&
        videoFeedItem == other.videoFeedItem &&
        videoInspirationItem == other.videoInspirationItem &&
        mainImageInspirationItem == other.mainImageInspirationItem &&
        mainImageCategory == other.mainImageCategory &&
        localizations == other.localizations;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc($jc(0, handle.hashCode),
                                                    fileName.hashCode),
                                                height.hashCode),
                                            width.hashCode),
                                        size.hashCode),
                                    mimeType.hashCode),
                                mainImageFeedItem.hashCode),
                            mainImageFeedItemCategory.hashCode),
                        videoFeedItem.hashCode),
                    videoInspirationItem.hashCode),
                mainImageInspirationItem.hashCode),
            mainImageCategory.hashCode),
        localizations.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpdateInput')
          ..add('handle', handle)
          ..add('fileName', fileName)
          ..add('height', height)
          ..add('width', width)
          ..add('size', size)
          ..add('mimeType', mimeType)
          ..add('mainImageFeedItem', mainImageFeedItem)
          ..add('mainImageFeedItemCategory', mainImageFeedItemCategory)
          ..add('videoFeedItem', videoFeedItem)
          ..add('videoInspirationItem', videoInspirationItem)
          ..add('mainImageInspirationItem', mainImageInspirationItem)
          ..add('mainImageCategory', mainImageCategory)
          ..add('localizations', localizations))
        .toString();
  }
}

class GAssetUpdateInputBuilder
    implements Builder<GAssetUpdateInput, GAssetUpdateInputBuilder> {
  _$GAssetUpdateInput? _$v;

  String? _handle;
  String? get handle => _$this._handle;
  set handle(String? handle) => _$this._handle = handle;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  double? _height;
  double? get height => _$this._height;
  set height(double? height) => _$this._height = height;

  double? _width;
  double? get width => _$this._width;
  set width(double? width) => _$this._width = width;

  double? _size;
  double? get size => _$this._size;
  set size(double? size) => _$this._size = size;

  String? _mimeType;
  String? get mimeType => _$this._mimeType;
  set mimeType(String? mimeType) => _$this._mimeType = mimeType;

  GFeedItemUpdateManyInlineInputBuilder? _mainImageFeedItem;
  GFeedItemUpdateManyInlineInputBuilder get mainImageFeedItem =>
      _$this._mainImageFeedItem ??= new GFeedItemUpdateManyInlineInputBuilder();
  set mainImageFeedItem(
          GFeedItemUpdateManyInlineInputBuilder? mainImageFeedItem) =>
      _$this._mainImageFeedItem = mainImageFeedItem;

  GFeedItemCategoryUpdateManyInlineInputBuilder? _mainImageFeedItemCategory;
  GFeedItemCategoryUpdateManyInlineInputBuilder get mainImageFeedItemCategory =>
      _$this._mainImageFeedItemCategory ??=
          new GFeedItemCategoryUpdateManyInlineInputBuilder();
  set mainImageFeedItemCategory(
          GFeedItemCategoryUpdateManyInlineInputBuilder?
              mainImageFeedItemCategory) =>
      _$this._mainImageFeedItemCategory = mainImageFeedItemCategory;

  GFeedItemUpdateManyInlineInputBuilder? _videoFeedItem;
  GFeedItemUpdateManyInlineInputBuilder get videoFeedItem =>
      _$this._videoFeedItem ??= new GFeedItemUpdateManyInlineInputBuilder();
  set videoFeedItem(GFeedItemUpdateManyInlineInputBuilder? videoFeedItem) =>
      _$this._videoFeedItem = videoFeedItem;

  GInspirationItemUpdateManyInlineInputBuilder? _videoInspirationItem;
  GInspirationItemUpdateManyInlineInputBuilder get videoInspirationItem =>
      _$this._videoInspirationItem ??=
          new GInspirationItemUpdateManyInlineInputBuilder();
  set videoInspirationItem(
          GInspirationItemUpdateManyInlineInputBuilder? videoInspirationItem) =>
      _$this._videoInspirationItem = videoInspirationItem;

  GInspirationItemUpdateManyInlineInputBuilder? _mainImageInspirationItem;
  GInspirationItemUpdateManyInlineInputBuilder get mainImageInspirationItem =>
      _$this._mainImageInspirationItem ??=
          new GInspirationItemUpdateManyInlineInputBuilder();
  set mainImageInspirationItem(
          GInspirationItemUpdateManyInlineInputBuilder?
              mainImageInspirationItem) =>
      _$this._mainImageInspirationItem = mainImageInspirationItem;

  GCategoryUpdateManyInlineInputBuilder? _mainImageCategory;
  GCategoryUpdateManyInlineInputBuilder get mainImageCategory =>
      _$this._mainImageCategory ??= new GCategoryUpdateManyInlineInputBuilder();
  set mainImageCategory(
          GCategoryUpdateManyInlineInputBuilder? mainImageCategory) =>
      _$this._mainImageCategory = mainImageCategory;

  GAssetUpdateLocalizationsInputBuilder? _localizations;
  GAssetUpdateLocalizationsInputBuilder get localizations =>
      _$this._localizations ??= new GAssetUpdateLocalizationsInputBuilder();
  set localizations(GAssetUpdateLocalizationsInputBuilder? localizations) =>
      _$this._localizations = localizations;

  GAssetUpdateInputBuilder();

  GAssetUpdateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _handle = $v.handle;
      _fileName = $v.fileName;
      _height = $v.height;
      _width = $v.width;
      _size = $v.size;
      _mimeType = $v.mimeType;
      _mainImageFeedItem = $v.mainImageFeedItem?.toBuilder();
      _mainImageFeedItemCategory = $v.mainImageFeedItemCategory?.toBuilder();
      _videoFeedItem = $v.videoFeedItem?.toBuilder();
      _videoInspirationItem = $v.videoInspirationItem?.toBuilder();
      _mainImageInspirationItem = $v.mainImageInspirationItem?.toBuilder();
      _mainImageCategory = $v.mainImageCategory?.toBuilder();
      _localizations = $v.localizations?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateInput;
  }

  @override
  void update(void Function(GAssetUpdateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateInput build() {
    _$GAssetUpdateInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateInput._(
              handle: handle,
              fileName: fileName,
              height: height,
              width: width,
              size: size,
              mimeType: mimeType,
              mainImageFeedItem: _mainImageFeedItem?.build(),
              mainImageFeedItemCategory: _mainImageFeedItemCategory?.build(),
              videoFeedItem: _videoFeedItem?.build(),
              videoInspirationItem: _videoInspirationItem?.build(),
              mainImageInspirationItem: _mainImageInspirationItem?.build(),
              mainImageCategory: _mainImageCategory?.build(),
              localizations: _localizations?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'mainImageFeedItem';
        _mainImageFeedItem?.build();
        _$failedField = 'mainImageFeedItemCategory';
        _mainImageFeedItemCategory?.build();
        _$failedField = 'videoFeedItem';
        _videoFeedItem?.build();
        _$failedField = 'videoInspirationItem';
        _videoInspirationItem?.build();
        _$failedField = 'mainImageInspirationItem';
        _mainImageInspirationItem?.build();
        _$failedField = 'mainImageCategory';
        _mainImageCategory?.build();
        _$failedField = 'localizations';
        _localizations?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpdateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateLocalizationDataInput
    extends GAssetUpdateLocalizationDataInput {
  @override
  final String? handle;
  @override
  final String? fileName;
  @override
  final double? height;
  @override
  final double? width;
  @override
  final double? size;
  @override
  final String? mimeType;

  factory _$GAssetUpdateLocalizationDataInput(
          [void Function(GAssetUpdateLocalizationDataInputBuilder)? updates]) =>
      (new GAssetUpdateLocalizationDataInputBuilder()..update(updates)).build();

  _$GAssetUpdateLocalizationDataInput._(
      {this.handle,
      this.fileName,
      this.height,
      this.width,
      this.size,
      this.mimeType})
      : super._();

  @override
  GAssetUpdateLocalizationDataInput rebuild(
          void Function(GAssetUpdateLocalizationDataInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateLocalizationDataInputBuilder toBuilder() =>
      new GAssetUpdateLocalizationDataInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateLocalizationDataInput &&
        handle == other.handle &&
        fileName == other.fileName &&
        height == other.height &&
        width == other.width &&
        size == other.size &&
        mimeType == other.mimeType;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc($jc($jc(0, handle.hashCode), fileName.hashCode),
                    height.hashCode),
                width.hashCode),
            size.hashCode),
        mimeType.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpdateLocalizationDataInput')
          ..add('handle', handle)
          ..add('fileName', fileName)
          ..add('height', height)
          ..add('width', width)
          ..add('size', size)
          ..add('mimeType', mimeType))
        .toString();
  }
}

class GAssetUpdateLocalizationDataInputBuilder
    implements
        Builder<GAssetUpdateLocalizationDataInput,
            GAssetUpdateLocalizationDataInputBuilder> {
  _$GAssetUpdateLocalizationDataInput? _$v;

  String? _handle;
  String? get handle => _$this._handle;
  set handle(String? handle) => _$this._handle = handle;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  double? _height;
  double? get height => _$this._height;
  set height(double? height) => _$this._height = height;

  double? _width;
  double? get width => _$this._width;
  set width(double? width) => _$this._width = width;

  double? _size;
  double? get size => _$this._size;
  set size(double? size) => _$this._size = size;

  String? _mimeType;
  String? get mimeType => _$this._mimeType;
  set mimeType(String? mimeType) => _$this._mimeType = mimeType;

  GAssetUpdateLocalizationDataInputBuilder();

  GAssetUpdateLocalizationDataInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _handle = $v.handle;
      _fileName = $v.fileName;
      _height = $v.height;
      _width = $v.width;
      _size = $v.size;
      _mimeType = $v.mimeType;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateLocalizationDataInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateLocalizationDataInput;
  }

  @override
  void update(
      void Function(GAssetUpdateLocalizationDataInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateLocalizationDataInput build() {
    final _$result = _$v ??
        new _$GAssetUpdateLocalizationDataInput._(
            handle: handle,
            fileName: fileName,
            height: height,
            width: width,
            size: size,
            mimeType: mimeType);
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateLocalizationInput extends GAssetUpdateLocalizationInput {
  @override
  final GAssetUpdateLocalizationDataInput data;
  @override
  final GLocale locale;

  factory _$GAssetUpdateLocalizationInput(
          [void Function(GAssetUpdateLocalizationInputBuilder)? updates]) =>
      (new GAssetUpdateLocalizationInputBuilder()..update(updates)).build();

  _$GAssetUpdateLocalizationInput._({required this.data, required this.locale})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, 'GAssetUpdateLocalizationInput', 'data');
    BuiltValueNullFieldError.checkNotNull(
        locale, 'GAssetUpdateLocalizationInput', 'locale');
  }

  @override
  GAssetUpdateLocalizationInput rebuild(
          void Function(GAssetUpdateLocalizationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateLocalizationInputBuilder toBuilder() =>
      new GAssetUpdateLocalizationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateLocalizationInput &&
        data == other.data &&
        locale == other.locale;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), locale.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpdateLocalizationInput')
          ..add('data', data)
          ..add('locale', locale))
        .toString();
  }
}

class GAssetUpdateLocalizationInputBuilder
    implements
        Builder<GAssetUpdateLocalizationInput,
            GAssetUpdateLocalizationInputBuilder> {
  _$GAssetUpdateLocalizationInput? _$v;

  GAssetUpdateLocalizationDataInputBuilder? _data;
  GAssetUpdateLocalizationDataInputBuilder get data =>
      _$this._data ??= new GAssetUpdateLocalizationDataInputBuilder();
  set data(GAssetUpdateLocalizationDataInputBuilder? data) =>
      _$this._data = data;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  GAssetUpdateLocalizationInputBuilder();

  GAssetUpdateLocalizationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _locale = $v.locale;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateLocalizationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateLocalizationInput;
  }

  @override
  void update(void Function(GAssetUpdateLocalizationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateLocalizationInput build() {
    _$GAssetUpdateLocalizationInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateLocalizationInput._(
              data: data.build(),
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, 'GAssetUpdateLocalizationInput', 'locale'));
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpdateLocalizationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateLocalizationsInput extends GAssetUpdateLocalizationsInput {
  @override
  final BuiltList<GAssetCreateLocalizationInput>? create;
  @override
  final BuiltList<GAssetUpdateLocalizationInput>? updateIt;
  @override
  final BuiltList<GAssetUpsertLocalizationInput>? upsert;
  @override
  final BuiltList<GLocale>? delete;

  factory _$GAssetUpdateLocalizationsInput(
          [void Function(GAssetUpdateLocalizationsInputBuilder)? updates]) =>
      (new GAssetUpdateLocalizationsInputBuilder()..update(updates)).build();

  _$GAssetUpdateLocalizationsInput._(
      {this.create, this.updateIt, this.upsert, this.delete})
      : super._();

  @override
  GAssetUpdateLocalizationsInput rebuild(
          void Function(GAssetUpdateLocalizationsInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateLocalizationsInputBuilder toBuilder() =>
      new GAssetUpdateLocalizationsInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateLocalizationsInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, create.hashCode), updateIt.hashCode), upsert.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpdateLocalizationsInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('delete', delete))
        .toString();
  }
}

class GAssetUpdateLocalizationsInputBuilder
    implements
        Builder<GAssetUpdateLocalizationsInput,
            GAssetUpdateLocalizationsInputBuilder> {
  _$GAssetUpdateLocalizationsInput? _$v;

  ListBuilder<GAssetCreateLocalizationInput>? _create;
  ListBuilder<GAssetCreateLocalizationInput> get create =>
      _$this._create ??= new ListBuilder<GAssetCreateLocalizationInput>();
  set create(ListBuilder<GAssetCreateLocalizationInput>? create) =>
      _$this._create = create;

  ListBuilder<GAssetUpdateLocalizationInput>? _updateIt;
  ListBuilder<GAssetUpdateLocalizationInput> get updateIt =>
      _$this._updateIt ??= new ListBuilder<GAssetUpdateLocalizationInput>();
  set updateIt(ListBuilder<GAssetUpdateLocalizationInput>? updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GAssetUpsertLocalizationInput>? _upsert;
  ListBuilder<GAssetUpsertLocalizationInput> get upsert =>
      _$this._upsert ??= new ListBuilder<GAssetUpsertLocalizationInput>();
  set upsert(ListBuilder<GAssetUpsertLocalizationInput>? upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GLocale>? _delete;
  ListBuilder<GLocale> get delete =>
      _$this._delete ??= new ListBuilder<GLocale>();
  set delete(ListBuilder<GLocale>? delete) => _$this._delete = delete;

  GAssetUpdateLocalizationsInputBuilder();

  GAssetUpdateLocalizationsInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateLocalizationsInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateLocalizationsInput;
  }

  @override
  void update(void Function(GAssetUpdateLocalizationsInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateLocalizationsInput build() {
    _$GAssetUpdateLocalizationsInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateLocalizationsInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpdateLocalizationsInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyInlineInput extends GAssetUpdateManyInlineInput {
  @override
  final BuiltList<GAssetCreateInput>? create;
  @override
  final BuiltList<GAssetConnectInput>? connect;
  @override
  final BuiltList<GAssetWhereUniqueInput>? set;
  @override
  final BuiltList<GAssetUpdateWithNestedWhereUniqueInput>? updateIt;
  @override
  final BuiltList<GAssetUpsertWithNestedWhereUniqueInput>? upsert;
  @override
  final BuiltList<GAssetWhereUniqueInput>? disconnect;
  @override
  final BuiltList<GAssetWhereUniqueInput>? delete;

  factory _$GAssetUpdateManyInlineInput(
          [void Function(GAssetUpdateManyInlineInputBuilder)? updates]) =>
      (new GAssetUpdateManyInlineInputBuilder()..update(updates)).build();

  _$GAssetUpdateManyInlineInput._(
      {this.create,
      this.connect,
      this.set,
      this.updateIt,
      this.upsert,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GAssetUpdateManyInlineInput rebuild(
          void Function(GAssetUpdateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyInlineInputBuilder toBuilder() =>
      new GAssetUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyInlineInput &&
        create == other.create &&
        connect == other.connect &&
        set == other.set &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, create.hashCode), connect.hashCode),
                        set.hashCode),
                    updateIt.hashCode),
                upsert.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpdateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect)
          ..add('set', set)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GAssetUpdateManyInlineInputBuilder
    implements
        Builder<GAssetUpdateManyInlineInput,
            GAssetUpdateManyInlineInputBuilder> {
  _$GAssetUpdateManyInlineInput? _$v;

  ListBuilder<GAssetCreateInput>? _create;
  ListBuilder<GAssetCreateInput> get create =>
      _$this._create ??= new ListBuilder<GAssetCreateInput>();
  set create(ListBuilder<GAssetCreateInput>? create) => _$this._create = create;

  ListBuilder<GAssetConnectInput>? _connect;
  ListBuilder<GAssetConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GAssetConnectInput>();
  set connect(ListBuilder<GAssetConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GAssetWhereUniqueInput>? _set;
  ListBuilder<GAssetWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GAssetWhereUniqueInput>();
  set set(ListBuilder<GAssetWhereUniqueInput>? set) => _$this._set = set;

  ListBuilder<GAssetUpdateWithNestedWhereUniqueInput>? _updateIt;
  ListBuilder<GAssetUpdateWithNestedWhereUniqueInput> get updateIt =>
      _$this._updateIt ??=
          new ListBuilder<GAssetUpdateWithNestedWhereUniqueInput>();
  set updateIt(ListBuilder<GAssetUpdateWithNestedWhereUniqueInput>? updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GAssetUpsertWithNestedWhereUniqueInput>? _upsert;
  ListBuilder<GAssetUpsertWithNestedWhereUniqueInput> get upsert =>
      _$this._upsert ??=
          new ListBuilder<GAssetUpsertWithNestedWhereUniqueInput>();
  set upsert(ListBuilder<GAssetUpsertWithNestedWhereUniqueInput>? upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GAssetWhereUniqueInput>? _disconnect;
  ListBuilder<GAssetWhereUniqueInput> get disconnect =>
      _$this._disconnect ??= new ListBuilder<GAssetWhereUniqueInput>();
  set disconnect(ListBuilder<GAssetWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  ListBuilder<GAssetWhereUniqueInput>? _delete;
  ListBuilder<GAssetWhereUniqueInput> get delete =>
      _$this._delete ??= new ListBuilder<GAssetWhereUniqueInput>();
  set delete(ListBuilder<GAssetWhereUniqueInput>? delete) =>
      _$this._delete = delete;

  GAssetUpdateManyInlineInputBuilder();

  GAssetUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyInlineInput;
  }

  @override
  void update(void Function(GAssetUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateManyInlineInput build() {
    _$GAssetUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateManyInlineInput._(
              create: _create?.build(),
              connect: _connect?.build(),
              set: _set?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              disconnect: _disconnect?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpdateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyInput extends GAssetUpdateManyInput {
  @override
  final String? fileName;
  @override
  final double? height;
  @override
  final double? width;
  @override
  final double? size;
  @override
  final String? mimeType;
  @override
  final GAssetUpdateManyLocalizationsInput? localizations;

  factory _$GAssetUpdateManyInput(
          [void Function(GAssetUpdateManyInputBuilder)? updates]) =>
      (new GAssetUpdateManyInputBuilder()..update(updates)).build();

  _$GAssetUpdateManyInput._(
      {this.fileName,
      this.height,
      this.width,
      this.size,
      this.mimeType,
      this.localizations})
      : super._();

  @override
  GAssetUpdateManyInput rebuild(
          void Function(GAssetUpdateManyInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyInputBuilder toBuilder() =>
      new GAssetUpdateManyInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyInput &&
        fileName == other.fileName &&
        height == other.height &&
        width == other.width &&
        size == other.size &&
        mimeType == other.mimeType &&
        localizations == other.localizations;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc($jc($jc(0, fileName.hashCode), height.hashCode),
                    width.hashCode),
                size.hashCode),
            mimeType.hashCode),
        localizations.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpdateManyInput')
          ..add('fileName', fileName)
          ..add('height', height)
          ..add('width', width)
          ..add('size', size)
          ..add('mimeType', mimeType)
          ..add('localizations', localizations))
        .toString();
  }
}

class GAssetUpdateManyInputBuilder
    implements Builder<GAssetUpdateManyInput, GAssetUpdateManyInputBuilder> {
  _$GAssetUpdateManyInput? _$v;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  double? _height;
  double? get height => _$this._height;
  set height(double? height) => _$this._height = height;

  double? _width;
  double? get width => _$this._width;
  set width(double? width) => _$this._width = width;

  double? _size;
  double? get size => _$this._size;
  set size(double? size) => _$this._size = size;

  String? _mimeType;
  String? get mimeType => _$this._mimeType;
  set mimeType(String? mimeType) => _$this._mimeType = mimeType;

  GAssetUpdateManyLocalizationsInputBuilder? _localizations;
  GAssetUpdateManyLocalizationsInputBuilder get localizations =>
      _$this._localizations ??= new GAssetUpdateManyLocalizationsInputBuilder();
  set localizations(GAssetUpdateManyLocalizationsInputBuilder? localizations) =>
      _$this._localizations = localizations;

  GAssetUpdateManyInputBuilder();

  GAssetUpdateManyInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fileName = $v.fileName;
      _height = $v.height;
      _width = $v.width;
      _size = $v.size;
      _mimeType = $v.mimeType;
      _localizations = $v.localizations?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyInput;
  }

  @override
  void update(void Function(GAssetUpdateManyInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateManyInput build() {
    _$GAssetUpdateManyInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateManyInput._(
              fileName: fileName,
              height: height,
              width: width,
              size: size,
              mimeType: mimeType,
              localizations: _localizations?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'localizations';
        _localizations?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpdateManyInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyLocalizationDataInput
    extends GAssetUpdateManyLocalizationDataInput {
  @override
  final String? fileName;
  @override
  final double? height;
  @override
  final double? width;
  @override
  final double? size;
  @override
  final String? mimeType;

  factory _$GAssetUpdateManyLocalizationDataInput(
          [void Function(GAssetUpdateManyLocalizationDataInputBuilder)?
              updates]) =>
      (new GAssetUpdateManyLocalizationDataInputBuilder()..update(updates))
          .build();

  _$GAssetUpdateManyLocalizationDataInput._(
      {this.fileName, this.height, this.width, this.size, this.mimeType})
      : super._();

  @override
  GAssetUpdateManyLocalizationDataInput rebuild(
          void Function(GAssetUpdateManyLocalizationDataInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyLocalizationDataInputBuilder toBuilder() =>
      new GAssetUpdateManyLocalizationDataInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyLocalizationDataInput &&
        fileName == other.fileName &&
        height == other.height &&
        width == other.width &&
        size == other.size &&
        mimeType == other.mimeType;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, fileName.hashCode), height.hashCode),
                width.hashCode),
            size.hashCode),
        mimeType.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpdateManyLocalizationDataInput')
          ..add('fileName', fileName)
          ..add('height', height)
          ..add('width', width)
          ..add('size', size)
          ..add('mimeType', mimeType))
        .toString();
  }
}

class GAssetUpdateManyLocalizationDataInputBuilder
    implements
        Builder<GAssetUpdateManyLocalizationDataInput,
            GAssetUpdateManyLocalizationDataInputBuilder> {
  _$GAssetUpdateManyLocalizationDataInput? _$v;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  double? _height;
  double? get height => _$this._height;
  set height(double? height) => _$this._height = height;

  double? _width;
  double? get width => _$this._width;
  set width(double? width) => _$this._width = width;

  double? _size;
  double? get size => _$this._size;
  set size(double? size) => _$this._size = size;

  String? _mimeType;
  String? get mimeType => _$this._mimeType;
  set mimeType(String? mimeType) => _$this._mimeType = mimeType;

  GAssetUpdateManyLocalizationDataInputBuilder();

  GAssetUpdateManyLocalizationDataInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _fileName = $v.fileName;
      _height = $v.height;
      _width = $v.width;
      _size = $v.size;
      _mimeType = $v.mimeType;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyLocalizationDataInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyLocalizationDataInput;
  }

  @override
  void update(
      void Function(GAssetUpdateManyLocalizationDataInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateManyLocalizationDataInput build() {
    final _$result = _$v ??
        new _$GAssetUpdateManyLocalizationDataInput._(
            fileName: fileName,
            height: height,
            width: width,
            size: size,
            mimeType: mimeType);
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyLocalizationInput
    extends GAssetUpdateManyLocalizationInput {
  @override
  final GAssetUpdateManyLocalizationDataInput data;
  @override
  final GLocale locale;

  factory _$GAssetUpdateManyLocalizationInput(
          [void Function(GAssetUpdateManyLocalizationInputBuilder)? updates]) =>
      (new GAssetUpdateManyLocalizationInputBuilder()..update(updates)).build();

  _$GAssetUpdateManyLocalizationInput._(
      {required this.data, required this.locale})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        data, 'GAssetUpdateManyLocalizationInput', 'data');
    BuiltValueNullFieldError.checkNotNull(
        locale, 'GAssetUpdateManyLocalizationInput', 'locale');
  }

  @override
  GAssetUpdateManyLocalizationInput rebuild(
          void Function(GAssetUpdateManyLocalizationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyLocalizationInputBuilder toBuilder() =>
      new GAssetUpdateManyLocalizationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyLocalizationInput &&
        data == other.data &&
        locale == other.locale;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, data.hashCode), locale.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpdateManyLocalizationInput')
          ..add('data', data)
          ..add('locale', locale))
        .toString();
  }
}

class GAssetUpdateManyLocalizationInputBuilder
    implements
        Builder<GAssetUpdateManyLocalizationInput,
            GAssetUpdateManyLocalizationInputBuilder> {
  _$GAssetUpdateManyLocalizationInput? _$v;

  GAssetUpdateManyLocalizationDataInputBuilder? _data;
  GAssetUpdateManyLocalizationDataInputBuilder get data =>
      _$this._data ??= new GAssetUpdateManyLocalizationDataInputBuilder();
  set data(GAssetUpdateManyLocalizationDataInputBuilder? data) =>
      _$this._data = data;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  GAssetUpdateManyLocalizationInputBuilder();

  GAssetUpdateManyLocalizationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _data = $v.data.toBuilder();
      _locale = $v.locale;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyLocalizationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyLocalizationInput;
  }

  @override
  void update(
      void Function(GAssetUpdateManyLocalizationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateManyLocalizationInput build() {
    _$GAssetUpdateManyLocalizationInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateManyLocalizationInput._(
              data: data.build(),
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, 'GAssetUpdateManyLocalizationInput', 'locale'));
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpdateManyLocalizationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyLocalizationsInput
    extends GAssetUpdateManyLocalizationsInput {
  @override
  final BuiltList<GAssetUpdateManyLocalizationInput>? updateIt;

  factory _$GAssetUpdateManyLocalizationsInput(
          [void Function(GAssetUpdateManyLocalizationsInputBuilder)?
              updates]) =>
      (new GAssetUpdateManyLocalizationsInputBuilder()..update(updates))
          .build();

  _$GAssetUpdateManyLocalizationsInput._({this.updateIt}) : super._();

  @override
  GAssetUpdateManyLocalizationsInput rebuild(
          void Function(GAssetUpdateManyLocalizationsInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyLocalizationsInputBuilder toBuilder() =>
      new GAssetUpdateManyLocalizationsInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyLocalizationsInput &&
        updateIt == other.updateIt;
  }

  @override
  int get hashCode {
    return $jf($jc(0, updateIt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpdateManyLocalizationsInput')
          ..add('updateIt', updateIt))
        .toString();
  }
}

class GAssetUpdateManyLocalizationsInputBuilder
    implements
        Builder<GAssetUpdateManyLocalizationsInput,
            GAssetUpdateManyLocalizationsInputBuilder> {
  _$GAssetUpdateManyLocalizationsInput? _$v;

  ListBuilder<GAssetUpdateManyLocalizationInput>? _updateIt;
  ListBuilder<GAssetUpdateManyLocalizationInput> get updateIt =>
      _$this._updateIt ??= new ListBuilder<GAssetUpdateManyLocalizationInput>();
  set updateIt(ListBuilder<GAssetUpdateManyLocalizationInput>? updateIt) =>
      _$this._updateIt = updateIt;

  GAssetUpdateManyLocalizationsInputBuilder();

  GAssetUpdateManyLocalizationsInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _updateIt = $v.updateIt?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyLocalizationsInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyLocalizationsInput;
  }

  @override
  void update(
      void Function(GAssetUpdateManyLocalizationsInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateManyLocalizationsInput build() {
    _$GAssetUpdateManyLocalizationsInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateManyLocalizationsInput._(
              updateIt: _updateIt?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'updateIt';
        _updateIt?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpdateManyLocalizationsInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateManyWithNestedWhereInput
    extends GAssetUpdateManyWithNestedWhereInput {
  @override
  final GAssetWhereInput where;
  @override
  final GAssetUpdateManyInput data;

  factory _$GAssetUpdateManyWithNestedWhereInput(
          [void Function(GAssetUpdateManyWithNestedWhereInputBuilder)?
              updates]) =>
      (new GAssetUpdateManyWithNestedWhereInputBuilder()..update(updates))
          .build();

  _$GAssetUpdateManyWithNestedWhereInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GAssetUpdateManyWithNestedWhereInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GAssetUpdateManyWithNestedWhereInput', 'data');
  }

  @override
  GAssetUpdateManyWithNestedWhereInput rebuild(
          void Function(GAssetUpdateManyWithNestedWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateManyWithNestedWhereInputBuilder toBuilder() =>
      new GAssetUpdateManyWithNestedWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateManyWithNestedWhereInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpdateManyWithNestedWhereInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GAssetUpdateManyWithNestedWhereInputBuilder
    implements
        Builder<GAssetUpdateManyWithNestedWhereInput,
            GAssetUpdateManyWithNestedWhereInputBuilder> {
  _$GAssetUpdateManyWithNestedWhereInput? _$v;

  GAssetWhereInputBuilder? _where;
  GAssetWhereInputBuilder get where =>
      _$this._where ??= new GAssetWhereInputBuilder();
  set where(GAssetWhereInputBuilder? where) => _$this._where = where;

  GAssetUpdateManyInputBuilder? _data;
  GAssetUpdateManyInputBuilder get data =>
      _$this._data ??= new GAssetUpdateManyInputBuilder();
  set data(GAssetUpdateManyInputBuilder? data) => _$this._data = data;

  GAssetUpdateManyWithNestedWhereInputBuilder();

  GAssetUpdateManyWithNestedWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateManyWithNestedWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateManyWithNestedWhereInput;
  }

  @override
  void update(
      void Function(GAssetUpdateManyWithNestedWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateManyWithNestedWhereInput build() {
    _$GAssetUpdateManyWithNestedWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateManyWithNestedWhereInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpdateManyWithNestedWhereInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateOneInlineInput extends GAssetUpdateOneInlineInput {
  @override
  final GAssetCreateInput? create;
  @override
  final GAssetUpdateWithNestedWhereUniqueInput? updateIt;
  @override
  final GAssetUpsertWithNestedWhereUniqueInput? upsert;
  @override
  final GAssetWhereUniqueInput? connect;
  @override
  final bool? disconnect;
  @override
  final bool? delete;

  factory _$GAssetUpdateOneInlineInput(
          [void Function(GAssetUpdateOneInlineInputBuilder)? updates]) =>
      (new GAssetUpdateOneInlineInputBuilder()..update(updates)).build();

  _$GAssetUpdateOneInlineInput._(
      {this.create,
      this.updateIt,
      this.upsert,
      this.connect,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GAssetUpdateOneInlineInput rebuild(
          void Function(GAssetUpdateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateOneInlineInputBuilder toBuilder() =>
      new GAssetUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateOneInlineInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        connect == other.connect &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc($jc($jc(0, create.hashCode), updateIt.hashCode),
                    upsert.hashCode),
                connect.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpdateOneInlineInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('connect', connect)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GAssetUpdateOneInlineInputBuilder
    implements
        Builder<GAssetUpdateOneInlineInput, GAssetUpdateOneInlineInputBuilder> {
  _$GAssetUpdateOneInlineInput? _$v;

  GAssetCreateInputBuilder? _create;
  GAssetCreateInputBuilder get create =>
      _$this._create ??= new GAssetCreateInputBuilder();
  set create(GAssetCreateInputBuilder? create) => _$this._create = create;

  GAssetUpdateWithNestedWhereUniqueInputBuilder? _updateIt;
  GAssetUpdateWithNestedWhereUniqueInputBuilder get updateIt =>
      _$this._updateIt ??= new GAssetUpdateWithNestedWhereUniqueInputBuilder();
  set updateIt(GAssetUpdateWithNestedWhereUniqueInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GAssetUpsertWithNestedWhereUniqueInputBuilder? _upsert;
  GAssetUpsertWithNestedWhereUniqueInputBuilder get upsert =>
      _$this._upsert ??= new GAssetUpsertWithNestedWhereUniqueInputBuilder();
  set upsert(GAssetUpsertWithNestedWhereUniqueInputBuilder? upsert) =>
      _$this._upsert = upsert;

  GAssetWhereUniqueInputBuilder? _connect;
  GAssetWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GAssetWhereUniqueInputBuilder();
  set connect(GAssetWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  bool? _delete;
  bool? get delete => _$this._delete;
  set delete(bool? delete) => _$this._delete = delete;

  GAssetUpdateOneInlineInputBuilder();

  GAssetUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _delete = $v.delete;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateOneInlineInput;
  }

  @override
  void update(void Function(GAssetUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateOneInlineInput build() {
    _$GAssetUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateOneInlineInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              connect: _connect?.build(),
              disconnect: disconnect,
              delete: delete);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpdateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpdateWithNestedWhereUniqueInput
    extends GAssetUpdateWithNestedWhereUniqueInput {
  @override
  final GAssetWhereUniqueInput where;
  @override
  final GAssetUpdateInput data;

  factory _$GAssetUpdateWithNestedWhereUniqueInput(
          [void Function(GAssetUpdateWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GAssetUpdateWithNestedWhereUniqueInputBuilder()..update(updates))
          .build();

  _$GAssetUpdateWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GAssetUpdateWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GAssetUpdateWithNestedWhereUniqueInput', 'data');
  }

  @override
  GAssetUpdateWithNestedWhereUniqueInput rebuild(
          void Function(GAssetUpdateWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpdateWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GAssetUpdateWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpdateWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GAssetUpdateWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GAssetUpdateWithNestedWhereUniqueInputBuilder
    implements
        Builder<GAssetUpdateWithNestedWhereUniqueInput,
            GAssetUpdateWithNestedWhereUniqueInputBuilder> {
  _$GAssetUpdateWithNestedWhereUniqueInput? _$v;

  GAssetWhereUniqueInputBuilder? _where;
  GAssetWhereUniqueInputBuilder get where =>
      _$this._where ??= new GAssetWhereUniqueInputBuilder();
  set where(GAssetWhereUniqueInputBuilder? where) => _$this._where = where;

  GAssetUpdateInputBuilder? _data;
  GAssetUpdateInputBuilder get data =>
      _$this._data ??= new GAssetUpdateInputBuilder();
  set data(GAssetUpdateInputBuilder? data) => _$this._data = data;

  GAssetUpdateWithNestedWhereUniqueInputBuilder();

  GAssetUpdateWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpdateWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpdateWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GAssetUpdateWithNestedWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpdateWithNestedWhereUniqueInput build() {
    _$GAssetUpdateWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpdateWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpdateWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpsertInput extends GAssetUpsertInput {
  @override
  final GAssetCreateInput create;
  @override
  final GAssetUpdateInput updateIt;

  factory _$GAssetUpsertInput(
          [void Function(GAssetUpsertInputBuilder)? updates]) =>
      (new GAssetUpsertInputBuilder()..update(updates)).build();

  _$GAssetUpsertInput._({required this.create, required this.updateIt})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        create, 'GAssetUpsertInput', 'create');
    BuiltValueNullFieldError.checkNotNull(
        updateIt, 'GAssetUpsertInput', 'updateIt');
  }

  @override
  GAssetUpsertInput rebuild(void Function(GAssetUpsertInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpsertInputBuilder toBuilder() =>
      new GAssetUpsertInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpsertInput &&
        create == other.create &&
        updateIt == other.updateIt;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), updateIt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpsertInput')
          ..add('create', create)
          ..add('updateIt', updateIt))
        .toString();
  }
}

class GAssetUpsertInputBuilder
    implements Builder<GAssetUpsertInput, GAssetUpsertInputBuilder> {
  _$GAssetUpsertInput? _$v;

  GAssetCreateInputBuilder? _create;
  GAssetCreateInputBuilder get create =>
      _$this._create ??= new GAssetCreateInputBuilder();
  set create(GAssetCreateInputBuilder? create) => _$this._create = create;

  GAssetUpdateInputBuilder? _updateIt;
  GAssetUpdateInputBuilder get updateIt =>
      _$this._updateIt ??= new GAssetUpdateInputBuilder();
  set updateIt(GAssetUpdateInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GAssetUpsertInputBuilder();

  GAssetUpsertInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create.toBuilder();
      _updateIt = $v.updateIt.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpsertInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpsertInput;
  }

  @override
  void update(void Function(GAssetUpsertInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpsertInput build() {
    _$GAssetUpsertInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpsertInput._(
              create: create.build(), updateIt: updateIt.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        create.build();
        _$failedField = 'updateIt';
        updateIt.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpsertInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpsertLocalizationInput extends GAssetUpsertLocalizationInput {
  @override
  final GAssetUpdateLocalizationDataInput updateIt;
  @override
  final GAssetCreateLocalizationDataInput create;
  @override
  final GLocale locale;

  factory _$GAssetUpsertLocalizationInput(
          [void Function(GAssetUpsertLocalizationInputBuilder)? updates]) =>
      (new GAssetUpsertLocalizationInputBuilder()..update(updates)).build();

  _$GAssetUpsertLocalizationInput._(
      {required this.updateIt, required this.create, required this.locale})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        updateIt, 'GAssetUpsertLocalizationInput', 'updateIt');
    BuiltValueNullFieldError.checkNotNull(
        create, 'GAssetUpsertLocalizationInput', 'create');
    BuiltValueNullFieldError.checkNotNull(
        locale, 'GAssetUpsertLocalizationInput', 'locale');
  }

  @override
  GAssetUpsertLocalizationInput rebuild(
          void Function(GAssetUpsertLocalizationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpsertLocalizationInputBuilder toBuilder() =>
      new GAssetUpsertLocalizationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpsertLocalizationInput &&
        updateIt == other.updateIt &&
        create == other.create &&
        locale == other.locale;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, updateIt.hashCode), create.hashCode), locale.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetUpsertLocalizationInput')
          ..add('updateIt', updateIt)
          ..add('create', create)
          ..add('locale', locale))
        .toString();
  }
}

class GAssetUpsertLocalizationInputBuilder
    implements
        Builder<GAssetUpsertLocalizationInput,
            GAssetUpsertLocalizationInputBuilder> {
  _$GAssetUpsertLocalizationInput? _$v;

  GAssetUpdateLocalizationDataInputBuilder? _updateIt;
  GAssetUpdateLocalizationDataInputBuilder get updateIt =>
      _$this._updateIt ??= new GAssetUpdateLocalizationDataInputBuilder();
  set updateIt(GAssetUpdateLocalizationDataInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GAssetCreateLocalizationDataInputBuilder? _create;
  GAssetCreateLocalizationDataInputBuilder get create =>
      _$this._create ??= new GAssetCreateLocalizationDataInputBuilder();
  set create(GAssetCreateLocalizationDataInputBuilder? create) =>
      _$this._create = create;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  GAssetUpsertLocalizationInputBuilder();

  GAssetUpsertLocalizationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _updateIt = $v.updateIt.toBuilder();
      _create = $v.create.toBuilder();
      _locale = $v.locale;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpsertLocalizationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpsertLocalizationInput;
  }

  @override
  void update(void Function(GAssetUpsertLocalizationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpsertLocalizationInput build() {
    _$GAssetUpsertLocalizationInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpsertLocalizationInput._(
              updateIt: updateIt.build(),
              create: create.build(),
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, 'GAssetUpsertLocalizationInput', 'locale'));
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'updateIt';
        updateIt.build();
        _$failedField = 'create';
        create.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpsertLocalizationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetUpsertWithNestedWhereUniqueInput
    extends GAssetUpsertWithNestedWhereUniqueInput {
  @override
  final GAssetWhereUniqueInput where;
  @override
  final GAssetUpsertInput data;

  factory _$GAssetUpsertWithNestedWhereUniqueInput(
          [void Function(GAssetUpsertWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GAssetUpsertWithNestedWhereUniqueInputBuilder()..update(updates))
          .build();

  _$GAssetUpsertWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GAssetUpsertWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GAssetUpsertWithNestedWhereUniqueInput', 'data');
  }

  @override
  GAssetUpsertWithNestedWhereUniqueInput rebuild(
          void Function(GAssetUpsertWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetUpsertWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GAssetUpsertWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetUpsertWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GAssetUpsertWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GAssetUpsertWithNestedWhereUniqueInputBuilder
    implements
        Builder<GAssetUpsertWithNestedWhereUniqueInput,
            GAssetUpsertWithNestedWhereUniqueInputBuilder> {
  _$GAssetUpsertWithNestedWhereUniqueInput? _$v;

  GAssetWhereUniqueInputBuilder? _where;
  GAssetWhereUniqueInputBuilder get where =>
      _$this._where ??= new GAssetWhereUniqueInputBuilder();
  set where(GAssetWhereUniqueInputBuilder? where) => _$this._where = where;

  GAssetUpsertInputBuilder? _data;
  GAssetUpsertInputBuilder get data =>
      _$this._data ??= new GAssetUpsertInputBuilder();
  set data(GAssetUpsertInputBuilder? data) => _$this._data = data;

  GAssetUpsertWithNestedWhereUniqueInputBuilder();

  GAssetUpsertWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetUpsertWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetUpsertWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GAssetUpsertWithNestedWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetUpsertWithNestedWhereUniqueInput build() {
    _$GAssetUpsertWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetUpsertWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetUpsertWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetWhereInput extends GAssetWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GAssetWhereInput>? AND;
  @override
  final BuiltList<GAssetWhereInput>? OR;
  @override
  final BuiltList<GAssetWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final String? handle;
  @override
  final String? handle_not;
  @override
  final BuiltList<String>? handle_in;
  @override
  final BuiltList<String>? handle_not_in;
  @override
  final String? handle_contains;
  @override
  final String? handle_not_contains;
  @override
  final String? handle_starts_with;
  @override
  final String? handle_not_starts_with;
  @override
  final String? handle_ends_with;
  @override
  final String? handle_not_ends_with;
  @override
  final String? fileName;
  @override
  final String? fileName_not;
  @override
  final BuiltList<String>? fileName_in;
  @override
  final BuiltList<String>? fileName_not_in;
  @override
  final String? fileName_contains;
  @override
  final String? fileName_not_contains;
  @override
  final String? fileName_starts_with;
  @override
  final String? fileName_not_starts_with;
  @override
  final String? fileName_ends_with;
  @override
  final String? fileName_not_ends_with;
  @override
  final double? height;
  @override
  final double? height_not;
  @override
  final BuiltList<double>? height_in;
  @override
  final BuiltList<double>? height_not_in;
  @override
  final double? height_lt;
  @override
  final double? height_lte;
  @override
  final double? height_gt;
  @override
  final double? height_gte;
  @override
  final double? width;
  @override
  final double? width_not;
  @override
  final BuiltList<double>? width_in;
  @override
  final BuiltList<double>? width_not_in;
  @override
  final double? width_lt;
  @override
  final double? width_lte;
  @override
  final double? width_gt;
  @override
  final double? width_gte;
  @override
  final double? size;
  @override
  final double? size_not;
  @override
  final BuiltList<double>? size_in;
  @override
  final BuiltList<double>? size_not_in;
  @override
  final double? size_lt;
  @override
  final double? size_lte;
  @override
  final double? size_gt;
  @override
  final double? size_gte;
  @override
  final String? mimeType;
  @override
  final String? mimeType_not;
  @override
  final BuiltList<String>? mimeType_in;
  @override
  final BuiltList<String>? mimeType_not_in;
  @override
  final String? mimeType_contains;
  @override
  final String? mimeType_not_contains;
  @override
  final String? mimeType_starts_with;
  @override
  final String? mimeType_not_starts_with;
  @override
  final String? mimeType_ends_with;
  @override
  final String? mimeType_not_ends_with;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GFeedItemWhereInput? mainImageFeedItem_every;
  @override
  final GFeedItemWhereInput? mainImageFeedItem_some;
  @override
  final GFeedItemWhereInput? mainImageFeedItem_none;
  @override
  final GFeedItemCategoryWhereInput? mainImageFeedItemCategory_every;
  @override
  final GFeedItemCategoryWhereInput? mainImageFeedItemCategory_some;
  @override
  final GFeedItemCategoryWhereInput? mainImageFeedItemCategory_none;
  @override
  final GFeedItemWhereInput? videoFeedItem_every;
  @override
  final GFeedItemWhereInput? videoFeedItem_some;
  @override
  final GFeedItemWhereInput? videoFeedItem_none;
  @override
  final GInspirationItemWhereInput? videoInspirationItem_every;
  @override
  final GInspirationItemWhereInput? videoInspirationItem_some;
  @override
  final GInspirationItemWhereInput? videoInspirationItem_none;
  @override
  final GInspirationItemWhereInput? mainImageInspirationItem_every;
  @override
  final GInspirationItemWhereInput? mainImageInspirationItem_some;
  @override
  final GInspirationItemWhereInput? mainImageInspirationItem_none;
  @override
  final GCategoryWhereInput? mainImageCategory_every;
  @override
  final GCategoryWhereInput? mainImageCategory_some;
  @override
  final GCategoryWhereInput? mainImageCategory_none;

  factory _$GAssetWhereInput(
          [void Function(GAssetWhereInputBuilder)? updates]) =>
      (new GAssetWhereInputBuilder()..update(updates)).build();

  _$GAssetWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.handle,
      this.handle_not,
      this.handle_in,
      this.handle_not_in,
      this.handle_contains,
      this.handle_not_contains,
      this.handle_starts_with,
      this.handle_not_starts_with,
      this.handle_ends_with,
      this.handle_not_ends_with,
      this.fileName,
      this.fileName_not,
      this.fileName_in,
      this.fileName_not_in,
      this.fileName_contains,
      this.fileName_not_contains,
      this.fileName_starts_with,
      this.fileName_not_starts_with,
      this.fileName_ends_with,
      this.fileName_not_ends_with,
      this.height,
      this.height_not,
      this.height_in,
      this.height_not_in,
      this.height_lt,
      this.height_lte,
      this.height_gt,
      this.height_gte,
      this.width,
      this.width_not,
      this.width_in,
      this.width_not_in,
      this.width_lt,
      this.width_lte,
      this.width_gt,
      this.width_gte,
      this.size,
      this.size_not,
      this.size_in,
      this.size_not_in,
      this.size_lt,
      this.size_lte,
      this.size_gt,
      this.size_gte,
      this.mimeType,
      this.mimeType_not,
      this.mimeType_in,
      this.mimeType_not_in,
      this.mimeType_contains,
      this.mimeType_not_contains,
      this.mimeType_starts_with,
      this.mimeType_not_starts_with,
      this.mimeType_ends_with,
      this.mimeType_not_ends_with,
      this.createdBy,
      this.updatedBy,
      this.publishedBy,
      this.mainImageFeedItem_every,
      this.mainImageFeedItem_some,
      this.mainImageFeedItem_none,
      this.mainImageFeedItemCategory_every,
      this.mainImageFeedItemCategory_some,
      this.mainImageFeedItemCategory_none,
      this.videoFeedItem_every,
      this.videoFeedItem_some,
      this.videoFeedItem_none,
      this.videoInspirationItem_every,
      this.videoInspirationItem_some,
      this.videoInspirationItem_none,
      this.mainImageInspirationItem_every,
      this.mainImageInspirationItem_some,
      this.mainImageInspirationItem_none,
      this.mainImageCategory_every,
      this.mainImageCategory_some,
      this.mainImageCategory_none})
      : super._();

  @override
  GAssetWhereInput rebuild(void Function(GAssetWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetWhereInputBuilder toBuilder() =>
      new GAssetWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        handle == other.handle &&
        handle_not == other.handle_not &&
        handle_in == other.handle_in &&
        handle_not_in == other.handle_not_in &&
        handle_contains == other.handle_contains &&
        handle_not_contains == other.handle_not_contains &&
        handle_starts_with == other.handle_starts_with &&
        handle_not_starts_with == other.handle_not_starts_with &&
        handle_ends_with == other.handle_ends_with &&
        handle_not_ends_with == other.handle_not_ends_with &&
        fileName == other.fileName &&
        fileName_not == other.fileName_not &&
        fileName_in == other.fileName_in &&
        fileName_not_in == other.fileName_not_in &&
        fileName_contains == other.fileName_contains &&
        fileName_not_contains == other.fileName_not_contains &&
        fileName_starts_with == other.fileName_starts_with &&
        fileName_not_starts_with == other.fileName_not_starts_with &&
        fileName_ends_with == other.fileName_ends_with &&
        fileName_not_ends_with == other.fileName_not_ends_with &&
        height == other.height &&
        height_not == other.height_not &&
        height_in == other.height_in &&
        height_not_in == other.height_not_in &&
        height_lt == other.height_lt &&
        height_lte == other.height_lte &&
        height_gt == other.height_gt &&
        height_gte == other.height_gte &&
        width == other.width &&
        width_not == other.width_not &&
        width_in == other.width_in &&
        width_not_in == other.width_not_in &&
        width_lt == other.width_lt &&
        width_lte == other.width_lte &&
        width_gt == other.width_gt &&
        width_gte == other.width_gte &&
        size == other.size &&
        size_not == other.size_not &&
        size_in == other.size_in &&
        size_not_in == other.size_not_in &&
        size_lt == other.size_lt &&
        size_lte == other.size_lte &&
        size_gt == other.size_gt &&
        size_gte == other.size_gte &&
        mimeType == other.mimeType &&
        mimeType_not == other.mimeType_not &&
        mimeType_in == other.mimeType_in &&
        mimeType_not_in == other.mimeType_not_in &&
        mimeType_contains == other.mimeType_contains &&
        mimeType_not_contains == other.mimeType_not_contains &&
        mimeType_starts_with == other.mimeType_starts_with &&
        mimeType_not_starts_with == other.mimeType_not_starts_with &&
        mimeType_ends_with == other.mimeType_ends_with &&
        mimeType_not_ends_with == other.mimeType_not_ends_with &&
        createdBy == other.createdBy &&
        updatedBy == other.updatedBy &&
        publishedBy == other.publishedBy &&
        mainImageFeedItem_every == other.mainImageFeedItem_every &&
        mainImageFeedItem_some == other.mainImageFeedItem_some &&
        mainImageFeedItem_none == other.mainImageFeedItem_none &&
        mainImageFeedItemCategory_every ==
            other.mainImageFeedItemCategory_every &&
        mainImageFeedItemCategory_some ==
            other.mainImageFeedItemCategory_some &&
        mainImageFeedItemCategory_none ==
            other.mainImageFeedItemCategory_none &&
        videoFeedItem_every == other.videoFeedItem_every &&
        videoFeedItem_some == other.videoFeedItem_some &&
        videoFeedItem_none == other.videoFeedItem_none &&
        videoInspirationItem_every == other.videoInspirationItem_every &&
        videoInspirationItem_some == other.videoInspirationItem_some &&
        videoInspirationItem_none == other.videoInspirationItem_none &&
        mainImageInspirationItem_every ==
            other.mainImageInspirationItem_every &&
        mainImageInspirationItem_some == other.mainImageInspirationItem_some &&
        mainImageInspirationItem_none == other.mainImageInspirationItem_none &&
        mainImageCategory_every == other.mainImageCategory_every &&
        mainImageCategory_some == other.mainImageCategory_some &&
        mainImageCategory_none == other.mainImageCategory_none;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode), publishedAt_lt.hashCode), publishedAt_lte.hashCode), publishedAt_gt.hashCode), publishedAt_gte.hashCode), handle.hashCode), handle_not.hashCode), handle_in.hashCode), handle_not_in.hashCode), handle_contains.hashCode), handle_not_contains.hashCode), handle_starts_with.hashCode), handle_not_starts_with.hashCode), handle_ends_with.hashCode), handle_not_ends_with.hashCode), fileName.hashCode), fileName_not.hashCode), fileName_in.hashCode), fileName_not_in.hashCode), fileName_contains.hashCode), fileName_not_contains.hashCode), fileName_starts_with.hashCode), fileName_not_starts_with.hashCode), fileName_ends_with.hashCode), fileName_not_ends_with.hashCode), height.hashCode), height_not.hashCode), height_in.hashCode), height_not_in.hashCode), height_lt.hashCode), height_lte.hashCode), height_gt.hashCode), height_gte.hashCode), width.hashCode), width_not.hashCode), width_in.hashCode), width_not_in.hashCode), width_lt.hashCode), width_lte.hashCode), width_gt.hashCode), width_gte.hashCode), size.hashCode), size_not.hashCode), size_in.hashCode), size_not_in.hashCode), size_lt.hashCode), size_lte.hashCode), size_gt.hashCode), size_gte.hashCode), mimeType.hashCode), mimeType_not.hashCode), mimeType_in.hashCode), mimeType_not_in.hashCode), mimeType_contains.hashCode), mimeType_not_contains.hashCode), mimeType_starts_with.hashCode), mimeType_not_starts_with.hashCode), mimeType_ends_with.hashCode), mimeType_not_ends_with.hashCode), createdBy.hashCode), updatedBy.hashCode),
                                                                                publishedBy.hashCode),
                                                                            mainImageFeedItem_every.hashCode),
                                                                        mainImageFeedItem_some.hashCode),
                                                                    mainImageFeedItem_none.hashCode),
                                                                mainImageFeedItemCategory_every.hashCode),
                                                            mainImageFeedItemCategory_some.hashCode),
                                                        mainImageFeedItemCategory_none.hashCode),
                                                    videoFeedItem_every.hashCode),
                                                videoFeedItem_some.hashCode),
                                            videoFeedItem_none.hashCode),
                                        videoInspirationItem_every.hashCode),
                                    videoInspirationItem_some.hashCode),
                                videoInspirationItem_none.hashCode),
                            mainImageInspirationItem_every.hashCode),
                        mainImageInspirationItem_some.hashCode),
                    mainImageInspirationItem_none.hashCode),
                mainImageCategory_every.hashCode),
            mainImageCategory_some.hashCode),
        mainImageCategory_none.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('handle', handle)
          ..add('handle_not', handle_not)
          ..add('handle_in', handle_in)
          ..add('handle_not_in', handle_not_in)
          ..add('handle_contains', handle_contains)
          ..add('handle_not_contains', handle_not_contains)
          ..add('handle_starts_with', handle_starts_with)
          ..add('handle_not_starts_with', handle_not_starts_with)
          ..add('handle_ends_with', handle_ends_with)
          ..add('handle_not_ends_with', handle_not_ends_with)
          ..add('fileName', fileName)
          ..add('fileName_not', fileName_not)
          ..add('fileName_in', fileName_in)
          ..add('fileName_not_in', fileName_not_in)
          ..add('fileName_contains', fileName_contains)
          ..add('fileName_not_contains', fileName_not_contains)
          ..add('fileName_starts_with', fileName_starts_with)
          ..add('fileName_not_starts_with', fileName_not_starts_with)
          ..add('fileName_ends_with', fileName_ends_with)
          ..add('fileName_not_ends_with', fileName_not_ends_with)
          ..add('height', height)
          ..add('height_not', height_not)
          ..add('height_in', height_in)
          ..add('height_not_in', height_not_in)
          ..add('height_lt', height_lt)
          ..add('height_lte', height_lte)
          ..add('height_gt', height_gt)
          ..add('height_gte', height_gte)
          ..add('width', width)
          ..add('width_not', width_not)
          ..add('width_in', width_in)
          ..add('width_not_in', width_not_in)
          ..add('width_lt', width_lt)
          ..add('width_lte', width_lte)
          ..add('width_gt', width_gt)
          ..add('width_gte', width_gte)
          ..add('size', size)
          ..add('size_not', size_not)
          ..add('size_in', size_in)
          ..add('size_not_in', size_not_in)
          ..add('size_lt', size_lt)
          ..add('size_lte', size_lte)
          ..add('size_gt', size_gt)
          ..add('size_gte', size_gte)
          ..add('mimeType', mimeType)
          ..add('mimeType_not', mimeType_not)
          ..add('mimeType_in', mimeType_in)
          ..add('mimeType_not_in', mimeType_not_in)
          ..add('mimeType_contains', mimeType_contains)
          ..add('mimeType_not_contains', mimeType_not_contains)
          ..add('mimeType_starts_with', mimeType_starts_with)
          ..add('mimeType_not_starts_with', mimeType_not_starts_with)
          ..add('mimeType_ends_with', mimeType_ends_with)
          ..add('mimeType_not_ends_with', mimeType_not_ends_with)
          ..add('createdBy', createdBy)
          ..add('updatedBy', updatedBy)
          ..add('publishedBy', publishedBy)
          ..add('mainImageFeedItem_every', mainImageFeedItem_every)
          ..add('mainImageFeedItem_some', mainImageFeedItem_some)
          ..add('mainImageFeedItem_none', mainImageFeedItem_none)
          ..add('mainImageFeedItemCategory_every',
              mainImageFeedItemCategory_every)
          ..add(
              'mainImageFeedItemCategory_some', mainImageFeedItemCategory_some)
          ..add(
              'mainImageFeedItemCategory_none', mainImageFeedItemCategory_none)
          ..add('videoFeedItem_every', videoFeedItem_every)
          ..add('videoFeedItem_some', videoFeedItem_some)
          ..add('videoFeedItem_none', videoFeedItem_none)
          ..add('videoInspirationItem_every', videoInspirationItem_every)
          ..add('videoInspirationItem_some', videoInspirationItem_some)
          ..add('videoInspirationItem_none', videoInspirationItem_none)
          ..add(
              'mainImageInspirationItem_every', mainImageInspirationItem_every)
          ..add('mainImageInspirationItem_some', mainImageInspirationItem_some)
          ..add('mainImageInspirationItem_none', mainImageInspirationItem_none)
          ..add('mainImageCategory_every', mainImageCategory_every)
          ..add('mainImageCategory_some', mainImageCategory_some)
          ..add('mainImageCategory_none', mainImageCategory_none))
        .toString();
  }
}

class GAssetWhereInputBuilder
    implements Builder<GAssetWhereInput, GAssetWhereInputBuilder> {
  _$GAssetWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GAssetWhereInput>? _AND;
  ListBuilder<GAssetWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GAssetWhereInput>();
  set AND(ListBuilder<GAssetWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GAssetWhereInput>? _OR;
  ListBuilder<GAssetWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GAssetWhereInput>();
  set OR(ListBuilder<GAssetWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GAssetWhereInput>? _NOT;
  ListBuilder<GAssetWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GAssetWhereInput>();
  set NOT(ListBuilder<GAssetWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  String? _handle;
  String? get handle => _$this._handle;
  set handle(String? handle) => _$this._handle = handle;

  String? _handle_not;
  String? get handle_not => _$this._handle_not;
  set handle_not(String? handle_not) => _$this._handle_not = handle_not;

  ListBuilder<String>? _handle_in;
  ListBuilder<String> get handle_in =>
      _$this._handle_in ??= new ListBuilder<String>();
  set handle_in(ListBuilder<String>? handle_in) =>
      _$this._handle_in = handle_in;

  ListBuilder<String>? _handle_not_in;
  ListBuilder<String> get handle_not_in =>
      _$this._handle_not_in ??= new ListBuilder<String>();
  set handle_not_in(ListBuilder<String>? handle_not_in) =>
      _$this._handle_not_in = handle_not_in;

  String? _handle_contains;
  String? get handle_contains => _$this._handle_contains;
  set handle_contains(String? handle_contains) =>
      _$this._handle_contains = handle_contains;

  String? _handle_not_contains;
  String? get handle_not_contains => _$this._handle_not_contains;
  set handle_not_contains(String? handle_not_contains) =>
      _$this._handle_not_contains = handle_not_contains;

  String? _handle_starts_with;
  String? get handle_starts_with => _$this._handle_starts_with;
  set handle_starts_with(String? handle_starts_with) =>
      _$this._handle_starts_with = handle_starts_with;

  String? _handle_not_starts_with;
  String? get handle_not_starts_with => _$this._handle_not_starts_with;
  set handle_not_starts_with(String? handle_not_starts_with) =>
      _$this._handle_not_starts_with = handle_not_starts_with;

  String? _handle_ends_with;
  String? get handle_ends_with => _$this._handle_ends_with;
  set handle_ends_with(String? handle_ends_with) =>
      _$this._handle_ends_with = handle_ends_with;

  String? _handle_not_ends_with;
  String? get handle_not_ends_with => _$this._handle_not_ends_with;
  set handle_not_ends_with(String? handle_not_ends_with) =>
      _$this._handle_not_ends_with = handle_not_ends_with;

  String? _fileName;
  String? get fileName => _$this._fileName;
  set fileName(String? fileName) => _$this._fileName = fileName;

  String? _fileName_not;
  String? get fileName_not => _$this._fileName_not;
  set fileName_not(String? fileName_not) => _$this._fileName_not = fileName_not;

  ListBuilder<String>? _fileName_in;
  ListBuilder<String> get fileName_in =>
      _$this._fileName_in ??= new ListBuilder<String>();
  set fileName_in(ListBuilder<String>? fileName_in) =>
      _$this._fileName_in = fileName_in;

  ListBuilder<String>? _fileName_not_in;
  ListBuilder<String> get fileName_not_in =>
      _$this._fileName_not_in ??= new ListBuilder<String>();
  set fileName_not_in(ListBuilder<String>? fileName_not_in) =>
      _$this._fileName_not_in = fileName_not_in;

  String? _fileName_contains;
  String? get fileName_contains => _$this._fileName_contains;
  set fileName_contains(String? fileName_contains) =>
      _$this._fileName_contains = fileName_contains;

  String? _fileName_not_contains;
  String? get fileName_not_contains => _$this._fileName_not_contains;
  set fileName_not_contains(String? fileName_not_contains) =>
      _$this._fileName_not_contains = fileName_not_contains;

  String? _fileName_starts_with;
  String? get fileName_starts_with => _$this._fileName_starts_with;
  set fileName_starts_with(String? fileName_starts_with) =>
      _$this._fileName_starts_with = fileName_starts_with;

  String? _fileName_not_starts_with;
  String? get fileName_not_starts_with => _$this._fileName_not_starts_with;
  set fileName_not_starts_with(String? fileName_not_starts_with) =>
      _$this._fileName_not_starts_with = fileName_not_starts_with;

  String? _fileName_ends_with;
  String? get fileName_ends_with => _$this._fileName_ends_with;
  set fileName_ends_with(String? fileName_ends_with) =>
      _$this._fileName_ends_with = fileName_ends_with;

  String? _fileName_not_ends_with;
  String? get fileName_not_ends_with => _$this._fileName_not_ends_with;
  set fileName_not_ends_with(String? fileName_not_ends_with) =>
      _$this._fileName_not_ends_with = fileName_not_ends_with;

  double? _height;
  double? get height => _$this._height;
  set height(double? height) => _$this._height = height;

  double? _height_not;
  double? get height_not => _$this._height_not;
  set height_not(double? height_not) => _$this._height_not = height_not;

  ListBuilder<double>? _height_in;
  ListBuilder<double> get height_in =>
      _$this._height_in ??= new ListBuilder<double>();
  set height_in(ListBuilder<double>? height_in) =>
      _$this._height_in = height_in;

  ListBuilder<double>? _height_not_in;
  ListBuilder<double> get height_not_in =>
      _$this._height_not_in ??= new ListBuilder<double>();
  set height_not_in(ListBuilder<double>? height_not_in) =>
      _$this._height_not_in = height_not_in;

  double? _height_lt;
  double? get height_lt => _$this._height_lt;
  set height_lt(double? height_lt) => _$this._height_lt = height_lt;

  double? _height_lte;
  double? get height_lte => _$this._height_lte;
  set height_lte(double? height_lte) => _$this._height_lte = height_lte;

  double? _height_gt;
  double? get height_gt => _$this._height_gt;
  set height_gt(double? height_gt) => _$this._height_gt = height_gt;

  double? _height_gte;
  double? get height_gte => _$this._height_gte;
  set height_gte(double? height_gte) => _$this._height_gte = height_gte;

  double? _width;
  double? get width => _$this._width;
  set width(double? width) => _$this._width = width;

  double? _width_not;
  double? get width_not => _$this._width_not;
  set width_not(double? width_not) => _$this._width_not = width_not;

  ListBuilder<double>? _width_in;
  ListBuilder<double> get width_in =>
      _$this._width_in ??= new ListBuilder<double>();
  set width_in(ListBuilder<double>? width_in) => _$this._width_in = width_in;

  ListBuilder<double>? _width_not_in;
  ListBuilder<double> get width_not_in =>
      _$this._width_not_in ??= new ListBuilder<double>();
  set width_not_in(ListBuilder<double>? width_not_in) =>
      _$this._width_not_in = width_not_in;

  double? _width_lt;
  double? get width_lt => _$this._width_lt;
  set width_lt(double? width_lt) => _$this._width_lt = width_lt;

  double? _width_lte;
  double? get width_lte => _$this._width_lte;
  set width_lte(double? width_lte) => _$this._width_lte = width_lte;

  double? _width_gt;
  double? get width_gt => _$this._width_gt;
  set width_gt(double? width_gt) => _$this._width_gt = width_gt;

  double? _width_gte;
  double? get width_gte => _$this._width_gte;
  set width_gte(double? width_gte) => _$this._width_gte = width_gte;

  double? _size;
  double? get size => _$this._size;
  set size(double? size) => _$this._size = size;

  double? _size_not;
  double? get size_not => _$this._size_not;
  set size_not(double? size_not) => _$this._size_not = size_not;

  ListBuilder<double>? _size_in;
  ListBuilder<double> get size_in =>
      _$this._size_in ??= new ListBuilder<double>();
  set size_in(ListBuilder<double>? size_in) => _$this._size_in = size_in;

  ListBuilder<double>? _size_not_in;
  ListBuilder<double> get size_not_in =>
      _$this._size_not_in ??= new ListBuilder<double>();
  set size_not_in(ListBuilder<double>? size_not_in) =>
      _$this._size_not_in = size_not_in;

  double? _size_lt;
  double? get size_lt => _$this._size_lt;
  set size_lt(double? size_lt) => _$this._size_lt = size_lt;

  double? _size_lte;
  double? get size_lte => _$this._size_lte;
  set size_lte(double? size_lte) => _$this._size_lte = size_lte;

  double? _size_gt;
  double? get size_gt => _$this._size_gt;
  set size_gt(double? size_gt) => _$this._size_gt = size_gt;

  double? _size_gte;
  double? get size_gte => _$this._size_gte;
  set size_gte(double? size_gte) => _$this._size_gte = size_gte;

  String? _mimeType;
  String? get mimeType => _$this._mimeType;
  set mimeType(String? mimeType) => _$this._mimeType = mimeType;

  String? _mimeType_not;
  String? get mimeType_not => _$this._mimeType_not;
  set mimeType_not(String? mimeType_not) => _$this._mimeType_not = mimeType_not;

  ListBuilder<String>? _mimeType_in;
  ListBuilder<String> get mimeType_in =>
      _$this._mimeType_in ??= new ListBuilder<String>();
  set mimeType_in(ListBuilder<String>? mimeType_in) =>
      _$this._mimeType_in = mimeType_in;

  ListBuilder<String>? _mimeType_not_in;
  ListBuilder<String> get mimeType_not_in =>
      _$this._mimeType_not_in ??= new ListBuilder<String>();
  set mimeType_not_in(ListBuilder<String>? mimeType_not_in) =>
      _$this._mimeType_not_in = mimeType_not_in;

  String? _mimeType_contains;
  String? get mimeType_contains => _$this._mimeType_contains;
  set mimeType_contains(String? mimeType_contains) =>
      _$this._mimeType_contains = mimeType_contains;

  String? _mimeType_not_contains;
  String? get mimeType_not_contains => _$this._mimeType_not_contains;
  set mimeType_not_contains(String? mimeType_not_contains) =>
      _$this._mimeType_not_contains = mimeType_not_contains;

  String? _mimeType_starts_with;
  String? get mimeType_starts_with => _$this._mimeType_starts_with;
  set mimeType_starts_with(String? mimeType_starts_with) =>
      _$this._mimeType_starts_with = mimeType_starts_with;

  String? _mimeType_not_starts_with;
  String? get mimeType_not_starts_with => _$this._mimeType_not_starts_with;
  set mimeType_not_starts_with(String? mimeType_not_starts_with) =>
      _$this._mimeType_not_starts_with = mimeType_not_starts_with;

  String? _mimeType_ends_with;
  String? get mimeType_ends_with => _$this._mimeType_ends_with;
  set mimeType_ends_with(String? mimeType_ends_with) =>
      _$this._mimeType_ends_with = mimeType_ends_with;

  String? _mimeType_not_ends_with;
  String? get mimeType_not_ends_with => _$this._mimeType_not_ends_with;
  set mimeType_not_ends_with(String? mimeType_not_ends_with) =>
      _$this._mimeType_not_ends_with = mimeType_not_ends_with;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GFeedItemWhereInputBuilder? _mainImageFeedItem_every;
  GFeedItemWhereInputBuilder get mainImageFeedItem_every =>
      _$this._mainImageFeedItem_every ??= new GFeedItemWhereInputBuilder();
  set mainImageFeedItem_every(
          GFeedItemWhereInputBuilder? mainImageFeedItem_every) =>
      _$this._mainImageFeedItem_every = mainImageFeedItem_every;

  GFeedItemWhereInputBuilder? _mainImageFeedItem_some;
  GFeedItemWhereInputBuilder get mainImageFeedItem_some =>
      _$this._mainImageFeedItem_some ??= new GFeedItemWhereInputBuilder();
  set mainImageFeedItem_some(
          GFeedItemWhereInputBuilder? mainImageFeedItem_some) =>
      _$this._mainImageFeedItem_some = mainImageFeedItem_some;

  GFeedItemWhereInputBuilder? _mainImageFeedItem_none;
  GFeedItemWhereInputBuilder get mainImageFeedItem_none =>
      _$this._mainImageFeedItem_none ??= new GFeedItemWhereInputBuilder();
  set mainImageFeedItem_none(
          GFeedItemWhereInputBuilder? mainImageFeedItem_none) =>
      _$this._mainImageFeedItem_none = mainImageFeedItem_none;

  GFeedItemCategoryWhereInputBuilder? _mainImageFeedItemCategory_every;
  GFeedItemCategoryWhereInputBuilder get mainImageFeedItemCategory_every =>
      _$this._mainImageFeedItemCategory_every ??=
          new GFeedItemCategoryWhereInputBuilder();
  set mainImageFeedItemCategory_every(
          GFeedItemCategoryWhereInputBuilder?
              mainImageFeedItemCategory_every) =>
      _$this._mainImageFeedItemCategory_every = mainImageFeedItemCategory_every;

  GFeedItemCategoryWhereInputBuilder? _mainImageFeedItemCategory_some;
  GFeedItemCategoryWhereInputBuilder get mainImageFeedItemCategory_some =>
      _$this._mainImageFeedItemCategory_some ??=
          new GFeedItemCategoryWhereInputBuilder();
  set mainImageFeedItemCategory_some(
          GFeedItemCategoryWhereInputBuilder? mainImageFeedItemCategory_some) =>
      _$this._mainImageFeedItemCategory_some = mainImageFeedItemCategory_some;

  GFeedItemCategoryWhereInputBuilder? _mainImageFeedItemCategory_none;
  GFeedItemCategoryWhereInputBuilder get mainImageFeedItemCategory_none =>
      _$this._mainImageFeedItemCategory_none ??=
          new GFeedItemCategoryWhereInputBuilder();
  set mainImageFeedItemCategory_none(
          GFeedItemCategoryWhereInputBuilder? mainImageFeedItemCategory_none) =>
      _$this._mainImageFeedItemCategory_none = mainImageFeedItemCategory_none;

  GFeedItemWhereInputBuilder? _videoFeedItem_every;
  GFeedItemWhereInputBuilder get videoFeedItem_every =>
      _$this._videoFeedItem_every ??= new GFeedItemWhereInputBuilder();
  set videoFeedItem_every(GFeedItemWhereInputBuilder? videoFeedItem_every) =>
      _$this._videoFeedItem_every = videoFeedItem_every;

  GFeedItemWhereInputBuilder? _videoFeedItem_some;
  GFeedItemWhereInputBuilder get videoFeedItem_some =>
      _$this._videoFeedItem_some ??= new GFeedItemWhereInputBuilder();
  set videoFeedItem_some(GFeedItemWhereInputBuilder? videoFeedItem_some) =>
      _$this._videoFeedItem_some = videoFeedItem_some;

  GFeedItemWhereInputBuilder? _videoFeedItem_none;
  GFeedItemWhereInputBuilder get videoFeedItem_none =>
      _$this._videoFeedItem_none ??= new GFeedItemWhereInputBuilder();
  set videoFeedItem_none(GFeedItemWhereInputBuilder? videoFeedItem_none) =>
      _$this._videoFeedItem_none = videoFeedItem_none;

  GInspirationItemWhereInputBuilder? _videoInspirationItem_every;
  GInspirationItemWhereInputBuilder get videoInspirationItem_every =>
      _$this._videoInspirationItem_every ??=
          new GInspirationItemWhereInputBuilder();
  set videoInspirationItem_every(
          GInspirationItemWhereInputBuilder? videoInspirationItem_every) =>
      _$this._videoInspirationItem_every = videoInspirationItem_every;

  GInspirationItemWhereInputBuilder? _videoInspirationItem_some;
  GInspirationItemWhereInputBuilder get videoInspirationItem_some =>
      _$this._videoInspirationItem_some ??=
          new GInspirationItemWhereInputBuilder();
  set videoInspirationItem_some(
          GInspirationItemWhereInputBuilder? videoInspirationItem_some) =>
      _$this._videoInspirationItem_some = videoInspirationItem_some;

  GInspirationItemWhereInputBuilder? _videoInspirationItem_none;
  GInspirationItemWhereInputBuilder get videoInspirationItem_none =>
      _$this._videoInspirationItem_none ??=
          new GInspirationItemWhereInputBuilder();
  set videoInspirationItem_none(
          GInspirationItemWhereInputBuilder? videoInspirationItem_none) =>
      _$this._videoInspirationItem_none = videoInspirationItem_none;

  GInspirationItemWhereInputBuilder? _mainImageInspirationItem_every;
  GInspirationItemWhereInputBuilder get mainImageInspirationItem_every =>
      _$this._mainImageInspirationItem_every ??=
          new GInspirationItemWhereInputBuilder();
  set mainImageInspirationItem_every(
          GInspirationItemWhereInputBuilder? mainImageInspirationItem_every) =>
      _$this._mainImageInspirationItem_every = mainImageInspirationItem_every;

  GInspirationItemWhereInputBuilder? _mainImageInspirationItem_some;
  GInspirationItemWhereInputBuilder get mainImageInspirationItem_some =>
      _$this._mainImageInspirationItem_some ??=
          new GInspirationItemWhereInputBuilder();
  set mainImageInspirationItem_some(
          GInspirationItemWhereInputBuilder? mainImageInspirationItem_some) =>
      _$this._mainImageInspirationItem_some = mainImageInspirationItem_some;

  GInspirationItemWhereInputBuilder? _mainImageInspirationItem_none;
  GInspirationItemWhereInputBuilder get mainImageInspirationItem_none =>
      _$this._mainImageInspirationItem_none ??=
          new GInspirationItemWhereInputBuilder();
  set mainImageInspirationItem_none(
          GInspirationItemWhereInputBuilder? mainImageInspirationItem_none) =>
      _$this._mainImageInspirationItem_none = mainImageInspirationItem_none;

  GCategoryWhereInputBuilder? _mainImageCategory_every;
  GCategoryWhereInputBuilder get mainImageCategory_every =>
      _$this._mainImageCategory_every ??= new GCategoryWhereInputBuilder();
  set mainImageCategory_every(
          GCategoryWhereInputBuilder? mainImageCategory_every) =>
      _$this._mainImageCategory_every = mainImageCategory_every;

  GCategoryWhereInputBuilder? _mainImageCategory_some;
  GCategoryWhereInputBuilder get mainImageCategory_some =>
      _$this._mainImageCategory_some ??= new GCategoryWhereInputBuilder();
  set mainImageCategory_some(
          GCategoryWhereInputBuilder? mainImageCategory_some) =>
      _$this._mainImageCategory_some = mainImageCategory_some;

  GCategoryWhereInputBuilder? _mainImageCategory_none;
  GCategoryWhereInputBuilder get mainImageCategory_none =>
      _$this._mainImageCategory_none ??= new GCategoryWhereInputBuilder();
  set mainImageCategory_none(
          GCategoryWhereInputBuilder? mainImageCategory_none) =>
      _$this._mainImageCategory_none = mainImageCategory_none;

  GAssetWhereInputBuilder();

  GAssetWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _handle = $v.handle;
      _handle_not = $v.handle_not;
      _handle_in = $v.handle_in?.toBuilder();
      _handle_not_in = $v.handle_not_in?.toBuilder();
      _handle_contains = $v.handle_contains;
      _handle_not_contains = $v.handle_not_contains;
      _handle_starts_with = $v.handle_starts_with;
      _handle_not_starts_with = $v.handle_not_starts_with;
      _handle_ends_with = $v.handle_ends_with;
      _handle_not_ends_with = $v.handle_not_ends_with;
      _fileName = $v.fileName;
      _fileName_not = $v.fileName_not;
      _fileName_in = $v.fileName_in?.toBuilder();
      _fileName_not_in = $v.fileName_not_in?.toBuilder();
      _fileName_contains = $v.fileName_contains;
      _fileName_not_contains = $v.fileName_not_contains;
      _fileName_starts_with = $v.fileName_starts_with;
      _fileName_not_starts_with = $v.fileName_not_starts_with;
      _fileName_ends_with = $v.fileName_ends_with;
      _fileName_not_ends_with = $v.fileName_not_ends_with;
      _height = $v.height;
      _height_not = $v.height_not;
      _height_in = $v.height_in?.toBuilder();
      _height_not_in = $v.height_not_in?.toBuilder();
      _height_lt = $v.height_lt;
      _height_lte = $v.height_lte;
      _height_gt = $v.height_gt;
      _height_gte = $v.height_gte;
      _width = $v.width;
      _width_not = $v.width_not;
      _width_in = $v.width_in?.toBuilder();
      _width_not_in = $v.width_not_in?.toBuilder();
      _width_lt = $v.width_lt;
      _width_lte = $v.width_lte;
      _width_gt = $v.width_gt;
      _width_gte = $v.width_gte;
      _size = $v.size;
      _size_not = $v.size_not;
      _size_in = $v.size_in?.toBuilder();
      _size_not_in = $v.size_not_in?.toBuilder();
      _size_lt = $v.size_lt;
      _size_lte = $v.size_lte;
      _size_gt = $v.size_gt;
      _size_gte = $v.size_gte;
      _mimeType = $v.mimeType;
      _mimeType_not = $v.mimeType_not;
      _mimeType_in = $v.mimeType_in?.toBuilder();
      _mimeType_not_in = $v.mimeType_not_in?.toBuilder();
      _mimeType_contains = $v.mimeType_contains;
      _mimeType_not_contains = $v.mimeType_not_contains;
      _mimeType_starts_with = $v.mimeType_starts_with;
      _mimeType_not_starts_with = $v.mimeType_not_starts_with;
      _mimeType_ends_with = $v.mimeType_ends_with;
      _mimeType_not_ends_with = $v.mimeType_not_ends_with;
      _createdBy = $v.createdBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _mainImageFeedItem_every = $v.mainImageFeedItem_every?.toBuilder();
      _mainImageFeedItem_some = $v.mainImageFeedItem_some?.toBuilder();
      _mainImageFeedItem_none = $v.mainImageFeedItem_none?.toBuilder();
      _mainImageFeedItemCategory_every =
          $v.mainImageFeedItemCategory_every?.toBuilder();
      _mainImageFeedItemCategory_some =
          $v.mainImageFeedItemCategory_some?.toBuilder();
      _mainImageFeedItemCategory_none =
          $v.mainImageFeedItemCategory_none?.toBuilder();
      _videoFeedItem_every = $v.videoFeedItem_every?.toBuilder();
      _videoFeedItem_some = $v.videoFeedItem_some?.toBuilder();
      _videoFeedItem_none = $v.videoFeedItem_none?.toBuilder();
      _videoInspirationItem_every = $v.videoInspirationItem_every?.toBuilder();
      _videoInspirationItem_some = $v.videoInspirationItem_some?.toBuilder();
      _videoInspirationItem_none = $v.videoInspirationItem_none?.toBuilder();
      _mainImageInspirationItem_every =
          $v.mainImageInspirationItem_every?.toBuilder();
      _mainImageInspirationItem_some =
          $v.mainImageInspirationItem_some?.toBuilder();
      _mainImageInspirationItem_none =
          $v.mainImageInspirationItem_none?.toBuilder();
      _mainImageCategory_every = $v.mainImageCategory_every?.toBuilder();
      _mainImageCategory_some = $v.mainImageCategory_some?.toBuilder();
      _mainImageCategory_none = $v.mainImageCategory_none?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetWhereInput;
  }

  @override
  void update(void Function(GAssetWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetWhereInput build() {
    _$GAssetWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GAssetWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              handle: handle,
              handle_not: handle_not,
              handle_in: _handle_in?.build(),
              handle_not_in: _handle_not_in?.build(),
              handle_contains: handle_contains,
              handle_not_contains: handle_not_contains,
              handle_starts_with: handle_starts_with,
              handle_not_starts_with: handle_not_starts_with,
              handle_ends_with: handle_ends_with,
              handle_not_ends_with: handle_not_ends_with,
              fileName: fileName,
              fileName_not: fileName_not,
              fileName_in: _fileName_in?.build(),
              fileName_not_in: _fileName_not_in?.build(),
              fileName_contains: fileName_contains,
              fileName_not_contains: fileName_not_contains,
              fileName_starts_with: fileName_starts_with,
              fileName_not_starts_with: fileName_not_starts_with,
              fileName_ends_with: fileName_ends_with,
              fileName_not_ends_with: fileName_not_ends_with,
              height: height,
              height_not: height_not,
              height_in: _height_in?.build(),
              height_not_in: _height_not_in?.build(),
              height_lt: height_lt,
              height_lte: height_lte,
              height_gt: height_gt,
              height_gte: height_gte,
              width: width,
              width_not: width_not,
              width_in: _width_in?.build(),
              width_not_in: _width_not_in?.build(),
              width_lt: width_lt,
              width_lte: width_lte,
              width_gt: width_gt,
              width_gte: width_gte,
              size: size,
              size_not: size_not,
              size_in: _size_in?.build(),
              size_not_in: _size_not_in?.build(),
              size_lt: size_lt,
              size_lte: size_lte,
              size_gt: size_gt,
              size_gte: size_gte,
              mimeType: mimeType,
              mimeType_not: mimeType_not,
              mimeType_in: _mimeType_in?.build(),
              mimeType_not_in: _mimeType_not_in?.build(),
              mimeType_contains: mimeType_contains,
              mimeType_not_contains: mimeType_not_contains,
              mimeType_starts_with: mimeType_starts_with,
              mimeType_not_starts_with: mimeType_not_starts_with,
              mimeType_ends_with: mimeType_ends_with,
              mimeType_not_ends_with: mimeType_not_ends_with,
              createdBy: _createdBy?.build(),
              updatedBy: _updatedBy?.build(),
              publishedBy: _publishedBy?.build(),
              mainImageFeedItem_every: _mainImageFeedItem_every?.build(),
              mainImageFeedItem_some: _mainImageFeedItem_some?.build(),
              mainImageFeedItem_none: _mainImageFeedItem_none?.build(),
              mainImageFeedItemCategory_every:
                  _mainImageFeedItemCategory_every?.build(),
              mainImageFeedItemCategory_some:
                  _mainImageFeedItemCategory_some?.build(),
              mainImageFeedItemCategory_none:
                  _mainImageFeedItemCategory_none?.build(),
              videoFeedItem_every: _videoFeedItem_every?.build(),
              videoFeedItem_some: _videoFeedItem_some?.build(),
              videoFeedItem_none: _videoFeedItem_none?.build(),
              videoInspirationItem_every: _videoInspirationItem_every?.build(),
              videoInspirationItem_some: _videoInspirationItem_some?.build(),
              videoInspirationItem_none: _videoInspirationItem_none?.build(),
              mainImageInspirationItem_every:
                  _mainImageInspirationItem_every?.build(),
              mainImageInspirationItem_some:
                  _mainImageInspirationItem_some?.build(),
              mainImageInspirationItem_none:
                  _mainImageInspirationItem_none?.build(),
              mainImageCategory_every: _mainImageCategory_every?.build(),
              mainImageCategory_some: _mainImageCategory_some?.build(),
              mainImageCategory_none: _mainImageCategory_none?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'handle_in';
        _handle_in?.build();
        _$failedField = 'handle_not_in';
        _handle_not_in?.build();

        _$failedField = 'fileName_in';
        _fileName_in?.build();
        _$failedField = 'fileName_not_in';
        _fileName_not_in?.build();

        _$failedField = 'height_in';
        _height_in?.build();
        _$failedField = 'height_not_in';
        _height_not_in?.build();

        _$failedField = 'width_in';
        _width_in?.build();
        _$failedField = 'width_not_in';
        _width_not_in?.build();

        _$failedField = 'size_in';
        _size_in?.build();
        _$failedField = 'size_not_in';
        _size_not_in?.build();

        _$failedField = 'mimeType_in';
        _mimeType_in?.build();
        _$failedField = 'mimeType_not_in';
        _mimeType_not_in?.build();

        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'mainImageFeedItem_every';
        _mainImageFeedItem_every?.build();
        _$failedField = 'mainImageFeedItem_some';
        _mainImageFeedItem_some?.build();
        _$failedField = 'mainImageFeedItem_none';
        _mainImageFeedItem_none?.build();
        _$failedField = 'mainImageFeedItemCategory_every';
        _mainImageFeedItemCategory_every?.build();
        _$failedField = 'mainImageFeedItemCategory_some';
        _mainImageFeedItemCategory_some?.build();
        _$failedField = 'mainImageFeedItemCategory_none';
        _mainImageFeedItemCategory_none?.build();
        _$failedField = 'videoFeedItem_every';
        _videoFeedItem_every?.build();
        _$failedField = 'videoFeedItem_some';
        _videoFeedItem_some?.build();
        _$failedField = 'videoFeedItem_none';
        _videoFeedItem_none?.build();
        _$failedField = 'videoInspirationItem_every';
        _videoInspirationItem_every?.build();
        _$failedField = 'videoInspirationItem_some';
        _videoInspirationItem_some?.build();
        _$failedField = 'videoInspirationItem_none';
        _videoInspirationItem_none?.build();
        _$failedField = 'mainImageInspirationItem_every';
        _mainImageInspirationItem_every?.build();
        _$failedField = 'mainImageInspirationItem_some';
        _mainImageInspirationItem_some?.build();
        _$failedField = 'mainImageInspirationItem_none';
        _mainImageInspirationItem_none?.build();
        _$failedField = 'mainImageCategory_every';
        _mainImageCategory_every?.build();
        _$failedField = 'mainImageCategory_some';
        _mainImageCategory_some?.build();
        _$failedField = 'mainImageCategory_none';
        _mainImageCategory_none?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GAssetWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GAssetWhereUniqueInput extends GAssetWhereUniqueInput {
  @override
  final String? id;

  factory _$GAssetWhereUniqueInput(
          [void Function(GAssetWhereUniqueInputBuilder)? updates]) =>
      (new GAssetWhereUniqueInputBuilder()..update(updates)).build();

  _$GAssetWhereUniqueInput._({this.id}) : super._();

  @override
  GAssetWhereUniqueInput rebuild(
          void Function(GAssetWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GAssetWhereUniqueInputBuilder toBuilder() =>
      new GAssetWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GAssetWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GAssetWhereUniqueInput')
          ..add('id', id))
        .toString();
  }
}

class GAssetWhereUniqueInputBuilder
    implements Builder<GAssetWhereUniqueInput, GAssetWhereUniqueInputBuilder> {
  _$GAssetWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GAssetWhereUniqueInputBuilder();

  GAssetWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GAssetWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GAssetWhereUniqueInput;
  }

  @override
  void update(void Function(GAssetWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GAssetWhereUniqueInput build() {
    final _$result = _$v ?? new _$GAssetWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryConnectInput extends GCategoryConnectInput {
  @override
  final GCategoryWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GCategoryConnectInput(
          [void Function(GCategoryConnectInputBuilder)? updates]) =>
      (new GCategoryConnectInputBuilder()..update(updates)).build();

  _$GCategoryConnectInput._({required this.where, this.position}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GCategoryConnectInput', 'where');
  }

  @override
  GCategoryConnectInput rebuild(
          void Function(GCategoryConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryConnectInputBuilder toBuilder() =>
      new GCategoryConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), position.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GCategoryConnectInputBuilder
    implements Builder<GCategoryConnectInput, GCategoryConnectInputBuilder> {
  _$GCategoryConnectInput? _$v;

  GCategoryWhereUniqueInputBuilder? _where;
  GCategoryWhereUniqueInputBuilder get where =>
      _$this._where ??= new GCategoryWhereUniqueInputBuilder();
  set where(GCategoryWhereUniqueInputBuilder? where) => _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GCategoryConnectInputBuilder();

  GCategoryConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryConnectInput;
  }

  @override
  void update(void Function(GCategoryConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryConnectInput build() {
    _$GCategoryConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryCreateInput extends GCategoryCreateInput {
  @override
  final DateTime? createdAt;
  @override
  final DateTime? updatedAt;
  @override
  final String? title;
  @override
  final GAssetCreateOneInlineInput? mainImage;
  @override
  final GCategoryTitle? categoryTitle;
  @override
  final GCategoryFeedItemsCreateManyInlineInput? feedItems;

  factory _$GCategoryCreateInput(
          [void Function(GCategoryCreateInputBuilder)? updates]) =>
      (new GCategoryCreateInputBuilder()..update(updates)).build();

  _$GCategoryCreateInput._(
      {this.createdAt,
      this.updatedAt,
      this.title,
      this.mainImage,
      this.categoryTitle,
      this.feedItems})
      : super._();

  @override
  GCategoryCreateInput rebuild(
          void Function(GCategoryCreateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryCreateInputBuilder toBuilder() =>
      new GCategoryCreateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryCreateInput &&
        createdAt == other.createdAt &&
        updatedAt == other.updatedAt &&
        title == other.title &&
        mainImage == other.mainImage &&
        categoryTitle == other.categoryTitle &&
        feedItems == other.feedItems;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc($jc($jc(0, createdAt.hashCode), updatedAt.hashCode),
                    title.hashCode),
                mainImage.hashCode),
            categoryTitle.hashCode),
        feedItems.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryCreateInput')
          ..add('createdAt', createdAt)
          ..add('updatedAt', updatedAt)
          ..add('title', title)
          ..add('mainImage', mainImage)
          ..add('categoryTitle', categoryTitle)
          ..add('feedItems', feedItems))
        .toString();
  }
}

class GCategoryCreateInputBuilder
    implements Builder<GCategoryCreateInput, GCategoryCreateInputBuilder> {
  _$GCategoryCreateInput? _$v;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GAssetCreateOneInlineInputBuilder? _mainImage;
  GAssetCreateOneInlineInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetCreateOneInlineInputBuilder();
  set mainImage(GAssetCreateOneInlineInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GCategoryTitle? _categoryTitle;
  GCategoryTitle? get categoryTitle => _$this._categoryTitle;
  set categoryTitle(GCategoryTitle? categoryTitle) =>
      _$this._categoryTitle = categoryTitle;

  GCategoryFeedItemsCreateManyInlineInputBuilder? _feedItems;
  GCategoryFeedItemsCreateManyInlineInputBuilder get feedItems =>
      _$this._feedItems ??=
          new GCategoryFeedItemsCreateManyInlineInputBuilder();
  set feedItems(GCategoryFeedItemsCreateManyInlineInputBuilder? feedItems) =>
      _$this._feedItems = feedItems;

  GCategoryCreateInputBuilder();

  GCategoryCreateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _createdAt = $v.createdAt;
      _updatedAt = $v.updatedAt;
      _title = $v.title;
      _mainImage = $v.mainImage?.toBuilder();
      _categoryTitle = $v.categoryTitle;
      _feedItems = $v.feedItems?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryCreateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryCreateInput;
  }

  @override
  void update(void Function(GCategoryCreateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryCreateInput build() {
    _$GCategoryCreateInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryCreateInput._(
              createdAt: createdAt,
              updatedAt: updatedAt,
              title: title,
              mainImage: _mainImage?.build(),
              categoryTitle: categoryTitle,
              feedItems: _feedItems?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'mainImage';
        _mainImage?.build();

        _$failedField = 'feedItems';
        _feedItems?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryCreateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryCreateManyInlineInput extends GCategoryCreateManyInlineInput {
  @override
  final BuiltList<GCategoryCreateInput>? create;
  @override
  final BuiltList<GCategoryWhereUniqueInput>? connect;

  factory _$GCategoryCreateManyInlineInput(
          [void Function(GCategoryCreateManyInlineInputBuilder)? updates]) =>
      (new GCategoryCreateManyInlineInputBuilder()..update(updates)).build();

  _$GCategoryCreateManyInlineInput._({this.create, this.connect}) : super._();

  @override
  GCategoryCreateManyInlineInput rebuild(
          void Function(GCategoryCreateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryCreateManyInlineInputBuilder toBuilder() =>
      new GCategoryCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryCreateManyInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryCreateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GCategoryCreateManyInlineInputBuilder
    implements
        Builder<GCategoryCreateManyInlineInput,
            GCategoryCreateManyInlineInputBuilder> {
  _$GCategoryCreateManyInlineInput? _$v;

  ListBuilder<GCategoryCreateInput>? _create;
  ListBuilder<GCategoryCreateInput> get create =>
      _$this._create ??= new ListBuilder<GCategoryCreateInput>();
  set create(ListBuilder<GCategoryCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GCategoryWhereUniqueInput>? _connect;
  ListBuilder<GCategoryWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GCategoryWhereUniqueInput>();
  set connect(ListBuilder<GCategoryWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GCategoryCreateManyInlineInputBuilder();

  GCategoryCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryCreateManyInlineInput;
  }

  @override
  void update(void Function(GCategoryCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryCreateManyInlineInput build() {
    _$GCategoryCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryCreateManyInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryCreateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryCreateOneInlineInput extends GCategoryCreateOneInlineInput {
  @override
  final GCategoryCreateInput? create;
  @override
  final GCategoryWhereUniqueInput? connect;

  factory _$GCategoryCreateOneInlineInput(
          [void Function(GCategoryCreateOneInlineInputBuilder)? updates]) =>
      (new GCategoryCreateOneInlineInputBuilder()..update(updates)).build();

  _$GCategoryCreateOneInlineInput._({this.create, this.connect}) : super._();

  @override
  GCategoryCreateOneInlineInput rebuild(
          void Function(GCategoryCreateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryCreateOneInlineInputBuilder toBuilder() =>
      new GCategoryCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryCreateOneInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryCreateOneInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GCategoryCreateOneInlineInputBuilder
    implements
        Builder<GCategoryCreateOneInlineInput,
            GCategoryCreateOneInlineInputBuilder> {
  _$GCategoryCreateOneInlineInput? _$v;

  GCategoryCreateInputBuilder? _create;
  GCategoryCreateInputBuilder get create =>
      _$this._create ??= new GCategoryCreateInputBuilder();
  set create(GCategoryCreateInputBuilder? create) => _$this._create = create;

  GCategoryWhereUniqueInputBuilder? _connect;
  GCategoryWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GCategoryWhereUniqueInputBuilder();
  set connect(GCategoryWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GCategoryCreateOneInlineInputBuilder();

  GCategoryCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryCreateOneInlineInput;
  }

  @override
  void update(void Function(GCategoryCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryCreateOneInlineInput build() {
    _$GCategoryCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryCreateOneInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryCreateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsConnectInput extends GCategoryFeedItemsConnectInput {
  @override
  final GFeedItemConnectInput? FeedItem;

  factory _$GCategoryFeedItemsConnectInput(
          [void Function(GCategoryFeedItemsConnectInputBuilder)? updates]) =>
      (new GCategoryFeedItemsConnectInputBuilder()..update(updates)).build();

  _$GCategoryFeedItemsConnectInput._({this.FeedItem}) : super._();

  @override
  GCategoryFeedItemsConnectInput rebuild(
          void Function(GCategoryFeedItemsConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsConnectInputBuilder toBuilder() =>
      new GCategoryFeedItemsConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsConnectInput &&
        FeedItem == other.FeedItem;
  }

  @override
  int get hashCode {
    return $jf($jc(0, FeedItem.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryFeedItemsConnectInput')
          ..add('FeedItem', FeedItem))
        .toString();
  }
}

class GCategoryFeedItemsConnectInputBuilder
    implements
        Builder<GCategoryFeedItemsConnectInput,
            GCategoryFeedItemsConnectInputBuilder> {
  _$GCategoryFeedItemsConnectInput? _$v;

  GFeedItemConnectInputBuilder? _FeedItem;
  GFeedItemConnectInputBuilder get FeedItem =>
      _$this._FeedItem ??= new GFeedItemConnectInputBuilder();
  set FeedItem(GFeedItemConnectInputBuilder? FeedItem) =>
      _$this._FeedItem = FeedItem;

  GCategoryFeedItemsConnectInputBuilder();

  GCategoryFeedItemsConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _FeedItem = $v.FeedItem?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsConnectInput;
  }

  @override
  void update(void Function(GCategoryFeedItemsConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsConnectInput build() {
    _$GCategoryFeedItemsConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsConnectInput._(FeedItem: _FeedItem?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'FeedItem';
        _FeedItem?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsCreateInput extends GCategoryFeedItemsCreateInput {
  @override
  final GFeedItemCreateInput? FeedItem;

  factory _$GCategoryFeedItemsCreateInput(
          [void Function(GCategoryFeedItemsCreateInputBuilder)? updates]) =>
      (new GCategoryFeedItemsCreateInputBuilder()..update(updates)).build();

  _$GCategoryFeedItemsCreateInput._({this.FeedItem}) : super._();

  @override
  GCategoryFeedItemsCreateInput rebuild(
          void Function(GCategoryFeedItemsCreateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsCreateInputBuilder toBuilder() =>
      new GCategoryFeedItemsCreateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsCreateInput && FeedItem == other.FeedItem;
  }

  @override
  int get hashCode {
    return $jf($jc(0, FeedItem.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryFeedItemsCreateInput')
          ..add('FeedItem', FeedItem))
        .toString();
  }
}

class GCategoryFeedItemsCreateInputBuilder
    implements
        Builder<GCategoryFeedItemsCreateInput,
            GCategoryFeedItemsCreateInputBuilder> {
  _$GCategoryFeedItemsCreateInput? _$v;

  GFeedItemCreateInputBuilder? _FeedItem;
  GFeedItemCreateInputBuilder get FeedItem =>
      _$this._FeedItem ??= new GFeedItemCreateInputBuilder();
  set FeedItem(GFeedItemCreateInputBuilder? FeedItem) =>
      _$this._FeedItem = FeedItem;

  GCategoryFeedItemsCreateInputBuilder();

  GCategoryFeedItemsCreateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _FeedItem = $v.FeedItem?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsCreateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsCreateInput;
  }

  @override
  void update(void Function(GCategoryFeedItemsCreateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsCreateInput build() {
    _$GCategoryFeedItemsCreateInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsCreateInput._(FeedItem: _FeedItem?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'FeedItem';
        _FeedItem?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsCreateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsCreateManyInlineInput
    extends GCategoryFeedItemsCreateManyInlineInput {
  @override
  final BuiltList<GCategoryFeedItemsCreateInput>? create;
  @override
  final BuiltList<GCategoryFeedItemsWhereUniqueInput>? connect;

  factory _$GCategoryFeedItemsCreateManyInlineInput(
          [void Function(GCategoryFeedItemsCreateManyInlineInputBuilder)?
              updates]) =>
      (new GCategoryFeedItemsCreateManyInlineInputBuilder()..update(updates))
          .build();

  _$GCategoryFeedItemsCreateManyInlineInput._({this.create, this.connect})
      : super._();

  @override
  GCategoryFeedItemsCreateManyInlineInput rebuild(
          void Function(GCategoryFeedItemsCreateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsCreateManyInlineInputBuilder toBuilder() =>
      new GCategoryFeedItemsCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsCreateManyInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GCategoryFeedItemsCreateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GCategoryFeedItemsCreateManyInlineInputBuilder
    implements
        Builder<GCategoryFeedItemsCreateManyInlineInput,
            GCategoryFeedItemsCreateManyInlineInputBuilder> {
  _$GCategoryFeedItemsCreateManyInlineInput? _$v;

  ListBuilder<GCategoryFeedItemsCreateInput>? _create;
  ListBuilder<GCategoryFeedItemsCreateInput> get create =>
      _$this._create ??= new ListBuilder<GCategoryFeedItemsCreateInput>();
  set create(ListBuilder<GCategoryFeedItemsCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GCategoryFeedItemsWhereUniqueInput>? _connect;
  ListBuilder<GCategoryFeedItemsWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GCategoryFeedItemsWhereUniqueInput>();
  set connect(ListBuilder<GCategoryFeedItemsWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GCategoryFeedItemsCreateManyInlineInputBuilder();

  GCategoryFeedItemsCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsCreateManyInlineInput;
  }

  @override
  void update(
      void Function(GCategoryFeedItemsCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsCreateManyInlineInput build() {
    _$GCategoryFeedItemsCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsCreateManyInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsCreateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsCreateOneInlineInput
    extends GCategoryFeedItemsCreateOneInlineInput {
  @override
  final GCategoryFeedItemsCreateInput? create;
  @override
  final GCategoryFeedItemsWhereUniqueInput? connect;

  factory _$GCategoryFeedItemsCreateOneInlineInput(
          [void Function(GCategoryFeedItemsCreateOneInlineInputBuilder)?
              updates]) =>
      (new GCategoryFeedItemsCreateOneInlineInputBuilder()..update(updates))
          .build();

  _$GCategoryFeedItemsCreateOneInlineInput._({this.create, this.connect})
      : super._();

  @override
  GCategoryFeedItemsCreateOneInlineInput rebuild(
          void Function(GCategoryFeedItemsCreateOneInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsCreateOneInlineInputBuilder toBuilder() =>
      new GCategoryFeedItemsCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsCreateOneInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GCategoryFeedItemsCreateOneInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GCategoryFeedItemsCreateOneInlineInputBuilder
    implements
        Builder<GCategoryFeedItemsCreateOneInlineInput,
            GCategoryFeedItemsCreateOneInlineInputBuilder> {
  _$GCategoryFeedItemsCreateOneInlineInput? _$v;

  GCategoryFeedItemsCreateInputBuilder? _create;
  GCategoryFeedItemsCreateInputBuilder get create =>
      _$this._create ??= new GCategoryFeedItemsCreateInputBuilder();
  set create(GCategoryFeedItemsCreateInputBuilder? create) =>
      _$this._create = create;

  GCategoryFeedItemsWhereUniqueInputBuilder? _connect;
  GCategoryFeedItemsWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GCategoryFeedItemsWhereUniqueInputBuilder();
  set connect(GCategoryFeedItemsWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GCategoryFeedItemsCreateOneInlineInputBuilder();

  GCategoryFeedItemsCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsCreateOneInlineInput;
  }

  @override
  void update(
      void Function(GCategoryFeedItemsCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsCreateOneInlineInput build() {
    _$GCategoryFeedItemsCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsCreateOneInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsCreateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsUpdateInput extends GCategoryFeedItemsUpdateInput {
  @override
  final GFeedItemUpdateInput? FeedItem;

  factory _$GCategoryFeedItemsUpdateInput(
          [void Function(GCategoryFeedItemsUpdateInputBuilder)? updates]) =>
      (new GCategoryFeedItemsUpdateInputBuilder()..update(updates)).build();

  _$GCategoryFeedItemsUpdateInput._({this.FeedItem}) : super._();

  @override
  GCategoryFeedItemsUpdateInput rebuild(
          void Function(GCategoryFeedItemsUpdateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsUpdateInputBuilder toBuilder() =>
      new GCategoryFeedItemsUpdateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsUpdateInput && FeedItem == other.FeedItem;
  }

  @override
  int get hashCode {
    return $jf($jc(0, FeedItem.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryFeedItemsUpdateInput')
          ..add('FeedItem', FeedItem))
        .toString();
  }
}

class GCategoryFeedItemsUpdateInputBuilder
    implements
        Builder<GCategoryFeedItemsUpdateInput,
            GCategoryFeedItemsUpdateInputBuilder> {
  _$GCategoryFeedItemsUpdateInput? _$v;

  GFeedItemUpdateInputBuilder? _FeedItem;
  GFeedItemUpdateInputBuilder get FeedItem =>
      _$this._FeedItem ??= new GFeedItemUpdateInputBuilder();
  set FeedItem(GFeedItemUpdateInputBuilder? FeedItem) =>
      _$this._FeedItem = FeedItem;

  GCategoryFeedItemsUpdateInputBuilder();

  GCategoryFeedItemsUpdateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _FeedItem = $v.FeedItem?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsUpdateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsUpdateInput;
  }

  @override
  void update(void Function(GCategoryFeedItemsUpdateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsUpdateInput build() {
    _$GCategoryFeedItemsUpdateInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsUpdateInput._(FeedItem: _FeedItem?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'FeedItem';
        _FeedItem?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsUpdateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsUpdateManyInlineInput
    extends GCategoryFeedItemsUpdateManyInlineInput {
  @override
  final BuiltList<GCategoryFeedItemsCreateInput>? create;
  @override
  final BuiltList<GCategoryFeedItemsConnectInput>? connect;
  @override
  final BuiltList<GCategoryFeedItemsWhereUniqueInput>? set;
  @override
  final BuiltList<GCategoryFeedItemsUpdateWithNestedWhereUniqueInput>? updateIt;
  @override
  final BuiltList<GCategoryFeedItemsUpsertWithNestedWhereUniqueInput>? upsert;
  @override
  final BuiltList<GCategoryFeedItemsWhereUniqueInput>? disconnect;
  @override
  final BuiltList<GCategoryFeedItemsWhereUniqueInput>? delete;

  factory _$GCategoryFeedItemsUpdateManyInlineInput(
          [void Function(GCategoryFeedItemsUpdateManyInlineInputBuilder)?
              updates]) =>
      (new GCategoryFeedItemsUpdateManyInlineInputBuilder()..update(updates))
          .build();

  _$GCategoryFeedItemsUpdateManyInlineInput._(
      {this.create,
      this.connect,
      this.set,
      this.updateIt,
      this.upsert,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GCategoryFeedItemsUpdateManyInlineInput rebuild(
          void Function(GCategoryFeedItemsUpdateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsUpdateManyInlineInputBuilder toBuilder() =>
      new GCategoryFeedItemsUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsUpdateManyInlineInput &&
        create == other.create &&
        connect == other.connect &&
        set == other.set &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, create.hashCode), connect.hashCode),
                        set.hashCode),
                    updateIt.hashCode),
                upsert.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GCategoryFeedItemsUpdateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect)
          ..add('set', set)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GCategoryFeedItemsUpdateManyInlineInputBuilder
    implements
        Builder<GCategoryFeedItemsUpdateManyInlineInput,
            GCategoryFeedItemsUpdateManyInlineInputBuilder> {
  _$GCategoryFeedItemsUpdateManyInlineInput? _$v;

  ListBuilder<GCategoryFeedItemsCreateInput>? _create;
  ListBuilder<GCategoryFeedItemsCreateInput> get create =>
      _$this._create ??= new ListBuilder<GCategoryFeedItemsCreateInput>();
  set create(ListBuilder<GCategoryFeedItemsCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GCategoryFeedItemsConnectInput>? _connect;
  ListBuilder<GCategoryFeedItemsConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GCategoryFeedItemsConnectInput>();
  set connect(ListBuilder<GCategoryFeedItemsConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GCategoryFeedItemsWhereUniqueInput>? _set;
  ListBuilder<GCategoryFeedItemsWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GCategoryFeedItemsWhereUniqueInput>();
  set set(ListBuilder<GCategoryFeedItemsWhereUniqueInput>? set) =>
      _$this._set = set;

  ListBuilder<GCategoryFeedItemsUpdateWithNestedWhereUniqueInput>? _updateIt;
  ListBuilder<GCategoryFeedItemsUpdateWithNestedWhereUniqueInput>
      get updateIt => _$this._updateIt ??=
          new ListBuilder<GCategoryFeedItemsUpdateWithNestedWhereUniqueInput>();
  set updateIt(
          ListBuilder<GCategoryFeedItemsUpdateWithNestedWhereUniqueInput>?
              updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GCategoryFeedItemsUpsertWithNestedWhereUniqueInput>? _upsert;
  ListBuilder<GCategoryFeedItemsUpsertWithNestedWhereUniqueInput> get upsert =>
      _$this._upsert ??=
          new ListBuilder<GCategoryFeedItemsUpsertWithNestedWhereUniqueInput>();
  set upsert(
          ListBuilder<GCategoryFeedItemsUpsertWithNestedWhereUniqueInput>?
              upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GCategoryFeedItemsWhereUniqueInput>? _disconnect;
  ListBuilder<GCategoryFeedItemsWhereUniqueInput> get disconnect =>
      _$this._disconnect ??=
          new ListBuilder<GCategoryFeedItemsWhereUniqueInput>();
  set disconnect(ListBuilder<GCategoryFeedItemsWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  ListBuilder<GCategoryFeedItemsWhereUniqueInput>? _delete;
  ListBuilder<GCategoryFeedItemsWhereUniqueInput> get delete =>
      _$this._delete ??= new ListBuilder<GCategoryFeedItemsWhereUniqueInput>();
  set delete(ListBuilder<GCategoryFeedItemsWhereUniqueInput>? delete) =>
      _$this._delete = delete;

  GCategoryFeedItemsUpdateManyInlineInputBuilder();

  GCategoryFeedItemsUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsUpdateManyInlineInput;
  }

  @override
  void update(
      void Function(GCategoryFeedItemsUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsUpdateManyInlineInput build() {
    _$GCategoryFeedItemsUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsUpdateManyInlineInput._(
              create: _create?.build(),
              connect: _connect?.build(),
              set: _set?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              disconnect: _disconnect?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsUpdateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsUpdateManyWithNestedWhereInput
    extends GCategoryFeedItemsUpdateManyWithNestedWhereInput {
  @override
  final GFeedItemUpdateManyWithNestedWhereInput? FeedItem;

  factory _$GCategoryFeedItemsUpdateManyWithNestedWhereInput(
          [void Function(
                  GCategoryFeedItemsUpdateManyWithNestedWhereInputBuilder)?
              updates]) =>
      (new GCategoryFeedItemsUpdateManyWithNestedWhereInputBuilder()
            ..update(updates))
          .build();

  _$GCategoryFeedItemsUpdateManyWithNestedWhereInput._({this.FeedItem})
      : super._();

  @override
  GCategoryFeedItemsUpdateManyWithNestedWhereInput rebuild(
          void Function(GCategoryFeedItemsUpdateManyWithNestedWhereInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsUpdateManyWithNestedWhereInputBuilder toBuilder() =>
      new GCategoryFeedItemsUpdateManyWithNestedWhereInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsUpdateManyWithNestedWhereInput &&
        FeedItem == other.FeedItem;
  }

  @override
  int get hashCode {
    return $jf($jc(0, FeedItem.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GCategoryFeedItemsUpdateManyWithNestedWhereInput')
          ..add('FeedItem', FeedItem))
        .toString();
  }
}

class GCategoryFeedItemsUpdateManyWithNestedWhereInputBuilder
    implements
        Builder<GCategoryFeedItemsUpdateManyWithNestedWhereInput,
            GCategoryFeedItemsUpdateManyWithNestedWhereInputBuilder> {
  _$GCategoryFeedItemsUpdateManyWithNestedWhereInput? _$v;

  GFeedItemUpdateManyWithNestedWhereInputBuilder? _FeedItem;
  GFeedItemUpdateManyWithNestedWhereInputBuilder get FeedItem =>
      _$this._FeedItem ??= new GFeedItemUpdateManyWithNestedWhereInputBuilder();
  set FeedItem(GFeedItemUpdateManyWithNestedWhereInputBuilder? FeedItem) =>
      _$this._FeedItem = FeedItem;

  GCategoryFeedItemsUpdateManyWithNestedWhereInputBuilder();

  GCategoryFeedItemsUpdateManyWithNestedWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _FeedItem = $v.FeedItem?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsUpdateManyWithNestedWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsUpdateManyWithNestedWhereInput;
  }

  @override
  void update(
      void Function(GCategoryFeedItemsUpdateManyWithNestedWhereInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsUpdateManyWithNestedWhereInput build() {
    _$GCategoryFeedItemsUpdateManyWithNestedWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsUpdateManyWithNestedWhereInput._(
              FeedItem: _FeedItem?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'FeedItem';
        _FeedItem?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsUpdateManyWithNestedWhereInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsUpdateOneInlineInput
    extends GCategoryFeedItemsUpdateOneInlineInput {
  @override
  final GCategoryFeedItemsCreateInput? create;
  @override
  final GCategoryFeedItemsUpdateWithNestedWhereUniqueInput? updateIt;
  @override
  final GCategoryFeedItemsUpsertWithNestedWhereUniqueInput? upsert;
  @override
  final GCategoryFeedItemsWhereUniqueInput? connect;
  @override
  final bool? disconnect;
  @override
  final bool? delete;

  factory _$GCategoryFeedItemsUpdateOneInlineInput(
          [void Function(GCategoryFeedItemsUpdateOneInlineInputBuilder)?
              updates]) =>
      (new GCategoryFeedItemsUpdateOneInlineInputBuilder()..update(updates))
          .build();

  _$GCategoryFeedItemsUpdateOneInlineInput._(
      {this.create,
      this.updateIt,
      this.upsert,
      this.connect,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GCategoryFeedItemsUpdateOneInlineInput rebuild(
          void Function(GCategoryFeedItemsUpdateOneInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsUpdateOneInlineInputBuilder toBuilder() =>
      new GCategoryFeedItemsUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsUpdateOneInlineInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        connect == other.connect &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc($jc($jc(0, create.hashCode), updateIt.hashCode),
                    upsert.hashCode),
                connect.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GCategoryFeedItemsUpdateOneInlineInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('connect', connect)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GCategoryFeedItemsUpdateOneInlineInputBuilder
    implements
        Builder<GCategoryFeedItemsUpdateOneInlineInput,
            GCategoryFeedItemsUpdateOneInlineInputBuilder> {
  _$GCategoryFeedItemsUpdateOneInlineInput? _$v;

  GCategoryFeedItemsCreateInputBuilder? _create;
  GCategoryFeedItemsCreateInputBuilder get create =>
      _$this._create ??= new GCategoryFeedItemsCreateInputBuilder();
  set create(GCategoryFeedItemsCreateInputBuilder? create) =>
      _$this._create = create;

  GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder? _updateIt;
  GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder get updateIt =>
      _$this._updateIt ??=
          new GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder();
  set updateIt(
          GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder?
              updateIt) =>
      _$this._updateIt = updateIt;

  GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder? _upsert;
  GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder get upsert =>
      _$this._upsert ??=
          new GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder();
  set upsert(
          GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder? upsert) =>
      _$this._upsert = upsert;

  GCategoryFeedItemsWhereUniqueInputBuilder? _connect;
  GCategoryFeedItemsWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GCategoryFeedItemsWhereUniqueInputBuilder();
  set connect(GCategoryFeedItemsWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  bool? _delete;
  bool? get delete => _$this._delete;
  set delete(bool? delete) => _$this._delete = delete;

  GCategoryFeedItemsUpdateOneInlineInputBuilder();

  GCategoryFeedItemsUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _delete = $v.delete;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsUpdateOneInlineInput;
  }

  @override
  void update(
      void Function(GCategoryFeedItemsUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsUpdateOneInlineInput build() {
    _$GCategoryFeedItemsUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsUpdateOneInlineInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              connect: _connect?.build(),
              disconnect: disconnect,
              delete: delete);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsUpdateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsUpdateWithNestedWhereUniqueInput
    extends GCategoryFeedItemsUpdateWithNestedWhereUniqueInput {
  @override
  final GFeedItemUpdateWithNestedWhereUniqueInput? FeedItem;

  factory _$GCategoryFeedItemsUpdateWithNestedWhereUniqueInput(
          [void Function(
                  GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder()
            ..update(updates))
          .build();

  _$GCategoryFeedItemsUpdateWithNestedWhereUniqueInput._({this.FeedItem})
      : super._();

  @override
  GCategoryFeedItemsUpdateWithNestedWhereUniqueInput rebuild(
          void Function(
                  GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsUpdateWithNestedWhereUniqueInput &&
        FeedItem == other.FeedItem;
  }

  @override
  int get hashCode {
    return $jf($jc(0, FeedItem.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GCategoryFeedItemsUpdateWithNestedWhereUniqueInput')
          ..add('FeedItem', FeedItem))
        .toString();
  }
}

class GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder
    implements
        Builder<GCategoryFeedItemsUpdateWithNestedWhereUniqueInput,
            GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder> {
  _$GCategoryFeedItemsUpdateWithNestedWhereUniqueInput? _$v;

  GFeedItemUpdateWithNestedWhereUniqueInputBuilder? _FeedItem;
  GFeedItemUpdateWithNestedWhereUniqueInputBuilder get FeedItem =>
      _$this._FeedItem ??=
          new GFeedItemUpdateWithNestedWhereUniqueInputBuilder();
  set FeedItem(GFeedItemUpdateWithNestedWhereUniqueInputBuilder? FeedItem) =>
      _$this._FeedItem = FeedItem;

  GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder();

  GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _FeedItem = $v.FeedItem?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsUpdateWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsUpdateWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GCategoryFeedItemsUpdateWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsUpdateWithNestedWhereUniqueInput build() {
    _$GCategoryFeedItemsUpdateWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsUpdateWithNestedWhereUniqueInput._(
              FeedItem: _FeedItem?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'FeedItem';
        _FeedItem?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsUpdateWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsUpsertWithNestedWhereUniqueInput
    extends GCategoryFeedItemsUpsertWithNestedWhereUniqueInput {
  @override
  final GFeedItemUpsertWithNestedWhereUniqueInput? FeedItem;

  factory _$GCategoryFeedItemsUpsertWithNestedWhereUniqueInput(
          [void Function(
                  GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder()
            ..update(updates))
          .build();

  _$GCategoryFeedItemsUpsertWithNestedWhereUniqueInput._({this.FeedItem})
      : super._();

  @override
  GCategoryFeedItemsUpsertWithNestedWhereUniqueInput rebuild(
          void Function(
                  GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsUpsertWithNestedWhereUniqueInput &&
        FeedItem == other.FeedItem;
  }

  @override
  int get hashCode {
    return $jf($jc(0, FeedItem.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GCategoryFeedItemsUpsertWithNestedWhereUniqueInput')
          ..add('FeedItem', FeedItem))
        .toString();
  }
}

class GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder
    implements
        Builder<GCategoryFeedItemsUpsertWithNestedWhereUniqueInput,
            GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder> {
  _$GCategoryFeedItemsUpsertWithNestedWhereUniqueInput? _$v;

  GFeedItemUpsertWithNestedWhereUniqueInputBuilder? _FeedItem;
  GFeedItemUpsertWithNestedWhereUniqueInputBuilder get FeedItem =>
      _$this._FeedItem ??=
          new GFeedItemUpsertWithNestedWhereUniqueInputBuilder();
  set FeedItem(GFeedItemUpsertWithNestedWhereUniqueInputBuilder? FeedItem) =>
      _$this._FeedItem = FeedItem;

  GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder();

  GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _FeedItem = $v.FeedItem?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsUpsertWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsUpsertWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GCategoryFeedItemsUpsertWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsUpsertWithNestedWhereUniqueInput build() {
    _$GCategoryFeedItemsUpsertWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsUpsertWithNestedWhereUniqueInput._(
              FeedItem: _FeedItem?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'FeedItem';
        _FeedItem?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsUpsertWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsWhereInput extends GCategoryFeedItemsWhereInput {
  @override
  final GFeedItemWhereInput? FeedItem;

  factory _$GCategoryFeedItemsWhereInput(
          [void Function(GCategoryFeedItemsWhereInputBuilder)? updates]) =>
      (new GCategoryFeedItemsWhereInputBuilder()..update(updates)).build();

  _$GCategoryFeedItemsWhereInput._({this.FeedItem}) : super._();

  @override
  GCategoryFeedItemsWhereInput rebuild(
          void Function(GCategoryFeedItemsWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsWhereInputBuilder toBuilder() =>
      new GCategoryFeedItemsWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsWhereInput && FeedItem == other.FeedItem;
  }

  @override
  int get hashCode {
    return $jf($jc(0, FeedItem.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryFeedItemsWhereInput')
          ..add('FeedItem', FeedItem))
        .toString();
  }
}

class GCategoryFeedItemsWhereInputBuilder
    implements
        Builder<GCategoryFeedItemsWhereInput,
            GCategoryFeedItemsWhereInputBuilder> {
  _$GCategoryFeedItemsWhereInput? _$v;

  GFeedItemWhereInputBuilder? _FeedItem;
  GFeedItemWhereInputBuilder get FeedItem =>
      _$this._FeedItem ??= new GFeedItemWhereInputBuilder();
  set FeedItem(GFeedItemWhereInputBuilder? FeedItem) =>
      _$this._FeedItem = FeedItem;

  GCategoryFeedItemsWhereInputBuilder();

  GCategoryFeedItemsWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _FeedItem = $v.FeedItem?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsWhereInput;
  }

  @override
  void update(void Function(GCategoryFeedItemsWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsWhereInput build() {
    _$GCategoryFeedItemsWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsWhereInput._(FeedItem: _FeedItem?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'FeedItem';
        _FeedItem?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryFeedItemsWhereUniqueInput
    extends GCategoryFeedItemsWhereUniqueInput {
  @override
  final GFeedItemWhereUniqueInput? FeedItem;

  factory _$GCategoryFeedItemsWhereUniqueInput(
          [void Function(GCategoryFeedItemsWhereUniqueInputBuilder)?
              updates]) =>
      (new GCategoryFeedItemsWhereUniqueInputBuilder()..update(updates))
          .build();

  _$GCategoryFeedItemsWhereUniqueInput._({this.FeedItem}) : super._();

  @override
  GCategoryFeedItemsWhereUniqueInput rebuild(
          void Function(GCategoryFeedItemsWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryFeedItemsWhereUniqueInputBuilder toBuilder() =>
      new GCategoryFeedItemsWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryFeedItemsWhereUniqueInput &&
        FeedItem == other.FeedItem;
  }

  @override
  int get hashCode {
    return $jf($jc(0, FeedItem.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryFeedItemsWhereUniqueInput')
          ..add('FeedItem', FeedItem))
        .toString();
  }
}

class GCategoryFeedItemsWhereUniqueInputBuilder
    implements
        Builder<GCategoryFeedItemsWhereUniqueInput,
            GCategoryFeedItemsWhereUniqueInputBuilder> {
  _$GCategoryFeedItemsWhereUniqueInput? _$v;

  GFeedItemWhereUniqueInputBuilder? _FeedItem;
  GFeedItemWhereUniqueInputBuilder get FeedItem =>
      _$this._FeedItem ??= new GFeedItemWhereUniqueInputBuilder();
  set FeedItem(GFeedItemWhereUniqueInputBuilder? FeedItem) =>
      _$this._FeedItem = FeedItem;

  GCategoryFeedItemsWhereUniqueInputBuilder();

  GCategoryFeedItemsWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _FeedItem = $v.FeedItem?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryFeedItemsWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryFeedItemsWhereUniqueInput;
  }

  @override
  void update(
      void Function(GCategoryFeedItemsWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryFeedItemsWhereUniqueInput build() {
    _$GCategoryFeedItemsWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryFeedItemsWhereUniqueInput._(
              FeedItem: _FeedItem?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'FeedItem';
        _FeedItem?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryFeedItemsWhereUniqueInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryManyWhereInput extends GCategoryManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GCategoryWhereInput>? AND;
  @override
  final BuiltList<GCategoryWhereInput>? OR;
  @override
  final BuiltList<GCategoryWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String>? title_in;
  @override
  final BuiltList<String>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GAssetWhereInput? mainImage;
  @override
  final GCategoryTitle? categoryTitle;
  @override
  final GCategoryTitle? categoryTitle_not;
  @override
  final BuiltList<GCategoryTitle>? categoryTitle_in;
  @override
  final BuiltList<GCategoryTitle>? categoryTitle_not_in;

  factory _$GCategoryManyWhereInput(
          [void Function(GCategoryManyWhereInputBuilder)? updates]) =>
      (new GCategoryManyWhereInputBuilder()..update(updates)).build();

  _$GCategoryManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.createdBy,
      this.updatedBy,
      this.publishedBy,
      this.mainImage,
      this.categoryTitle,
      this.categoryTitle_not,
      this.categoryTitle_in,
      this.categoryTitle_not_in})
      : super._();

  @override
  GCategoryManyWhereInput rebuild(
          void Function(GCategoryManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryManyWhereInputBuilder toBuilder() =>
      new GCategoryManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        createdBy == other.createdBy &&
        updatedBy == other.updatedBy &&
        publishedBy == other.publishedBy &&
        mainImage == other.mainImage &&
        categoryTitle == other.categoryTitle &&
        categoryTitle_not == other.categoryTitle_not &&
        categoryTitle_in == other.categoryTitle_in &&
        categoryTitle_not_in == other.categoryTitle_not_in;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode), publishedAt_lt.hashCode), publishedAt_lte.hashCode), publishedAt_gt.hashCode),
                                                                                publishedAt_gte.hashCode),
                                                                            title.hashCode),
                                                                        title_not.hashCode),
                                                                    title_in.hashCode),
                                                                title_not_in.hashCode),
                                                            title_contains.hashCode),
                                                        title_not_contains.hashCode),
                                                    title_starts_with.hashCode),
                                                title_not_starts_with.hashCode),
                                            title_ends_with.hashCode),
                                        title_not_ends_with.hashCode),
                                    createdBy.hashCode),
                                updatedBy.hashCode),
                            publishedBy.hashCode),
                        mainImage.hashCode),
                    categoryTitle.hashCode),
                categoryTitle_not.hashCode),
            categoryTitle_in.hashCode),
        categoryTitle_not_in.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('createdBy', createdBy)
          ..add('updatedBy', updatedBy)
          ..add('publishedBy', publishedBy)
          ..add('mainImage', mainImage)
          ..add('categoryTitle', categoryTitle)
          ..add('categoryTitle_not', categoryTitle_not)
          ..add('categoryTitle_in', categoryTitle_in)
          ..add('categoryTitle_not_in', categoryTitle_not_in))
        .toString();
  }
}

class GCategoryManyWhereInputBuilder
    implements
        Builder<GCategoryManyWhereInput, GCategoryManyWhereInputBuilder> {
  _$GCategoryManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GCategoryWhereInput>? _AND;
  ListBuilder<GCategoryWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GCategoryWhereInput>();
  set AND(ListBuilder<GCategoryWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GCategoryWhereInput>? _OR;
  ListBuilder<GCategoryWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GCategoryWhereInput>();
  set OR(ListBuilder<GCategoryWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GCategoryWhereInput>? _NOT;
  ListBuilder<GCategoryWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GCategoryWhereInput>();
  set NOT(ListBuilder<GCategoryWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String>? _title_in;
  ListBuilder<String> get title_in =>
      _$this._title_in ??= new ListBuilder<String>();
  set title_in(ListBuilder<String>? title_in) => _$this._title_in = title_in;

  ListBuilder<String>? _title_not_in;
  ListBuilder<String> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String>();
  set title_not_in(ListBuilder<String>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GAssetWhereInputBuilder? _mainImage;
  GAssetWhereInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetWhereInputBuilder();
  set mainImage(GAssetWhereInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GCategoryTitle? _categoryTitle;
  GCategoryTitle? get categoryTitle => _$this._categoryTitle;
  set categoryTitle(GCategoryTitle? categoryTitle) =>
      _$this._categoryTitle = categoryTitle;

  GCategoryTitle? _categoryTitle_not;
  GCategoryTitle? get categoryTitle_not => _$this._categoryTitle_not;
  set categoryTitle_not(GCategoryTitle? categoryTitle_not) =>
      _$this._categoryTitle_not = categoryTitle_not;

  ListBuilder<GCategoryTitle>? _categoryTitle_in;
  ListBuilder<GCategoryTitle> get categoryTitle_in =>
      _$this._categoryTitle_in ??= new ListBuilder<GCategoryTitle>();
  set categoryTitle_in(ListBuilder<GCategoryTitle>? categoryTitle_in) =>
      _$this._categoryTitle_in = categoryTitle_in;

  ListBuilder<GCategoryTitle>? _categoryTitle_not_in;
  ListBuilder<GCategoryTitle> get categoryTitle_not_in =>
      _$this._categoryTitle_not_in ??= new ListBuilder<GCategoryTitle>();
  set categoryTitle_not_in(ListBuilder<GCategoryTitle>? categoryTitle_not_in) =>
      _$this._categoryTitle_not_in = categoryTitle_not_in;

  GCategoryManyWhereInputBuilder();

  GCategoryManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _createdBy = $v.createdBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _mainImage = $v.mainImage?.toBuilder();
      _categoryTitle = $v.categoryTitle;
      _categoryTitle_not = $v.categoryTitle_not;
      _categoryTitle_in = $v.categoryTitle_in?.toBuilder();
      _categoryTitle_not_in = $v.categoryTitle_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryManyWhereInput;
  }

  @override
  void update(void Function(GCategoryManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryManyWhereInput build() {
    _$GCategoryManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              createdBy: _createdBy?.build(),
              updatedBy: _updatedBy?.build(),
              publishedBy: _publishedBy?.build(),
              mainImage: _mainImage?.build(),
              categoryTitle: categoryTitle,
              categoryTitle_not: categoryTitle_not,
              categoryTitle_in: _categoryTitle_in?.build(),
              categoryTitle_not_in: _categoryTitle_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'mainImage';
        _mainImage?.build();

        _$failedField = 'categoryTitle_in';
        _categoryTitle_in?.build();
        _$failedField = 'categoryTitle_not_in';
        _categoryTitle_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateInput extends GCategoryUpdateInput {
  @override
  final String? title;
  @override
  final GAssetUpdateOneInlineInput? mainImage;
  @override
  final GCategoryTitle? categoryTitle;
  @override
  final GCategoryFeedItemsUpdateManyInlineInput? feedItems;

  factory _$GCategoryUpdateInput(
          [void Function(GCategoryUpdateInputBuilder)? updates]) =>
      (new GCategoryUpdateInputBuilder()..update(updates)).build();

  _$GCategoryUpdateInput._(
      {this.title, this.mainImage, this.categoryTitle, this.feedItems})
      : super._();

  @override
  GCategoryUpdateInput rebuild(
          void Function(GCategoryUpdateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateInputBuilder toBuilder() =>
      new GCategoryUpdateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateInput &&
        title == other.title &&
        mainImage == other.mainImage &&
        categoryTitle == other.categoryTitle &&
        feedItems == other.feedItems;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, title.hashCode), mainImage.hashCode),
            categoryTitle.hashCode),
        feedItems.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryUpdateInput')
          ..add('title', title)
          ..add('mainImage', mainImage)
          ..add('categoryTitle', categoryTitle)
          ..add('feedItems', feedItems))
        .toString();
  }
}

class GCategoryUpdateInputBuilder
    implements Builder<GCategoryUpdateInput, GCategoryUpdateInputBuilder> {
  _$GCategoryUpdateInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GAssetUpdateOneInlineInputBuilder? _mainImage;
  GAssetUpdateOneInlineInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetUpdateOneInlineInputBuilder();
  set mainImage(GAssetUpdateOneInlineInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GCategoryTitle? _categoryTitle;
  GCategoryTitle? get categoryTitle => _$this._categoryTitle;
  set categoryTitle(GCategoryTitle? categoryTitle) =>
      _$this._categoryTitle = categoryTitle;

  GCategoryFeedItemsUpdateManyInlineInputBuilder? _feedItems;
  GCategoryFeedItemsUpdateManyInlineInputBuilder get feedItems =>
      _$this._feedItems ??=
          new GCategoryFeedItemsUpdateManyInlineInputBuilder();
  set feedItems(GCategoryFeedItemsUpdateManyInlineInputBuilder? feedItems) =>
      _$this._feedItems = feedItems;

  GCategoryUpdateInputBuilder();

  GCategoryUpdateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _mainImage = $v.mainImage?.toBuilder();
      _categoryTitle = $v.categoryTitle;
      _feedItems = $v.feedItems?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateInput;
  }

  @override
  void update(void Function(GCategoryUpdateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryUpdateInput build() {
    _$GCategoryUpdateInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpdateInput._(
              title: title,
              mainImage: _mainImage?.build(),
              categoryTitle: categoryTitle,
              feedItems: _feedItems?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'mainImage';
        _mainImage?.build();

        _$failedField = 'feedItems';
        _feedItems?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryUpdateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateManyInlineInput extends GCategoryUpdateManyInlineInput {
  @override
  final BuiltList<GCategoryCreateInput>? create;
  @override
  final BuiltList<GCategoryConnectInput>? connect;
  @override
  final BuiltList<GCategoryWhereUniqueInput>? set;
  @override
  final BuiltList<GCategoryUpdateWithNestedWhereUniqueInput>? updateIt;
  @override
  final BuiltList<GCategoryUpsertWithNestedWhereUniqueInput>? upsert;
  @override
  final BuiltList<GCategoryWhereUniqueInput>? disconnect;
  @override
  final BuiltList<GCategoryWhereUniqueInput>? delete;

  factory _$GCategoryUpdateManyInlineInput(
          [void Function(GCategoryUpdateManyInlineInputBuilder)? updates]) =>
      (new GCategoryUpdateManyInlineInputBuilder()..update(updates)).build();

  _$GCategoryUpdateManyInlineInput._(
      {this.create,
      this.connect,
      this.set,
      this.updateIt,
      this.upsert,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GCategoryUpdateManyInlineInput rebuild(
          void Function(GCategoryUpdateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateManyInlineInputBuilder toBuilder() =>
      new GCategoryUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateManyInlineInput &&
        create == other.create &&
        connect == other.connect &&
        set == other.set &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, create.hashCode), connect.hashCode),
                        set.hashCode),
                    updateIt.hashCode),
                upsert.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryUpdateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect)
          ..add('set', set)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GCategoryUpdateManyInlineInputBuilder
    implements
        Builder<GCategoryUpdateManyInlineInput,
            GCategoryUpdateManyInlineInputBuilder> {
  _$GCategoryUpdateManyInlineInput? _$v;

  ListBuilder<GCategoryCreateInput>? _create;
  ListBuilder<GCategoryCreateInput> get create =>
      _$this._create ??= new ListBuilder<GCategoryCreateInput>();
  set create(ListBuilder<GCategoryCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GCategoryConnectInput>? _connect;
  ListBuilder<GCategoryConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GCategoryConnectInput>();
  set connect(ListBuilder<GCategoryConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GCategoryWhereUniqueInput>? _set;
  ListBuilder<GCategoryWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GCategoryWhereUniqueInput>();
  set set(ListBuilder<GCategoryWhereUniqueInput>? set) => _$this._set = set;

  ListBuilder<GCategoryUpdateWithNestedWhereUniqueInput>? _updateIt;
  ListBuilder<GCategoryUpdateWithNestedWhereUniqueInput> get updateIt =>
      _$this._updateIt ??=
          new ListBuilder<GCategoryUpdateWithNestedWhereUniqueInput>();
  set updateIt(
          ListBuilder<GCategoryUpdateWithNestedWhereUniqueInput>? updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GCategoryUpsertWithNestedWhereUniqueInput>? _upsert;
  ListBuilder<GCategoryUpsertWithNestedWhereUniqueInput> get upsert =>
      _$this._upsert ??=
          new ListBuilder<GCategoryUpsertWithNestedWhereUniqueInput>();
  set upsert(ListBuilder<GCategoryUpsertWithNestedWhereUniqueInput>? upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GCategoryWhereUniqueInput>? _disconnect;
  ListBuilder<GCategoryWhereUniqueInput> get disconnect =>
      _$this._disconnect ??= new ListBuilder<GCategoryWhereUniqueInput>();
  set disconnect(ListBuilder<GCategoryWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  ListBuilder<GCategoryWhereUniqueInput>? _delete;
  ListBuilder<GCategoryWhereUniqueInput> get delete =>
      _$this._delete ??= new ListBuilder<GCategoryWhereUniqueInput>();
  set delete(ListBuilder<GCategoryWhereUniqueInput>? delete) =>
      _$this._delete = delete;

  GCategoryUpdateManyInlineInputBuilder();

  GCategoryUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateManyInlineInput;
  }

  @override
  void update(void Function(GCategoryUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryUpdateManyInlineInput build() {
    _$GCategoryUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpdateManyInlineInput._(
              create: _create?.build(),
              connect: _connect?.build(),
              set: _set?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              disconnect: _disconnect?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryUpdateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateManyInput extends GCategoryUpdateManyInput {
  @override
  final String? title;
  @override
  final GCategoryTitle? categoryTitle;

  factory _$GCategoryUpdateManyInput(
          [void Function(GCategoryUpdateManyInputBuilder)? updates]) =>
      (new GCategoryUpdateManyInputBuilder()..update(updates)).build();

  _$GCategoryUpdateManyInput._({this.title, this.categoryTitle}) : super._();

  @override
  GCategoryUpdateManyInput rebuild(
          void Function(GCategoryUpdateManyInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateManyInputBuilder toBuilder() =>
      new GCategoryUpdateManyInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateManyInput &&
        title == other.title &&
        categoryTitle == other.categoryTitle;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, title.hashCode), categoryTitle.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryUpdateManyInput')
          ..add('title', title)
          ..add('categoryTitle', categoryTitle))
        .toString();
  }
}

class GCategoryUpdateManyInputBuilder
    implements
        Builder<GCategoryUpdateManyInput, GCategoryUpdateManyInputBuilder> {
  _$GCategoryUpdateManyInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GCategoryTitle? _categoryTitle;
  GCategoryTitle? get categoryTitle => _$this._categoryTitle;
  set categoryTitle(GCategoryTitle? categoryTitle) =>
      _$this._categoryTitle = categoryTitle;

  GCategoryUpdateManyInputBuilder();

  GCategoryUpdateManyInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _categoryTitle = $v.categoryTitle;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateManyInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateManyInput;
  }

  @override
  void update(void Function(GCategoryUpdateManyInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryUpdateManyInput build() {
    final _$result = _$v ??
        new _$GCategoryUpdateManyInput._(
            title: title, categoryTitle: categoryTitle);
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateManyWithNestedWhereInput
    extends GCategoryUpdateManyWithNestedWhereInput {
  @override
  final GCategoryWhereInput where;
  @override
  final GCategoryUpdateManyInput data;

  factory _$GCategoryUpdateManyWithNestedWhereInput(
          [void Function(GCategoryUpdateManyWithNestedWhereInputBuilder)?
              updates]) =>
      (new GCategoryUpdateManyWithNestedWhereInputBuilder()..update(updates))
          .build();

  _$GCategoryUpdateManyWithNestedWhereInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GCategoryUpdateManyWithNestedWhereInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GCategoryUpdateManyWithNestedWhereInput', 'data');
  }

  @override
  GCategoryUpdateManyWithNestedWhereInput rebuild(
          void Function(GCategoryUpdateManyWithNestedWhereInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateManyWithNestedWhereInputBuilder toBuilder() =>
      new GCategoryUpdateManyWithNestedWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateManyWithNestedWhereInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GCategoryUpdateManyWithNestedWhereInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GCategoryUpdateManyWithNestedWhereInputBuilder
    implements
        Builder<GCategoryUpdateManyWithNestedWhereInput,
            GCategoryUpdateManyWithNestedWhereInputBuilder> {
  _$GCategoryUpdateManyWithNestedWhereInput? _$v;

  GCategoryWhereInputBuilder? _where;
  GCategoryWhereInputBuilder get where =>
      _$this._where ??= new GCategoryWhereInputBuilder();
  set where(GCategoryWhereInputBuilder? where) => _$this._where = where;

  GCategoryUpdateManyInputBuilder? _data;
  GCategoryUpdateManyInputBuilder get data =>
      _$this._data ??= new GCategoryUpdateManyInputBuilder();
  set data(GCategoryUpdateManyInputBuilder? data) => _$this._data = data;

  GCategoryUpdateManyWithNestedWhereInputBuilder();

  GCategoryUpdateManyWithNestedWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateManyWithNestedWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateManyWithNestedWhereInput;
  }

  @override
  void update(
      void Function(GCategoryUpdateManyWithNestedWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryUpdateManyWithNestedWhereInput build() {
    _$GCategoryUpdateManyWithNestedWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpdateManyWithNestedWhereInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryUpdateManyWithNestedWhereInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateOneInlineInput extends GCategoryUpdateOneInlineInput {
  @override
  final GCategoryCreateInput? create;
  @override
  final GCategoryUpdateWithNestedWhereUniqueInput? updateIt;
  @override
  final GCategoryUpsertWithNestedWhereUniqueInput? upsert;
  @override
  final GCategoryWhereUniqueInput? connect;
  @override
  final bool? disconnect;
  @override
  final bool? delete;

  factory _$GCategoryUpdateOneInlineInput(
          [void Function(GCategoryUpdateOneInlineInputBuilder)? updates]) =>
      (new GCategoryUpdateOneInlineInputBuilder()..update(updates)).build();

  _$GCategoryUpdateOneInlineInput._(
      {this.create,
      this.updateIt,
      this.upsert,
      this.connect,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GCategoryUpdateOneInlineInput rebuild(
          void Function(GCategoryUpdateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateOneInlineInputBuilder toBuilder() =>
      new GCategoryUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateOneInlineInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        connect == other.connect &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc($jc($jc(0, create.hashCode), updateIt.hashCode),
                    upsert.hashCode),
                connect.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryUpdateOneInlineInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('connect', connect)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GCategoryUpdateOneInlineInputBuilder
    implements
        Builder<GCategoryUpdateOneInlineInput,
            GCategoryUpdateOneInlineInputBuilder> {
  _$GCategoryUpdateOneInlineInput? _$v;

  GCategoryCreateInputBuilder? _create;
  GCategoryCreateInputBuilder get create =>
      _$this._create ??= new GCategoryCreateInputBuilder();
  set create(GCategoryCreateInputBuilder? create) => _$this._create = create;

  GCategoryUpdateWithNestedWhereUniqueInputBuilder? _updateIt;
  GCategoryUpdateWithNestedWhereUniqueInputBuilder get updateIt =>
      _$this._updateIt ??=
          new GCategoryUpdateWithNestedWhereUniqueInputBuilder();
  set updateIt(GCategoryUpdateWithNestedWhereUniqueInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GCategoryUpsertWithNestedWhereUniqueInputBuilder? _upsert;
  GCategoryUpsertWithNestedWhereUniqueInputBuilder get upsert =>
      _$this._upsert ??= new GCategoryUpsertWithNestedWhereUniqueInputBuilder();
  set upsert(GCategoryUpsertWithNestedWhereUniqueInputBuilder? upsert) =>
      _$this._upsert = upsert;

  GCategoryWhereUniqueInputBuilder? _connect;
  GCategoryWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GCategoryWhereUniqueInputBuilder();
  set connect(GCategoryWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  bool? _delete;
  bool? get delete => _$this._delete;
  set delete(bool? delete) => _$this._delete = delete;

  GCategoryUpdateOneInlineInputBuilder();

  GCategoryUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _delete = $v.delete;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateOneInlineInput;
  }

  @override
  void update(void Function(GCategoryUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryUpdateOneInlineInput build() {
    _$GCategoryUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpdateOneInlineInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              connect: _connect?.build(),
              disconnect: disconnect,
              delete: delete);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryUpdateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpdateWithNestedWhereUniqueInput
    extends GCategoryUpdateWithNestedWhereUniqueInput {
  @override
  final GCategoryWhereUniqueInput where;
  @override
  final GCategoryUpdateInput data;

  factory _$GCategoryUpdateWithNestedWhereUniqueInput(
          [void Function(GCategoryUpdateWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GCategoryUpdateWithNestedWhereUniqueInputBuilder()..update(updates))
          .build();

  _$GCategoryUpdateWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GCategoryUpdateWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GCategoryUpdateWithNestedWhereUniqueInput', 'data');
  }

  @override
  GCategoryUpdateWithNestedWhereUniqueInput rebuild(
          void Function(GCategoryUpdateWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpdateWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GCategoryUpdateWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpdateWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GCategoryUpdateWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GCategoryUpdateWithNestedWhereUniqueInputBuilder
    implements
        Builder<GCategoryUpdateWithNestedWhereUniqueInput,
            GCategoryUpdateWithNestedWhereUniqueInputBuilder> {
  _$GCategoryUpdateWithNestedWhereUniqueInput? _$v;

  GCategoryWhereUniqueInputBuilder? _where;
  GCategoryWhereUniqueInputBuilder get where =>
      _$this._where ??= new GCategoryWhereUniqueInputBuilder();
  set where(GCategoryWhereUniqueInputBuilder? where) => _$this._where = where;

  GCategoryUpdateInputBuilder? _data;
  GCategoryUpdateInputBuilder get data =>
      _$this._data ??= new GCategoryUpdateInputBuilder();
  set data(GCategoryUpdateInputBuilder? data) => _$this._data = data;

  GCategoryUpdateWithNestedWhereUniqueInputBuilder();

  GCategoryUpdateWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpdateWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpdateWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GCategoryUpdateWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryUpdateWithNestedWhereUniqueInput build() {
    _$GCategoryUpdateWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpdateWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryUpdateWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpsertInput extends GCategoryUpsertInput {
  @override
  final GCategoryCreateInput create;
  @override
  final GCategoryUpdateInput updateIt;

  factory _$GCategoryUpsertInput(
          [void Function(GCategoryUpsertInputBuilder)? updates]) =>
      (new GCategoryUpsertInputBuilder()..update(updates)).build();

  _$GCategoryUpsertInput._({required this.create, required this.updateIt})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        create, 'GCategoryUpsertInput', 'create');
    BuiltValueNullFieldError.checkNotNull(
        updateIt, 'GCategoryUpsertInput', 'updateIt');
  }

  @override
  GCategoryUpsertInput rebuild(
          void Function(GCategoryUpsertInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpsertInputBuilder toBuilder() =>
      new GCategoryUpsertInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpsertInput &&
        create == other.create &&
        updateIt == other.updateIt;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), updateIt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryUpsertInput')
          ..add('create', create)
          ..add('updateIt', updateIt))
        .toString();
  }
}

class GCategoryUpsertInputBuilder
    implements Builder<GCategoryUpsertInput, GCategoryUpsertInputBuilder> {
  _$GCategoryUpsertInput? _$v;

  GCategoryCreateInputBuilder? _create;
  GCategoryCreateInputBuilder get create =>
      _$this._create ??= new GCategoryCreateInputBuilder();
  set create(GCategoryCreateInputBuilder? create) => _$this._create = create;

  GCategoryUpdateInputBuilder? _updateIt;
  GCategoryUpdateInputBuilder get updateIt =>
      _$this._updateIt ??= new GCategoryUpdateInputBuilder();
  set updateIt(GCategoryUpdateInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GCategoryUpsertInputBuilder();

  GCategoryUpsertInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create.toBuilder();
      _updateIt = $v.updateIt.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpsertInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpsertInput;
  }

  @override
  void update(void Function(GCategoryUpsertInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryUpsertInput build() {
    _$GCategoryUpsertInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpsertInput._(
              create: create.build(), updateIt: updateIt.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        create.build();
        _$failedField = 'updateIt';
        updateIt.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryUpsertInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryUpsertWithNestedWhereUniqueInput
    extends GCategoryUpsertWithNestedWhereUniqueInput {
  @override
  final GCategoryWhereUniqueInput where;
  @override
  final GCategoryUpsertInput data;

  factory _$GCategoryUpsertWithNestedWhereUniqueInput(
          [void Function(GCategoryUpsertWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GCategoryUpsertWithNestedWhereUniqueInputBuilder()..update(updates))
          .build();

  _$GCategoryUpsertWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GCategoryUpsertWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GCategoryUpsertWithNestedWhereUniqueInput', 'data');
  }

  @override
  GCategoryUpsertWithNestedWhereUniqueInput rebuild(
          void Function(GCategoryUpsertWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryUpsertWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GCategoryUpsertWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryUpsertWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GCategoryUpsertWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GCategoryUpsertWithNestedWhereUniqueInputBuilder
    implements
        Builder<GCategoryUpsertWithNestedWhereUniqueInput,
            GCategoryUpsertWithNestedWhereUniqueInputBuilder> {
  _$GCategoryUpsertWithNestedWhereUniqueInput? _$v;

  GCategoryWhereUniqueInputBuilder? _where;
  GCategoryWhereUniqueInputBuilder get where =>
      _$this._where ??= new GCategoryWhereUniqueInputBuilder();
  set where(GCategoryWhereUniqueInputBuilder? where) => _$this._where = where;

  GCategoryUpsertInputBuilder? _data;
  GCategoryUpsertInputBuilder get data =>
      _$this._data ??= new GCategoryUpsertInputBuilder();
  set data(GCategoryUpsertInputBuilder? data) => _$this._data = data;

  GCategoryUpsertWithNestedWhereUniqueInputBuilder();

  GCategoryUpsertWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryUpsertWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryUpsertWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GCategoryUpsertWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryUpsertWithNestedWhereUniqueInput build() {
    _$GCategoryUpsertWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryUpsertWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryUpsertWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryWhereInput extends GCategoryWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GCategoryWhereInput>? AND;
  @override
  final BuiltList<GCategoryWhereInput>? OR;
  @override
  final BuiltList<GCategoryWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String>? title_in;
  @override
  final BuiltList<String>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GAssetWhereInput? mainImage;
  @override
  final GCategoryTitle? categoryTitle;
  @override
  final GCategoryTitle? categoryTitle_not;
  @override
  final BuiltList<GCategoryTitle>? categoryTitle_in;
  @override
  final BuiltList<GCategoryTitle>? categoryTitle_not_in;

  factory _$GCategoryWhereInput(
          [void Function(GCategoryWhereInputBuilder)? updates]) =>
      (new GCategoryWhereInputBuilder()..update(updates)).build();

  _$GCategoryWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.createdBy,
      this.updatedBy,
      this.publishedBy,
      this.mainImage,
      this.categoryTitle,
      this.categoryTitle_not,
      this.categoryTitle_in,
      this.categoryTitle_not_in})
      : super._();

  @override
  GCategoryWhereInput rebuild(
          void Function(GCategoryWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryWhereInputBuilder toBuilder() =>
      new GCategoryWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        createdBy == other.createdBy &&
        updatedBy == other.updatedBy &&
        publishedBy == other.publishedBy &&
        mainImage == other.mainImage &&
        categoryTitle == other.categoryTitle &&
        categoryTitle_not == other.categoryTitle_not &&
        categoryTitle_in == other.categoryTitle_in &&
        categoryTitle_not_in == other.categoryTitle_not_in;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode), publishedAt_lt.hashCode), publishedAt_lte.hashCode), publishedAt_gt.hashCode),
                                                                                publishedAt_gte.hashCode),
                                                                            title.hashCode),
                                                                        title_not.hashCode),
                                                                    title_in.hashCode),
                                                                title_not_in.hashCode),
                                                            title_contains.hashCode),
                                                        title_not_contains.hashCode),
                                                    title_starts_with.hashCode),
                                                title_not_starts_with.hashCode),
                                            title_ends_with.hashCode),
                                        title_not_ends_with.hashCode),
                                    createdBy.hashCode),
                                updatedBy.hashCode),
                            publishedBy.hashCode),
                        mainImage.hashCode),
                    categoryTitle.hashCode),
                categoryTitle_not.hashCode),
            categoryTitle_in.hashCode),
        categoryTitle_not_in.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('createdBy', createdBy)
          ..add('updatedBy', updatedBy)
          ..add('publishedBy', publishedBy)
          ..add('mainImage', mainImage)
          ..add('categoryTitle', categoryTitle)
          ..add('categoryTitle_not', categoryTitle_not)
          ..add('categoryTitle_in', categoryTitle_in)
          ..add('categoryTitle_not_in', categoryTitle_not_in))
        .toString();
  }
}

class GCategoryWhereInputBuilder
    implements Builder<GCategoryWhereInput, GCategoryWhereInputBuilder> {
  _$GCategoryWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GCategoryWhereInput>? _AND;
  ListBuilder<GCategoryWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GCategoryWhereInput>();
  set AND(ListBuilder<GCategoryWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GCategoryWhereInput>? _OR;
  ListBuilder<GCategoryWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GCategoryWhereInput>();
  set OR(ListBuilder<GCategoryWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GCategoryWhereInput>? _NOT;
  ListBuilder<GCategoryWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GCategoryWhereInput>();
  set NOT(ListBuilder<GCategoryWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String>? _title_in;
  ListBuilder<String> get title_in =>
      _$this._title_in ??= new ListBuilder<String>();
  set title_in(ListBuilder<String>? title_in) => _$this._title_in = title_in;

  ListBuilder<String>? _title_not_in;
  ListBuilder<String> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String>();
  set title_not_in(ListBuilder<String>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GAssetWhereInputBuilder? _mainImage;
  GAssetWhereInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetWhereInputBuilder();
  set mainImage(GAssetWhereInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GCategoryTitle? _categoryTitle;
  GCategoryTitle? get categoryTitle => _$this._categoryTitle;
  set categoryTitle(GCategoryTitle? categoryTitle) =>
      _$this._categoryTitle = categoryTitle;

  GCategoryTitle? _categoryTitle_not;
  GCategoryTitle? get categoryTitle_not => _$this._categoryTitle_not;
  set categoryTitle_not(GCategoryTitle? categoryTitle_not) =>
      _$this._categoryTitle_not = categoryTitle_not;

  ListBuilder<GCategoryTitle>? _categoryTitle_in;
  ListBuilder<GCategoryTitle> get categoryTitle_in =>
      _$this._categoryTitle_in ??= new ListBuilder<GCategoryTitle>();
  set categoryTitle_in(ListBuilder<GCategoryTitle>? categoryTitle_in) =>
      _$this._categoryTitle_in = categoryTitle_in;

  ListBuilder<GCategoryTitle>? _categoryTitle_not_in;
  ListBuilder<GCategoryTitle> get categoryTitle_not_in =>
      _$this._categoryTitle_not_in ??= new ListBuilder<GCategoryTitle>();
  set categoryTitle_not_in(ListBuilder<GCategoryTitle>? categoryTitle_not_in) =>
      _$this._categoryTitle_not_in = categoryTitle_not_in;

  GCategoryWhereInputBuilder();

  GCategoryWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _createdBy = $v.createdBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _mainImage = $v.mainImage?.toBuilder();
      _categoryTitle = $v.categoryTitle;
      _categoryTitle_not = $v.categoryTitle_not;
      _categoryTitle_in = $v.categoryTitle_in?.toBuilder();
      _categoryTitle_not_in = $v.categoryTitle_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryWhereInput;
  }

  @override
  void update(void Function(GCategoryWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryWhereInput build() {
    _$GCategoryWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GCategoryWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              createdBy: _createdBy?.build(),
              updatedBy: _updatedBy?.build(),
              publishedBy: _publishedBy?.build(),
              mainImage: _mainImage?.build(),
              categoryTitle: categoryTitle,
              categoryTitle_not: categoryTitle_not,
              categoryTitle_in: _categoryTitle_in?.build(),
              categoryTitle_not_in: _categoryTitle_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'mainImage';
        _mainImage?.build();

        _$failedField = 'categoryTitle_in';
        _categoryTitle_in?.build();
        _$failedField = 'categoryTitle_not_in';
        _categoryTitle_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GCategoryWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GCategoryWhereUniqueInput extends GCategoryWhereUniqueInput {
  @override
  final String? id;

  factory _$GCategoryWhereUniqueInput(
          [void Function(GCategoryWhereUniqueInputBuilder)? updates]) =>
      (new GCategoryWhereUniqueInputBuilder()..update(updates)).build();

  _$GCategoryWhereUniqueInput._({this.id}) : super._();

  @override
  GCategoryWhereUniqueInput rebuild(
          void Function(GCategoryWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GCategoryWhereUniqueInputBuilder toBuilder() =>
      new GCategoryWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GCategoryWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GCategoryWhereUniqueInput')
          ..add('id', id))
        .toString();
  }
}

class GCategoryWhereUniqueInputBuilder
    implements
        Builder<GCategoryWhereUniqueInput, GCategoryWhereUniqueInputBuilder> {
  _$GCategoryWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GCategoryWhereUniqueInputBuilder();

  GCategoryWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GCategoryWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GCategoryWhereUniqueInput;
  }

  @override
  void update(void Function(GCategoryWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GCategoryWhereUniqueInput build() {
    final _$result = _$v ?? new _$GCategoryWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GColorInput extends GColorInput {
  @override
  final String? hex;
  @override
  final GRGBAInput? rgba;

  factory _$GColorInput([void Function(GColorInputBuilder)? updates]) =>
      (new GColorInputBuilder()..update(updates)).build();

  _$GColorInput._({this.hex, this.rgba}) : super._();

  @override
  GColorInput rebuild(void Function(GColorInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GColorInputBuilder toBuilder() => new GColorInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GColorInput && hex == other.hex && rgba == other.rgba;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, hex.hashCode), rgba.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GColorInput')
          ..add('hex', hex)
          ..add('rgba', rgba))
        .toString();
  }
}

class GColorInputBuilder implements Builder<GColorInput, GColorInputBuilder> {
  _$GColorInput? _$v;

  String? _hex;
  String? get hex => _$this._hex;
  set hex(String? hex) => _$this._hex = hex;

  GRGBAInputBuilder? _rgba;
  GRGBAInputBuilder get rgba => _$this._rgba ??= new GRGBAInputBuilder();
  set rgba(GRGBAInputBuilder? rgba) => _$this._rgba = rgba;

  GColorInputBuilder();

  GColorInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _hex = $v.hex;
      _rgba = $v.rgba?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GColorInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GColorInput;
  }

  @override
  void update(void Function(GColorInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GColorInput build() {
    _$GColorInput _$result;
    try {
      _$result = _$v ?? new _$GColorInput._(hex: hex, rgba: _rgba?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'rgba';
        _rgba?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GColorInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GConnectPositionInput extends GConnectPositionInput {
  @override
  final String? after;
  @override
  final String? before;
  @override
  final bool? start;
  @override
  final bool? end;

  factory _$GConnectPositionInput(
          [void Function(GConnectPositionInputBuilder)? updates]) =>
      (new GConnectPositionInputBuilder()..update(updates)).build();

  _$GConnectPositionInput._({this.after, this.before, this.start, this.end})
      : super._();

  @override
  GConnectPositionInput rebuild(
          void Function(GConnectPositionInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GConnectPositionInputBuilder toBuilder() =>
      new GConnectPositionInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GConnectPositionInput &&
        after == other.after &&
        before == other.before &&
        start == other.start &&
        end == other.end;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, after.hashCode), before.hashCode), start.hashCode),
        end.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GConnectPositionInput')
          ..add('after', after)
          ..add('before', before)
          ..add('start', start)
          ..add('end', end))
        .toString();
  }
}

class GConnectPositionInputBuilder
    implements Builder<GConnectPositionInput, GConnectPositionInputBuilder> {
  _$GConnectPositionInput? _$v;

  String? _after;
  String? get after => _$this._after;
  set after(String? after) => _$this._after = after;

  String? _before;
  String? get before => _$this._before;
  set before(String? before) => _$this._before = before;

  bool? _start;
  bool? get start => _$this._start;
  set start(bool? start) => _$this._start = start;

  bool? _end;
  bool? get end => _$this._end;
  set end(bool? end) => _$this._end = end;

  GConnectPositionInputBuilder();

  GConnectPositionInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _after = $v.after;
      _before = $v.before;
      _start = $v.start;
      _end = $v.end;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GConnectPositionInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GConnectPositionInput;
  }

  @override
  void update(void Function(GConnectPositionInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GConnectPositionInput build() {
    final _$result = _$v ??
        new _$GConnectPositionInput._(
            after: after, before: before, start: start, end: end);
    replace(_$result);
    return _$result;
  }
}

class _$GDocumentOutputInput extends GDocumentOutputInput {
  @override
  final GDocumentFileTypes? format;

  factory _$GDocumentOutputInput(
          [void Function(GDocumentOutputInputBuilder)? updates]) =>
      (new GDocumentOutputInputBuilder()..update(updates)).build();

  _$GDocumentOutputInput._({this.format}) : super._();

  @override
  GDocumentOutputInput rebuild(
          void Function(GDocumentOutputInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDocumentOutputInputBuilder toBuilder() =>
      new GDocumentOutputInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDocumentOutputInput && format == other.format;
  }

  @override
  int get hashCode {
    return $jf($jc(0, format.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GDocumentOutputInput')
          ..add('format', format))
        .toString();
  }
}

class GDocumentOutputInputBuilder
    implements Builder<GDocumentOutputInput, GDocumentOutputInputBuilder> {
  _$GDocumentOutputInput? _$v;

  GDocumentFileTypes? _format;
  GDocumentFileTypes? get format => _$this._format;
  set format(GDocumentFileTypes? format) => _$this._format = format;

  GDocumentOutputInputBuilder();

  GDocumentOutputInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _format = $v.format;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDocumentOutputInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDocumentOutputInput;
  }

  @override
  void update(void Function(GDocumentOutputInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GDocumentOutputInput build() {
    final _$result = _$v ?? new _$GDocumentOutputInput._(format: format);
    replace(_$result);
    return _$result;
  }
}

class _$GDocumentTransformationInput extends GDocumentTransformationInput {
  @override
  final GDocumentOutputInput? output;

  factory _$GDocumentTransformationInput(
          [void Function(GDocumentTransformationInputBuilder)? updates]) =>
      (new GDocumentTransformationInputBuilder()..update(updates)).build();

  _$GDocumentTransformationInput._({this.output}) : super._();

  @override
  GDocumentTransformationInput rebuild(
          void Function(GDocumentTransformationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GDocumentTransformationInputBuilder toBuilder() =>
      new GDocumentTransformationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GDocumentTransformationInput && output == other.output;
  }

  @override
  int get hashCode {
    return $jf($jc(0, output.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GDocumentTransformationInput')
          ..add('output', output))
        .toString();
  }
}

class GDocumentTransformationInputBuilder
    implements
        Builder<GDocumentTransformationInput,
            GDocumentTransformationInputBuilder> {
  _$GDocumentTransformationInput? _$v;

  GDocumentOutputInputBuilder? _output;
  GDocumentOutputInputBuilder get output =>
      _$this._output ??= new GDocumentOutputInputBuilder();
  set output(GDocumentOutputInputBuilder? output) => _$this._output = output;

  GDocumentTransformationInputBuilder();

  GDocumentTransformationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _output = $v.output?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GDocumentTransformationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GDocumentTransformationInput;
  }

  @override
  void update(void Function(GDocumentTransformationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GDocumentTransformationInput build() {
    _$GDocumentTransformationInput _$result;
    try {
      _$result =
          _$v ?? new _$GDocumentTransformationInput._(output: _output?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'output';
        _output?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GDocumentTransformationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryConnectInput extends GFeedItemCategoryConnectInput {
  @override
  final GFeedItemCategoryWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GFeedItemCategoryConnectInput(
          [void Function(GFeedItemCategoryConnectInputBuilder)? updates]) =>
      (new GFeedItemCategoryConnectInputBuilder()..update(updates)).build();

  _$GFeedItemCategoryConnectInput._({required this.where, this.position})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GFeedItemCategoryConnectInput', 'where');
  }

  @override
  GFeedItemCategoryConnectInput rebuild(
          void Function(GFeedItemCategoryConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryConnectInputBuilder toBuilder() =>
      new GFeedItemCategoryConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), position.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCategoryConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GFeedItemCategoryConnectInputBuilder
    implements
        Builder<GFeedItemCategoryConnectInput,
            GFeedItemCategoryConnectInputBuilder> {
  _$GFeedItemCategoryConnectInput? _$v;

  GFeedItemCategoryWhereUniqueInputBuilder? _where;
  GFeedItemCategoryWhereUniqueInputBuilder get where =>
      _$this._where ??= new GFeedItemCategoryWhereUniqueInputBuilder();
  set where(GFeedItemCategoryWhereUniqueInputBuilder? where) =>
      _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GFeedItemCategoryConnectInputBuilder();

  GFeedItemCategoryConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryConnectInput;
  }

  @override
  void update(void Function(GFeedItemCategoryConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryConnectInput build() {
    _$GFeedItemCategoryConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryCreateInput extends GFeedItemCategoryCreateInput {
  @override
  final DateTime? createdAt;
  @override
  final DateTime? updatedAt;
  @override
  final String? title;
  @override
  final GAssetCreateOneInlineInput mainImage;
  @override
  final GCategoryTitle? categoryTitle;

  factory _$GFeedItemCategoryCreateInput(
          [void Function(GFeedItemCategoryCreateInputBuilder)? updates]) =>
      (new GFeedItemCategoryCreateInputBuilder()..update(updates)).build();

  _$GFeedItemCategoryCreateInput._(
      {this.createdAt,
      this.updatedAt,
      this.title,
      required this.mainImage,
      this.categoryTitle})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        mainImage, 'GFeedItemCategoryCreateInput', 'mainImage');
  }

  @override
  GFeedItemCategoryCreateInput rebuild(
          void Function(GFeedItemCategoryCreateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryCreateInputBuilder toBuilder() =>
      new GFeedItemCategoryCreateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryCreateInput &&
        createdAt == other.createdAt &&
        updatedAt == other.updatedAt &&
        title == other.title &&
        mainImage == other.mainImage &&
        categoryTitle == other.categoryTitle;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, createdAt.hashCode), updatedAt.hashCode),
                title.hashCode),
            mainImage.hashCode),
        categoryTitle.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCategoryCreateInput')
          ..add('createdAt', createdAt)
          ..add('updatedAt', updatedAt)
          ..add('title', title)
          ..add('mainImage', mainImage)
          ..add('categoryTitle', categoryTitle))
        .toString();
  }
}

class GFeedItemCategoryCreateInputBuilder
    implements
        Builder<GFeedItemCategoryCreateInput,
            GFeedItemCategoryCreateInputBuilder> {
  _$GFeedItemCategoryCreateInput? _$v;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GAssetCreateOneInlineInputBuilder? _mainImage;
  GAssetCreateOneInlineInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetCreateOneInlineInputBuilder();
  set mainImage(GAssetCreateOneInlineInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GCategoryTitle? _categoryTitle;
  GCategoryTitle? get categoryTitle => _$this._categoryTitle;
  set categoryTitle(GCategoryTitle? categoryTitle) =>
      _$this._categoryTitle = categoryTitle;

  GFeedItemCategoryCreateInputBuilder();

  GFeedItemCategoryCreateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _createdAt = $v.createdAt;
      _updatedAt = $v.updatedAt;
      _title = $v.title;
      _mainImage = $v.mainImage.toBuilder();
      _categoryTitle = $v.categoryTitle;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryCreateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryCreateInput;
  }

  @override
  void update(void Function(GFeedItemCategoryCreateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryCreateInput build() {
    _$GFeedItemCategoryCreateInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryCreateInput._(
              createdAt: createdAt,
              updatedAt: updatedAt,
              title: title,
              mainImage: mainImage.build(),
              categoryTitle: categoryTitle);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'mainImage';
        mainImage.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryCreateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryCreateManyInlineInput
    extends GFeedItemCategoryCreateManyInlineInput {
  @override
  final BuiltList<GFeedItemCategoryCreateInput>? create;
  @override
  final BuiltList<GFeedItemCategoryWhereUniqueInput>? connect;

  factory _$GFeedItemCategoryCreateManyInlineInput(
          [void Function(GFeedItemCategoryCreateManyInlineInputBuilder)?
              updates]) =>
      (new GFeedItemCategoryCreateManyInlineInputBuilder()..update(updates))
          .build();

  _$GFeedItemCategoryCreateManyInlineInput._({this.create, this.connect})
      : super._();

  @override
  GFeedItemCategoryCreateManyInlineInput rebuild(
          void Function(GFeedItemCategoryCreateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryCreateManyInlineInputBuilder toBuilder() =>
      new GFeedItemCategoryCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryCreateManyInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GFeedItemCategoryCreateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GFeedItemCategoryCreateManyInlineInputBuilder
    implements
        Builder<GFeedItemCategoryCreateManyInlineInput,
            GFeedItemCategoryCreateManyInlineInputBuilder> {
  _$GFeedItemCategoryCreateManyInlineInput? _$v;

  ListBuilder<GFeedItemCategoryCreateInput>? _create;
  ListBuilder<GFeedItemCategoryCreateInput> get create =>
      _$this._create ??= new ListBuilder<GFeedItemCategoryCreateInput>();
  set create(ListBuilder<GFeedItemCategoryCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GFeedItemCategoryWhereUniqueInput>? _connect;
  ListBuilder<GFeedItemCategoryWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GFeedItemCategoryWhereUniqueInput>();
  set connect(ListBuilder<GFeedItemCategoryWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GFeedItemCategoryCreateManyInlineInputBuilder();

  GFeedItemCategoryCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryCreateManyInlineInput;
  }

  @override
  void update(
      void Function(GFeedItemCategoryCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryCreateManyInlineInput build() {
    _$GFeedItemCategoryCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryCreateManyInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryCreateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryCreateOneInlineInput
    extends GFeedItemCategoryCreateOneInlineInput {
  @override
  final GFeedItemCategoryCreateInput? create;
  @override
  final GFeedItemCategoryWhereUniqueInput? connect;

  factory _$GFeedItemCategoryCreateOneInlineInput(
          [void Function(GFeedItemCategoryCreateOneInlineInputBuilder)?
              updates]) =>
      (new GFeedItemCategoryCreateOneInlineInputBuilder()..update(updates))
          .build();

  _$GFeedItemCategoryCreateOneInlineInput._({this.create, this.connect})
      : super._();

  @override
  GFeedItemCategoryCreateOneInlineInput rebuild(
          void Function(GFeedItemCategoryCreateOneInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryCreateOneInlineInputBuilder toBuilder() =>
      new GFeedItemCategoryCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryCreateOneInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCategoryCreateOneInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GFeedItemCategoryCreateOneInlineInputBuilder
    implements
        Builder<GFeedItemCategoryCreateOneInlineInput,
            GFeedItemCategoryCreateOneInlineInputBuilder> {
  _$GFeedItemCategoryCreateOneInlineInput? _$v;

  GFeedItemCategoryCreateInputBuilder? _create;
  GFeedItemCategoryCreateInputBuilder get create =>
      _$this._create ??= new GFeedItemCategoryCreateInputBuilder();
  set create(GFeedItemCategoryCreateInputBuilder? create) =>
      _$this._create = create;

  GFeedItemCategoryWhereUniqueInputBuilder? _connect;
  GFeedItemCategoryWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GFeedItemCategoryWhereUniqueInputBuilder();
  set connect(GFeedItemCategoryWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GFeedItemCategoryCreateOneInlineInputBuilder();

  GFeedItemCategoryCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryCreateOneInlineInput;
  }

  @override
  void update(
      void Function(GFeedItemCategoryCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryCreateOneInlineInput build() {
    _$GFeedItemCategoryCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryCreateOneInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryCreateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryManyWhereInput
    extends GFeedItemCategoryManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GFeedItemCategoryWhereInput>? AND;
  @override
  final BuiltList<GFeedItemCategoryWhereInput>? OR;
  @override
  final BuiltList<GFeedItemCategoryWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String>? title_in;
  @override
  final BuiltList<String>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GAssetWhereInput? mainImage;
  @override
  final GCategoryTitle? categoryTitle;
  @override
  final GCategoryTitle? categoryTitle_not;
  @override
  final BuiltList<GCategoryTitle>? categoryTitle_in;
  @override
  final BuiltList<GCategoryTitle>? categoryTitle_not_in;

  factory _$GFeedItemCategoryManyWhereInput(
          [void Function(GFeedItemCategoryManyWhereInputBuilder)? updates]) =>
      (new GFeedItemCategoryManyWhereInputBuilder()..update(updates)).build();

  _$GFeedItemCategoryManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.createdBy,
      this.updatedBy,
      this.publishedBy,
      this.mainImage,
      this.categoryTitle,
      this.categoryTitle_not,
      this.categoryTitle_in,
      this.categoryTitle_not_in})
      : super._();

  @override
  GFeedItemCategoryManyWhereInput rebuild(
          void Function(GFeedItemCategoryManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryManyWhereInputBuilder toBuilder() =>
      new GFeedItemCategoryManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        createdBy == other.createdBy &&
        updatedBy == other.updatedBy &&
        publishedBy == other.publishedBy &&
        mainImage == other.mainImage &&
        categoryTitle == other.categoryTitle &&
        categoryTitle_not == other.categoryTitle_not &&
        categoryTitle_in == other.categoryTitle_in &&
        categoryTitle_not_in == other.categoryTitle_not_in;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode), publishedAt_lt.hashCode), publishedAt_lte.hashCode), publishedAt_gt.hashCode),
                                                                                publishedAt_gte.hashCode),
                                                                            title.hashCode),
                                                                        title_not.hashCode),
                                                                    title_in.hashCode),
                                                                title_not_in.hashCode),
                                                            title_contains.hashCode),
                                                        title_not_contains.hashCode),
                                                    title_starts_with.hashCode),
                                                title_not_starts_with.hashCode),
                                            title_ends_with.hashCode),
                                        title_not_ends_with.hashCode),
                                    createdBy.hashCode),
                                updatedBy.hashCode),
                            publishedBy.hashCode),
                        mainImage.hashCode),
                    categoryTitle.hashCode),
                categoryTitle_not.hashCode),
            categoryTitle_in.hashCode),
        categoryTitle_not_in.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCategoryManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('createdBy', createdBy)
          ..add('updatedBy', updatedBy)
          ..add('publishedBy', publishedBy)
          ..add('mainImage', mainImage)
          ..add('categoryTitle', categoryTitle)
          ..add('categoryTitle_not', categoryTitle_not)
          ..add('categoryTitle_in', categoryTitle_in)
          ..add('categoryTitle_not_in', categoryTitle_not_in))
        .toString();
  }
}

class GFeedItemCategoryManyWhereInputBuilder
    implements
        Builder<GFeedItemCategoryManyWhereInput,
            GFeedItemCategoryManyWhereInputBuilder> {
  _$GFeedItemCategoryManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GFeedItemCategoryWhereInput>? _AND;
  ListBuilder<GFeedItemCategoryWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GFeedItemCategoryWhereInput>();
  set AND(ListBuilder<GFeedItemCategoryWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GFeedItemCategoryWhereInput>? _OR;
  ListBuilder<GFeedItemCategoryWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GFeedItemCategoryWhereInput>();
  set OR(ListBuilder<GFeedItemCategoryWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GFeedItemCategoryWhereInput>? _NOT;
  ListBuilder<GFeedItemCategoryWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GFeedItemCategoryWhereInput>();
  set NOT(ListBuilder<GFeedItemCategoryWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String>? _title_in;
  ListBuilder<String> get title_in =>
      _$this._title_in ??= new ListBuilder<String>();
  set title_in(ListBuilder<String>? title_in) => _$this._title_in = title_in;

  ListBuilder<String>? _title_not_in;
  ListBuilder<String> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String>();
  set title_not_in(ListBuilder<String>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GAssetWhereInputBuilder? _mainImage;
  GAssetWhereInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetWhereInputBuilder();
  set mainImage(GAssetWhereInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GCategoryTitle? _categoryTitle;
  GCategoryTitle? get categoryTitle => _$this._categoryTitle;
  set categoryTitle(GCategoryTitle? categoryTitle) =>
      _$this._categoryTitle = categoryTitle;

  GCategoryTitle? _categoryTitle_not;
  GCategoryTitle? get categoryTitle_not => _$this._categoryTitle_not;
  set categoryTitle_not(GCategoryTitle? categoryTitle_not) =>
      _$this._categoryTitle_not = categoryTitle_not;

  ListBuilder<GCategoryTitle>? _categoryTitle_in;
  ListBuilder<GCategoryTitle> get categoryTitle_in =>
      _$this._categoryTitle_in ??= new ListBuilder<GCategoryTitle>();
  set categoryTitle_in(ListBuilder<GCategoryTitle>? categoryTitle_in) =>
      _$this._categoryTitle_in = categoryTitle_in;

  ListBuilder<GCategoryTitle>? _categoryTitle_not_in;
  ListBuilder<GCategoryTitle> get categoryTitle_not_in =>
      _$this._categoryTitle_not_in ??= new ListBuilder<GCategoryTitle>();
  set categoryTitle_not_in(ListBuilder<GCategoryTitle>? categoryTitle_not_in) =>
      _$this._categoryTitle_not_in = categoryTitle_not_in;

  GFeedItemCategoryManyWhereInputBuilder();

  GFeedItemCategoryManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _createdBy = $v.createdBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _mainImage = $v.mainImage?.toBuilder();
      _categoryTitle = $v.categoryTitle;
      _categoryTitle_not = $v.categoryTitle_not;
      _categoryTitle_in = $v.categoryTitle_in?.toBuilder();
      _categoryTitle_not_in = $v.categoryTitle_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryManyWhereInput;
  }

  @override
  void update(void Function(GFeedItemCategoryManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryManyWhereInput build() {
    _$GFeedItemCategoryManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              createdBy: _createdBy?.build(),
              updatedBy: _updatedBy?.build(),
              publishedBy: _publishedBy?.build(),
              mainImage: _mainImage?.build(),
              categoryTitle: categoryTitle,
              categoryTitle_not: categoryTitle_not,
              categoryTitle_in: _categoryTitle_in?.build(),
              categoryTitle_not_in: _categoryTitle_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'mainImage';
        _mainImage?.build();

        _$failedField = 'categoryTitle_in';
        _categoryTitle_in?.build();
        _$failedField = 'categoryTitle_not_in';
        _categoryTitle_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryUpdateInput extends GFeedItemCategoryUpdateInput {
  @override
  final String? title;
  @override
  final GAssetUpdateOneInlineInput? mainImage;
  @override
  final GCategoryTitle? categoryTitle;

  factory _$GFeedItemCategoryUpdateInput(
          [void Function(GFeedItemCategoryUpdateInputBuilder)? updates]) =>
      (new GFeedItemCategoryUpdateInputBuilder()..update(updates)).build();

  _$GFeedItemCategoryUpdateInput._(
      {this.title, this.mainImage, this.categoryTitle})
      : super._();

  @override
  GFeedItemCategoryUpdateInput rebuild(
          void Function(GFeedItemCategoryUpdateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryUpdateInputBuilder toBuilder() =>
      new GFeedItemCategoryUpdateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryUpdateInput &&
        title == other.title &&
        mainImage == other.mainImage &&
        categoryTitle == other.categoryTitle;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, title.hashCode), mainImage.hashCode),
        categoryTitle.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCategoryUpdateInput')
          ..add('title', title)
          ..add('mainImage', mainImage)
          ..add('categoryTitle', categoryTitle))
        .toString();
  }
}

class GFeedItemCategoryUpdateInputBuilder
    implements
        Builder<GFeedItemCategoryUpdateInput,
            GFeedItemCategoryUpdateInputBuilder> {
  _$GFeedItemCategoryUpdateInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GAssetUpdateOneInlineInputBuilder? _mainImage;
  GAssetUpdateOneInlineInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetUpdateOneInlineInputBuilder();
  set mainImage(GAssetUpdateOneInlineInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GCategoryTitle? _categoryTitle;
  GCategoryTitle? get categoryTitle => _$this._categoryTitle;
  set categoryTitle(GCategoryTitle? categoryTitle) =>
      _$this._categoryTitle = categoryTitle;

  GFeedItemCategoryUpdateInputBuilder();

  GFeedItemCategoryUpdateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _mainImage = $v.mainImage?.toBuilder();
      _categoryTitle = $v.categoryTitle;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryUpdateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryUpdateInput;
  }

  @override
  void update(void Function(GFeedItemCategoryUpdateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryUpdateInput build() {
    _$GFeedItemCategoryUpdateInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryUpdateInput._(
              title: title,
              mainImage: _mainImage?.build(),
              categoryTitle: categoryTitle);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'mainImage';
        _mainImage?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryUpdateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryUpdateManyInlineInput
    extends GFeedItemCategoryUpdateManyInlineInput {
  @override
  final BuiltList<GFeedItemCategoryCreateInput>? create;
  @override
  final BuiltList<GFeedItemCategoryConnectInput>? connect;
  @override
  final BuiltList<GFeedItemCategoryWhereUniqueInput>? set;
  @override
  final BuiltList<GFeedItemCategoryUpdateWithNestedWhereUniqueInput>? updateIt;
  @override
  final BuiltList<GFeedItemCategoryUpsertWithNestedWhereUniqueInput>? upsert;
  @override
  final BuiltList<GFeedItemCategoryWhereUniqueInput>? disconnect;
  @override
  final BuiltList<GFeedItemCategoryWhereUniqueInput>? delete;

  factory _$GFeedItemCategoryUpdateManyInlineInput(
          [void Function(GFeedItemCategoryUpdateManyInlineInputBuilder)?
              updates]) =>
      (new GFeedItemCategoryUpdateManyInlineInputBuilder()..update(updates))
          .build();

  _$GFeedItemCategoryUpdateManyInlineInput._(
      {this.create,
      this.connect,
      this.set,
      this.updateIt,
      this.upsert,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GFeedItemCategoryUpdateManyInlineInput rebuild(
          void Function(GFeedItemCategoryUpdateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryUpdateManyInlineInputBuilder toBuilder() =>
      new GFeedItemCategoryUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryUpdateManyInlineInput &&
        create == other.create &&
        connect == other.connect &&
        set == other.set &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, create.hashCode), connect.hashCode),
                        set.hashCode),
                    updateIt.hashCode),
                upsert.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GFeedItemCategoryUpdateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect)
          ..add('set', set)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GFeedItemCategoryUpdateManyInlineInputBuilder
    implements
        Builder<GFeedItemCategoryUpdateManyInlineInput,
            GFeedItemCategoryUpdateManyInlineInputBuilder> {
  _$GFeedItemCategoryUpdateManyInlineInput? _$v;

  ListBuilder<GFeedItemCategoryCreateInput>? _create;
  ListBuilder<GFeedItemCategoryCreateInput> get create =>
      _$this._create ??= new ListBuilder<GFeedItemCategoryCreateInput>();
  set create(ListBuilder<GFeedItemCategoryCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GFeedItemCategoryConnectInput>? _connect;
  ListBuilder<GFeedItemCategoryConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GFeedItemCategoryConnectInput>();
  set connect(ListBuilder<GFeedItemCategoryConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GFeedItemCategoryWhereUniqueInput>? _set;
  ListBuilder<GFeedItemCategoryWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GFeedItemCategoryWhereUniqueInput>();
  set set(ListBuilder<GFeedItemCategoryWhereUniqueInput>? set) =>
      _$this._set = set;

  ListBuilder<GFeedItemCategoryUpdateWithNestedWhereUniqueInput>? _updateIt;
  ListBuilder<GFeedItemCategoryUpdateWithNestedWhereUniqueInput> get updateIt =>
      _$this._updateIt ??=
          new ListBuilder<GFeedItemCategoryUpdateWithNestedWhereUniqueInput>();
  set updateIt(
          ListBuilder<GFeedItemCategoryUpdateWithNestedWhereUniqueInput>?
              updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GFeedItemCategoryUpsertWithNestedWhereUniqueInput>? _upsert;
  ListBuilder<GFeedItemCategoryUpsertWithNestedWhereUniqueInput> get upsert =>
      _$this._upsert ??=
          new ListBuilder<GFeedItemCategoryUpsertWithNestedWhereUniqueInput>();
  set upsert(
          ListBuilder<GFeedItemCategoryUpsertWithNestedWhereUniqueInput>?
              upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GFeedItemCategoryWhereUniqueInput>? _disconnect;
  ListBuilder<GFeedItemCategoryWhereUniqueInput> get disconnect =>
      _$this._disconnect ??=
          new ListBuilder<GFeedItemCategoryWhereUniqueInput>();
  set disconnect(ListBuilder<GFeedItemCategoryWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  ListBuilder<GFeedItemCategoryWhereUniqueInput>? _delete;
  ListBuilder<GFeedItemCategoryWhereUniqueInput> get delete =>
      _$this._delete ??= new ListBuilder<GFeedItemCategoryWhereUniqueInput>();
  set delete(ListBuilder<GFeedItemCategoryWhereUniqueInput>? delete) =>
      _$this._delete = delete;

  GFeedItemCategoryUpdateManyInlineInputBuilder();

  GFeedItemCategoryUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryUpdateManyInlineInput;
  }

  @override
  void update(
      void Function(GFeedItemCategoryUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryUpdateManyInlineInput build() {
    _$GFeedItemCategoryUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryUpdateManyInlineInput._(
              create: _create?.build(),
              connect: _connect?.build(),
              set: _set?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              disconnect: _disconnect?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryUpdateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryUpdateManyInput
    extends GFeedItemCategoryUpdateManyInput {
  @override
  final String? title;
  @override
  final GCategoryTitle? categoryTitle;

  factory _$GFeedItemCategoryUpdateManyInput(
          [void Function(GFeedItemCategoryUpdateManyInputBuilder)? updates]) =>
      (new GFeedItemCategoryUpdateManyInputBuilder()..update(updates)).build();

  _$GFeedItemCategoryUpdateManyInput._({this.title, this.categoryTitle})
      : super._();

  @override
  GFeedItemCategoryUpdateManyInput rebuild(
          void Function(GFeedItemCategoryUpdateManyInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryUpdateManyInputBuilder toBuilder() =>
      new GFeedItemCategoryUpdateManyInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryUpdateManyInput &&
        title == other.title &&
        categoryTitle == other.categoryTitle;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, title.hashCode), categoryTitle.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCategoryUpdateManyInput')
          ..add('title', title)
          ..add('categoryTitle', categoryTitle))
        .toString();
  }
}

class GFeedItemCategoryUpdateManyInputBuilder
    implements
        Builder<GFeedItemCategoryUpdateManyInput,
            GFeedItemCategoryUpdateManyInputBuilder> {
  _$GFeedItemCategoryUpdateManyInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GCategoryTitle? _categoryTitle;
  GCategoryTitle? get categoryTitle => _$this._categoryTitle;
  set categoryTitle(GCategoryTitle? categoryTitle) =>
      _$this._categoryTitle = categoryTitle;

  GFeedItemCategoryUpdateManyInputBuilder();

  GFeedItemCategoryUpdateManyInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _categoryTitle = $v.categoryTitle;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryUpdateManyInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryUpdateManyInput;
  }

  @override
  void update(void Function(GFeedItemCategoryUpdateManyInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryUpdateManyInput build() {
    final _$result = _$v ??
        new _$GFeedItemCategoryUpdateManyInput._(
            title: title, categoryTitle: categoryTitle);
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryUpdateManyWithNestedWhereInput
    extends GFeedItemCategoryUpdateManyWithNestedWhereInput {
  @override
  final GFeedItemCategoryWhereInput where;
  @override
  final GFeedItemCategoryUpdateManyInput data;

  factory _$GFeedItemCategoryUpdateManyWithNestedWhereInput(
          [void Function(
                  GFeedItemCategoryUpdateManyWithNestedWhereInputBuilder)?
              updates]) =>
      (new GFeedItemCategoryUpdateManyWithNestedWhereInputBuilder()
            ..update(updates))
          .build();

  _$GFeedItemCategoryUpdateManyWithNestedWhereInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GFeedItemCategoryUpdateManyWithNestedWhereInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GFeedItemCategoryUpdateManyWithNestedWhereInput', 'data');
  }

  @override
  GFeedItemCategoryUpdateManyWithNestedWhereInput rebuild(
          void Function(GFeedItemCategoryUpdateManyWithNestedWhereInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryUpdateManyWithNestedWhereInputBuilder toBuilder() =>
      new GFeedItemCategoryUpdateManyWithNestedWhereInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryUpdateManyWithNestedWhereInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GFeedItemCategoryUpdateManyWithNestedWhereInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GFeedItemCategoryUpdateManyWithNestedWhereInputBuilder
    implements
        Builder<GFeedItemCategoryUpdateManyWithNestedWhereInput,
            GFeedItemCategoryUpdateManyWithNestedWhereInputBuilder> {
  _$GFeedItemCategoryUpdateManyWithNestedWhereInput? _$v;

  GFeedItemCategoryWhereInputBuilder? _where;
  GFeedItemCategoryWhereInputBuilder get where =>
      _$this._where ??= new GFeedItemCategoryWhereInputBuilder();
  set where(GFeedItemCategoryWhereInputBuilder? where) => _$this._where = where;

  GFeedItemCategoryUpdateManyInputBuilder? _data;
  GFeedItemCategoryUpdateManyInputBuilder get data =>
      _$this._data ??= new GFeedItemCategoryUpdateManyInputBuilder();
  set data(GFeedItemCategoryUpdateManyInputBuilder? data) =>
      _$this._data = data;

  GFeedItemCategoryUpdateManyWithNestedWhereInputBuilder();

  GFeedItemCategoryUpdateManyWithNestedWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryUpdateManyWithNestedWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryUpdateManyWithNestedWhereInput;
  }

  @override
  void update(
      void Function(GFeedItemCategoryUpdateManyWithNestedWhereInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryUpdateManyWithNestedWhereInput build() {
    _$GFeedItemCategoryUpdateManyWithNestedWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryUpdateManyWithNestedWhereInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryUpdateManyWithNestedWhereInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryUpdateOneInlineInput
    extends GFeedItemCategoryUpdateOneInlineInput {
  @override
  final GFeedItemCategoryCreateInput? create;
  @override
  final GFeedItemCategoryUpdateWithNestedWhereUniqueInput? updateIt;
  @override
  final GFeedItemCategoryUpsertWithNestedWhereUniqueInput? upsert;
  @override
  final GFeedItemCategoryWhereUniqueInput? connect;
  @override
  final bool? disconnect;
  @override
  final bool? delete;

  factory _$GFeedItemCategoryUpdateOneInlineInput(
          [void Function(GFeedItemCategoryUpdateOneInlineInputBuilder)?
              updates]) =>
      (new GFeedItemCategoryUpdateOneInlineInputBuilder()..update(updates))
          .build();

  _$GFeedItemCategoryUpdateOneInlineInput._(
      {this.create,
      this.updateIt,
      this.upsert,
      this.connect,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GFeedItemCategoryUpdateOneInlineInput rebuild(
          void Function(GFeedItemCategoryUpdateOneInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryUpdateOneInlineInputBuilder toBuilder() =>
      new GFeedItemCategoryUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryUpdateOneInlineInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        connect == other.connect &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc($jc($jc(0, create.hashCode), updateIt.hashCode),
                    upsert.hashCode),
                connect.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCategoryUpdateOneInlineInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('connect', connect)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GFeedItemCategoryUpdateOneInlineInputBuilder
    implements
        Builder<GFeedItemCategoryUpdateOneInlineInput,
            GFeedItemCategoryUpdateOneInlineInputBuilder> {
  _$GFeedItemCategoryUpdateOneInlineInput? _$v;

  GFeedItemCategoryCreateInputBuilder? _create;
  GFeedItemCategoryCreateInputBuilder get create =>
      _$this._create ??= new GFeedItemCategoryCreateInputBuilder();
  set create(GFeedItemCategoryCreateInputBuilder? create) =>
      _$this._create = create;

  GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder? _updateIt;
  GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder get updateIt =>
      _$this._updateIt ??=
          new GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder();
  set updateIt(
          GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder? _upsert;
  GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder get upsert =>
      _$this._upsert ??=
          new GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder();
  set upsert(
          GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder? upsert) =>
      _$this._upsert = upsert;

  GFeedItemCategoryWhereUniqueInputBuilder? _connect;
  GFeedItemCategoryWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GFeedItemCategoryWhereUniqueInputBuilder();
  set connect(GFeedItemCategoryWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  bool? _delete;
  bool? get delete => _$this._delete;
  set delete(bool? delete) => _$this._delete = delete;

  GFeedItemCategoryUpdateOneInlineInputBuilder();

  GFeedItemCategoryUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _delete = $v.delete;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryUpdateOneInlineInput;
  }

  @override
  void update(
      void Function(GFeedItemCategoryUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryUpdateOneInlineInput build() {
    _$GFeedItemCategoryUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryUpdateOneInlineInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              connect: _connect?.build(),
              disconnect: disconnect,
              delete: delete);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryUpdateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryUpdateWithNestedWhereUniqueInput
    extends GFeedItemCategoryUpdateWithNestedWhereUniqueInput {
  @override
  final GFeedItemCategoryWhereUniqueInput where;
  @override
  final GFeedItemCategoryUpdateInput data;

  factory _$GFeedItemCategoryUpdateWithNestedWhereUniqueInput(
          [void Function(
                  GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder()
            ..update(updates))
          .build();

  _$GFeedItemCategoryUpdateWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GFeedItemCategoryUpdateWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GFeedItemCategoryUpdateWithNestedWhereUniqueInput', 'data');
  }

  @override
  GFeedItemCategoryUpdateWithNestedWhereUniqueInput rebuild(
          void Function(
                  GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryUpdateWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GFeedItemCategoryUpdateWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder
    implements
        Builder<GFeedItemCategoryUpdateWithNestedWhereUniqueInput,
            GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder> {
  _$GFeedItemCategoryUpdateWithNestedWhereUniqueInput? _$v;

  GFeedItemCategoryWhereUniqueInputBuilder? _where;
  GFeedItemCategoryWhereUniqueInputBuilder get where =>
      _$this._where ??= new GFeedItemCategoryWhereUniqueInputBuilder();
  set where(GFeedItemCategoryWhereUniqueInputBuilder? where) =>
      _$this._where = where;

  GFeedItemCategoryUpdateInputBuilder? _data;
  GFeedItemCategoryUpdateInputBuilder get data =>
      _$this._data ??= new GFeedItemCategoryUpdateInputBuilder();
  set data(GFeedItemCategoryUpdateInputBuilder? data) => _$this._data = data;

  GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder();

  GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryUpdateWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryUpdateWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GFeedItemCategoryUpdateWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryUpdateWithNestedWhereUniqueInput build() {
    _$GFeedItemCategoryUpdateWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryUpdateWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryUpdateWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryUpsertInput extends GFeedItemCategoryUpsertInput {
  @override
  final GFeedItemCategoryCreateInput create;
  @override
  final GFeedItemCategoryUpdateInput updateIt;

  factory _$GFeedItemCategoryUpsertInput(
          [void Function(GFeedItemCategoryUpsertInputBuilder)? updates]) =>
      (new GFeedItemCategoryUpsertInputBuilder()..update(updates)).build();

  _$GFeedItemCategoryUpsertInput._(
      {required this.create, required this.updateIt})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        create, 'GFeedItemCategoryUpsertInput', 'create');
    BuiltValueNullFieldError.checkNotNull(
        updateIt, 'GFeedItemCategoryUpsertInput', 'updateIt');
  }

  @override
  GFeedItemCategoryUpsertInput rebuild(
          void Function(GFeedItemCategoryUpsertInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryUpsertInputBuilder toBuilder() =>
      new GFeedItemCategoryUpsertInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryUpsertInput &&
        create == other.create &&
        updateIt == other.updateIt;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), updateIt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCategoryUpsertInput')
          ..add('create', create)
          ..add('updateIt', updateIt))
        .toString();
  }
}

class GFeedItemCategoryUpsertInputBuilder
    implements
        Builder<GFeedItemCategoryUpsertInput,
            GFeedItemCategoryUpsertInputBuilder> {
  _$GFeedItemCategoryUpsertInput? _$v;

  GFeedItemCategoryCreateInputBuilder? _create;
  GFeedItemCategoryCreateInputBuilder get create =>
      _$this._create ??= new GFeedItemCategoryCreateInputBuilder();
  set create(GFeedItemCategoryCreateInputBuilder? create) =>
      _$this._create = create;

  GFeedItemCategoryUpdateInputBuilder? _updateIt;
  GFeedItemCategoryUpdateInputBuilder get updateIt =>
      _$this._updateIt ??= new GFeedItemCategoryUpdateInputBuilder();
  set updateIt(GFeedItemCategoryUpdateInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GFeedItemCategoryUpsertInputBuilder();

  GFeedItemCategoryUpsertInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create.toBuilder();
      _updateIt = $v.updateIt.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryUpsertInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryUpsertInput;
  }

  @override
  void update(void Function(GFeedItemCategoryUpsertInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryUpsertInput build() {
    _$GFeedItemCategoryUpsertInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryUpsertInput._(
              create: create.build(), updateIt: updateIt.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        create.build();
        _$failedField = 'updateIt';
        updateIt.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryUpsertInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryUpsertWithNestedWhereUniqueInput
    extends GFeedItemCategoryUpsertWithNestedWhereUniqueInput {
  @override
  final GFeedItemCategoryWhereUniqueInput where;
  @override
  final GFeedItemCategoryUpsertInput data;

  factory _$GFeedItemCategoryUpsertWithNestedWhereUniqueInput(
          [void Function(
                  GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder()
            ..update(updates))
          .build();

  _$GFeedItemCategoryUpsertWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GFeedItemCategoryUpsertWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GFeedItemCategoryUpsertWithNestedWhereUniqueInput', 'data');
  }

  @override
  GFeedItemCategoryUpsertWithNestedWhereUniqueInput rebuild(
          void Function(
                  GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryUpsertWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GFeedItemCategoryUpsertWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder
    implements
        Builder<GFeedItemCategoryUpsertWithNestedWhereUniqueInput,
            GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder> {
  _$GFeedItemCategoryUpsertWithNestedWhereUniqueInput? _$v;

  GFeedItemCategoryWhereUniqueInputBuilder? _where;
  GFeedItemCategoryWhereUniqueInputBuilder get where =>
      _$this._where ??= new GFeedItemCategoryWhereUniqueInputBuilder();
  set where(GFeedItemCategoryWhereUniqueInputBuilder? where) =>
      _$this._where = where;

  GFeedItemCategoryUpsertInputBuilder? _data;
  GFeedItemCategoryUpsertInputBuilder get data =>
      _$this._data ??= new GFeedItemCategoryUpsertInputBuilder();
  set data(GFeedItemCategoryUpsertInputBuilder? data) => _$this._data = data;

  GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder();

  GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryUpsertWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryUpsertWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GFeedItemCategoryUpsertWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryUpsertWithNestedWhereUniqueInput build() {
    _$GFeedItemCategoryUpsertWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryUpsertWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryUpsertWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryWhereInput extends GFeedItemCategoryWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GFeedItemCategoryWhereInput>? AND;
  @override
  final BuiltList<GFeedItemCategoryWhereInput>? OR;
  @override
  final BuiltList<GFeedItemCategoryWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String>? title_in;
  @override
  final BuiltList<String>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GAssetWhereInput? mainImage;
  @override
  final GCategoryTitle? categoryTitle;
  @override
  final GCategoryTitle? categoryTitle_not;
  @override
  final BuiltList<GCategoryTitle>? categoryTitle_in;
  @override
  final BuiltList<GCategoryTitle>? categoryTitle_not_in;

  factory _$GFeedItemCategoryWhereInput(
          [void Function(GFeedItemCategoryWhereInputBuilder)? updates]) =>
      (new GFeedItemCategoryWhereInputBuilder()..update(updates)).build();

  _$GFeedItemCategoryWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.createdBy,
      this.updatedBy,
      this.publishedBy,
      this.mainImage,
      this.categoryTitle,
      this.categoryTitle_not,
      this.categoryTitle_in,
      this.categoryTitle_not_in})
      : super._();

  @override
  GFeedItemCategoryWhereInput rebuild(
          void Function(GFeedItemCategoryWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryWhereInputBuilder toBuilder() =>
      new GFeedItemCategoryWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        createdBy == other.createdBy &&
        updatedBy == other.updatedBy &&
        publishedBy == other.publishedBy &&
        mainImage == other.mainImage &&
        categoryTitle == other.categoryTitle &&
        categoryTitle_not == other.categoryTitle_not &&
        categoryTitle_in == other.categoryTitle_in &&
        categoryTitle_not_in == other.categoryTitle_not_in;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode), publishedAt_lt.hashCode), publishedAt_lte.hashCode), publishedAt_gt.hashCode),
                                                                                publishedAt_gte.hashCode),
                                                                            title.hashCode),
                                                                        title_not.hashCode),
                                                                    title_in.hashCode),
                                                                title_not_in.hashCode),
                                                            title_contains.hashCode),
                                                        title_not_contains.hashCode),
                                                    title_starts_with.hashCode),
                                                title_not_starts_with.hashCode),
                                            title_ends_with.hashCode),
                                        title_not_ends_with.hashCode),
                                    createdBy.hashCode),
                                updatedBy.hashCode),
                            publishedBy.hashCode),
                        mainImage.hashCode),
                    categoryTitle.hashCode),
                categoryTitle_not.hashCode),
            categoryTitle_in.hashCode),
        categoryTitle_not_in.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCategoryWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('createdBy', createdBy)
          ..add('updatedBy', updatedBy)
          ..add('publishedBy', publishedBy)
          ..add('mainImage', mainImage)
          ..add('categoryTitle', categoryTitle)
          ..add('categoryTitle_not', categoryTitle_not)
          ..add('categoryTitle_in', categoryTitle_in)
          ..add('categoryTitle_not_in', categoryTitle_not_in))
        .toString();
  }
}

class GFeedItemCategoryWhereInputBuilder
    implements
        Builder<GFeedItemCategoryWhereInput,
            GFeedItemCategoryWhereInputBuilder> {
  _$GFeedItemCategoryWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GFeedItemCategoryWhereInput>? _AND;
  ListBuilder<GFeedItemCategoryWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GFeedItemCategoryWhereInput>();
  set AND(ListBuilder<GFeedItemCategoryWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GFeedItemCategoryWhereInput>? _OR;
  ListBuilder<GFeedItemCategoryWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GFeedItemCategoryWhereInput>();
  set OR(ListBuilder<GFeedItemCategoryWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GFeedItemCategoryWhereInput>? _NOT;
  ListBuilder<GFeedItemCategoryWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GFeedItemCategoryWhereInput>();
  set NOT(ListBuilder<GFeedItemCategoryWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String>? _title_in;
  ListBuilder<String> get title_in =>
      _$this._title_in ??= new ListBuilder<String>();
  set title_in(ListBuilder<String>? title_in) => _$this._title_in = title_in;

  ListBuilder<String>? _title_not_in;
  ListBuilder<String> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String>();
  set title_not_in(ListBuilder<String>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GAssetWhereInputBuilder? _mainImage;
  GAssetWhereInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetWhereInputBuilder();
  set mainImage(GAssetWhereInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GCategoryTitle? _categoryTitle;
  GCategoryTitle? get categoryTitle => _$this._categoryTitle;
  set categoryTitle(GCategoryTitle? categoryTitle) =>
      _$this._categoryTitle = categoryTitle;

  GCategoryTitle? _categoryTitle_not;
  GCategoryTitle? get categoryTitle_not => _$this._categoryTitle_not;
  set categoryTitle_not(GCategoryTitle? categoryTitle_not) =>
      _$this._categoryTitle_not = categoryTitle_not;

  ListBuilder<GCategoryTitle>? _categoryTitle_in;
  ListBuilder<GCategoryTitle> get categoryTitle_in =>
      _$this._categoryTitle_in ??= new ListBuilder<GCategoryTitle>();
  set categoryTitle_in(ListBuilder<GCategoryTitle>? categoryTitle_in) =>
      _$this._categoryTitle_in = categoryTitle_in;

  ListBuilder<GCategoryTitle>? _categoryTitle_not_in;
  ListBuilder<GCategoryTitle> get categoryTitle_not_in =>
      _$this._categoryTitle_not_in ??= new ListBuilder<GCategoryTitle>();
  set categoryTitle_not_in(ListBuilder<GCategoryTitle>? categoryTitle_not_in) =>
      _$this._categoryTitle_not_in = categoryTitle_not_in;

  GFeedItemCategoryWhereInputBuilder();

  GFeedItemCategoryWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _createdBy = $v.createdBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _mainImage = $v.mainImage?.toBuilder();
      _categoryTitle = $v.categoryTitle;
      _categoryTitle_not = $v.categoryTitle_not;
      _categoryTitle_in = $v.categoryTitle_in?.toBuilder();
      _categoryTitle_not_in = $v.categoryTitle_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryWhereInput;
  }

  @override
  void update(void Function(GFeedItemCategoryWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryWhereInput build() {
    _$GFeedItemCategoryWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCategoryWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              createdBy: _createdBy?.build(),
              updatedBy: _updatedBy?.build(),
              publishedBy: _publishedBy?.build(),
              mainImage: _mainImage?.build(),
              categoryTitle: categoryTitle,
              categoryTitle_not: categoryTitle_not,
              categoryTitle_in: _categoryTitle_in?.build(),
              categoryTitle_not_in: _categoryTitle_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'mainImage';
        _mainImage?.build();

        _$failedField = 'categoryTitle_in';
        _categoryTitle_in?.build();
        _$failedField = 'categoryTitle_not_in';
        _categoryTitle_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCategoryWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCategoryWhereUniqueInput
    extends GFeedItemCategoryWhereUniqueInput {
  @override
  final String? id;

  factory _$GFeedItemCategoryWhereUniqueInput(
          [void Function(GFeedItemCategoryWhereUniqueInputBuilder)? updates]) =>
      (new GFeedItemCategoryWhereUniqueInputBuilder()..update(updates)).build();

  _$GFeedItemCategoryWhereUniqueInput._({this.id}) : super._();

  @override
  GFeedItemCategoryWhereUniqueInput rebuild(
          void Function(GFeedItemCategoryWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCategoryWhereUniqueInputBuilder toBuilder() =>
      new GFeedItemCategoryWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCategoryWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCategoryWhereUniqueInput')
          ..add('id', id))
        .toString();
  }
}

class GFeedItemCategoryWhereUniqueInputBuilder
    implements
        Builder<GFeedItemCategoryWhereUniqueInput,
            GFeedItemCategoryWhereUniqueInputBuilder> {
  _$GFeedItemCategoryWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GFeedItemCategoryWhereUniqueInputBuilder();

  GFeedItemCategoryWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCategoryWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCategoryWhereUniqueInput;
  }

  @override
  void update(
      void Function(GFeedItemCategoryWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCategoryWhereUniqueInput build() {
    final _$result = _$v ?? new _$GFeedItemCategoryWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemConnectInput extends GFeedItemConnectInput {
  @override
  final GFeedItemWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GFeedItemConnectInput(
          [void Function(GFeedItemConnectInputBuilder)? updates]) =>
      (new GFeedItemConnectInputBuilder()..update(updates)).build();

  _$GFeedItemConnectInput._({required this.where, this.position}) : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GFeedItemConnectInput', 'where');
  }

  @override
  GFeedItemConnectInput rebuild(
          void Function(GFeedItemConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemConnectInputBuilder toBuilder() =>
      new GFeedItemConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), position.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GFeedItemConnectInputBuilder
    implements Builder<GFeedItemConnectInput, GFeedItemConnectInputBuilder> {
  _$GFeedItemConnectInput? _$v;

  GFeedItemWhereUniqueInputBuilder? _where;
  GFeedItemWhereUniqueInputBuilder get where =>
      _$this._where ??= new GFeedItemWhereUniqueInputBuilder();
  set where(GFeedItemWhereUniqueInputBuilder? where) => _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GFeedItemConnectInputBuilder();

  GFeedItemConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemConnectInput;
  }

  @override
  void update(void Function(GFeedItemConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemConnectInput build() {
    _$GFeedItemConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCreateInput extends GFeedItemCreateInput {
  @override
  final DateTime? createdAt;
  @override
  final DateTime? updatedAt;
  @override
  final String? title;
  @override
  final String? subtitle;
  @override
  final String? description;
  @override
  final String? mainContent;
  @override
  final GAssetCreateOneInlineInput? mainImage;
  @override
  final GAssetCreateOneInlineInput? video;
  @override
  final GCategoryCreateManyInlineInput? categories;

  factory _$GFeedItemCreateInput(
          [void Function(GFeedItemCreateInputBuilder)? updates]) =>
      (new GFeedItemCreateInputBuilder()..update(updates)).build();

  _$GFeedItemCreateInput._(
      {this.createdAt,
      this.updatedAt,
      this.title,
      this.subtitle,
      this.description,
      this.mainContent,
      this.mainImage,
      this.video,
      this.categories})
      : super._();

  @override
  GFeedItemCreateInput rebuild(
          void Function(GFeedItemCreateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCreateInputBuilder toBuilder() =>
      new GFeedItemCreateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCreateInput &&
        createdAt == other.createdAt &&
        updatedAt == other.updatedAt &&
        title == other.title &&
        subtitle == other.subtitle &&
        description == other.description &&
        mainContent == other.mainContent &&
        mainImage == other.mainImage &&
        video == other.video &&
        categories == other.categories;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc($jc(0, createdAt.hashCode),
                                    updatedAt.hashCode),
                                title.hashCode),
                            subtitle.hashCode),
                        description.hashCode),
                    mainContent.hashCode),
                mainImage.hashCode),
            video.hashCode),
        categories.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCreateInput')
          ..add('createdAt', createdAt)
          ..add('updatedAt', updatedAt)
          ..add('title', title)
          ..add('subtitle', subtitle)
          ..add('description', description)
          ..add('mainContent', mainContent)
          ..add('mainImage', mainImage)
          ..add('video', video)
          ..add('categories', categories))
        .toString();
  }
}

class GFeedItemCreateInputBuilder
    implements Builder<GFeedItemCreateInput, GFeedItemCreateInputBuilder> {
  _$GFeedItemCreateInput? _$v;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _subtitle;
  String? get subtitle => _$this._subtitle;
  set subtitle(String? subtitle) => _$this._subtitle = subtitle;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _mainContent;
  String? get mainContent => _$this._mainContent;
  set mainContent(String? mainContent) => _$this._mainContent = mainContent;

  GAssetCreateOneInlineInputBuilder? _mainImage;
  GAssetCreateOneInlineInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetCreateOneInlineInputBuilder();
  set mainImage(GAssetCreateOneInlineInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GAssetCreateOneInlineInputBuilder? _video;
  GAssetCreateOneInlineInputBuilder get video =>
      _$this._video ??= new GAssetCreateOneInlineInputBuilder();
  set video(GAssetCreateOneInlineInputBuilder? video) => _$this._video = video;

  GCategoryCreateManyInlineInputBuilder? _categories;
  GCategoryCreateManyInlineInputBuilder get categories =>
      _$this._categories ??= new GCategoryCreateManyInlineInputBuilder();
  set categories(GCategoryCreateManyInlineInputBuilder? categories) =>
      _$this._categories = categories;

  GFeedItemCreateInputBuilder();

  GFeedItemCreateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _createdAt = $v.createdAt;
      _updatedAt = $v.updatedAt;
      _title = $v.title;
      _subtitle = $v.subtitle;
      _description = $v.description;
      _mainContent = $v.mainContent;
      _mainImage = $v.mainImage?.toBuilder();
      _video = $v.video?.toBuilder();
      _categories = $v.categories?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCreateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCreateInput;
  }

  @override
  void update(void Function(GFeedItemCreateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCreateInput build() {
    _$GFeedItemCreateInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCreateInput._(
              createdAt: createdAt,
              updatedAt: updatedAt,
              title: title,
              subtitle: subtitle,
              description: description,
              mainContent: mainContent,
              mainImage: _mainImage?.build(),
              video: _video?.build(),
              categories: _categories?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'mainImage';
        _mainImage?.build();
        _$failedField = 'video';
        _video?.build();
        _$failedField = 'categories';
        _categories?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCreateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCreateManyInlineInput extends GFeedItemCreateManyInlineInput {
  @override
  final BuiltList<GFeedItemCreateInput>? create;
  @override
  final BuiltList<GFeedItemWhereUniqueInput>? connect;

  factory _$GFeedItemCreateManyInlineInput(
          [void Function(GFeedItemCreateManyInlineInputBuilder)? updates]) =>
      (new GFeedItemCreateManyInlineInputBuilder()..update(updates)).build();

  _$GFeedItemCreateManyInlineInput._({this.create, this.connect}) : super._();

  @override
  GFeedItemCreateManyInlineInput rebuild(
          void Function(GFeedItemCreateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCreateManyInlineInputBuilder toBuilder() =>
      new GFeedItemCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCreateManyInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCreateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GFeedItemCreateManyInlineInputBuilder
    implements
        Builder<GFeedItemCreateManyInlineInput,
            GFeedItemCreateManyInlineInputBuilder> {
  _$GFeedItemCreateManyInlineInput? _$v;

  ListBuilder<GFeedItemCreateInput>? _create;
  ListBuilder<GFeedItemCreateInput> get create =>
      _$this._create ??= new ListBuilder<GFeedItemCreateInput>();
  set create(ListBuilder<GFeedItemCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GFeedItemWhereUniqueInput>? _connect;
  ListBuilder<GFeedItemWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GFeedItemWhereUniqueInput>();
  set connect(ListBuilder<GFeedItemWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GFeedItemCreateManyInlineInputBuilder();

  GFeedItemCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCreateManyInlineInput;
  }

  @override
  void update(void Function(GFeedItemCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCreateManyInlineInput build() {
    _$GFeedItemCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCreateManyInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCreateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemCreateOneInlineInput extends GFeedItemCreateOneInlineInput {
  @override
  final GFeedItemCreateInput? create;
  @override
  final GFeedItemWhereUniqueInput? connect;

  factory _$GFeedItemCreateOneInlineInput(
          [void Function(GFeedItemCreateOneInlineInputBuilder)? updates]) =>
      (new GFeedItemCreateOneInlineInputBuilder()..update(updates)).build();

  _$GFeedItemCreateOneInlineInput._({this.create, this.connect}) : super._();

  @override
  GFeedItemCreateOneInlineInput rebuild(
          void Function(GFeedItemCreateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemCreateOneInlineInputBuilder toBuilder() =>
      new GFeedItemCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemCreateOneInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemCreateOneInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GFeedItemCreateOneInlineInputBuilder
    implements
        Builder<GFeedItemCreateOneInlineInput,
            GFeedItemCreateOneInlineInputBuilder> {
  _$GFeedItemCreateOneInlineInput? _$v;

  GFeedItemCreateInputBuilder? _create;
  GFeedItemCreateInputBuilder get create =>
      _$this._create ??= new GFeedItemCreateInputBuilder();
  set create(GFeedItemCreateInputBuilder? create) => _$this._create = create;

  GFeedItemWhereUniqueInputBuilder? _connect;
  GFeedItemWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GFeedItemWhereUniqueInputBuilder();
  set connect(GFeedItemWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GFeedItemCreateOneInlineInputBuilder();

  GFeedItemCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemCreateOneInlineInput;
  }

  @override
  void update(void Function(GFeedItemCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemCreateOneInlineInput build() {
    _$GFeedItemCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemCreateOneInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemCreateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemManyWhereInput extends GFeedItemManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GFeedItemWhereInput>? AND;
  @override
  final BuiltList<GFeedItemWhereInput>? OR;
  @override
  final BuiltList<GFeedItemWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String>? title_in;
  @override
  final BuiltList<String>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final String? subtitle;
  @override
  final String? subtitle_not;
  @override
  final BuiltList<String>? subtitle_in;
  @override
  final BuiltList<String>? subtitle_not_in;
  @override
  final String? subtitle_contains;
  @override
  final String? subtitle_not_contains;
  @override
  final String? subtitle_starts_with;
  @override
  final String? subtitle_not_starts_with;
  @override
  final String? subtitle_ends_with;
  @override
  final String? subtitle_not_ends_with;
  @override
  final String? description;
  @override
  final String? description_not;
  @override
  final BuiltList<String>? description_in;
  @override
  final BuiltList<String>? description_not_in;
  @override
  final String? description_contains;
  @override
  final String? description_not_contains;
  @override
  final String? description_starts_with;
  @override
  final String? description_not_starts_with;
  @override
  final String? description_ends_with;
  @override
  final String? description_not_ends_with;
  @override
  final String? mainContent;
  @override
  final String? mainContent_not;
  @override
  final BuiltList<String>? mainContent_in;
  @override
  final BuiltList<String>? mainContent_not_in;
  @override
  final String? mainContent_contains;
  @override
  final String? mainContent_not_contains;
  @override
  final String? mainContent_starts_with;
  @override
  final String? mainContent_not_starts_with;
  @override
  final String? mainContent_ends_with;
  @override
  final String? mainContent_not_ends_with;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GAssetWhereInput? mainImage;
  @override
  final GAssetWhereInput? video;
  @override
  final GCategoryWhereInput? categories_every;
  @override
  final GCategoryWhereInput? categories_some;
  @override
  final GCategoryWhereInput? categories_none;

  factory _$GFeedItemManyWhereInput(
          [void Function(GFeedItemManyWhereInputBuilder)? updates]) =>
      (new GFeedItemManyWhereInputBuilder()..update(updates)).build();

  _$GFeedItemManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.subtitle,
      this.subtitle_not,
      this.subtitle_in,
      this.subtitle_not_in,
      this.subtitle_contains,
      this.subtitle_not_contains,
      this.subtitle_starts_with,
      this.subtitle_not_starts_with,
      this.subtitle_ends_with,
      this.subtitle_not_ends_with,
      this.description,
      this.description_not,
      this.description_in,
      this.description_not_in,
      this.description_contains,
      this.description_not_contains,
      this.description_starts_with,
      this.description_not_starts_with,
      this.description_ends_with,
      this.description_not_ends_with,
      this.mainContent,
      this.mainContent_not,
      this.mainContent_in,
      this.mainContent_not_in,
      this.mainContent_contains,
      this.mainContent_not_contains,
      this.mainContent_starts_with,
      this.mainContent_not_starts_with,
      this.mainContent_ends_with,
      this.mainContent_not_ends_with,
      this.createdBy,
      this.updatedBy,
      this.publishedBy,
      this.mainImage,
      this.video,
      this.categories_every,
      this.categories_some,
      this.categories_none})
      : super._();

  @override
  GFeedItemManyWhereInput rebuild(
          void Function(GFeedItemManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemManyWhereInputBuilder toBuilder() =>
      new GFeedItemManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        subtitle == other.subtitle &&
        subtitle_not == other.subtitle_not &&
        subtitle_in == other.subtitle_in &&
        subtitle_not_in == other.subtitle_not_in &&
        subtitle_contains == other.subtitle_contains &&
        subtitle_not_contains == other.subtitle_not_contains &&
        subtitle_starts_with == other.subtitle_starts_with &&
        subtitle_not_starts_with == other.subtitle_not_starts_with &&
        subtitle_ends_with == other.subtitle_ends_with &&
        subtitle_not_ends_with == other.subtitle_not_ends_with &&
        description == other.description &&
        description_not == other.description_not &&
        description_in == other.description_in &&
        description_not_in == other.description_not_in &&
        description_contains == other.description_contains &&
        description_not_contains == other.description_not_contains &&
        description_starts_with == other.description_starts_with &&
        description_not_starts_with == other.description_not_starts_with &&
        description_ends_with == other.description_ends_with &&
        description_not_ends_with == other.description_not_ends_with &&
        mainContent == other.mainContent &&
        mainContent_not == other.mainContent_not &&
        mainContent_in == other.mainContent_in &&
        mainContent_not_in == other.mainContent_not_in &&
        mainContent_contains == other.mainContent_contains &&
        mainContent_not_contains == other.mainContent_not_contains &&
        mainContent_starts_with == other.mainContent_starts_with &&
        mainContent_not_starts_with == other.mainContent_not_starts_with &&
        mainContent_ends_with == other.mainContent_ends_with &&
        mainContent_not_ends_with == other.mainContent_not_ends_with &&
        createdBy == other.createdBy &&
        updatedBy == other.updatedBy &&
        publishedBy == other.publishedBy &&
        mainImage == other.mainImage &&
        video == other.video &&
        categories_every == other.categories_every &&
        categories_some == other.categories_some &&
        categories_none == other.categories_none;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode), publishedAt_lt.hashCode), publishedAt_lte.hashCode), publishedAt_gt.hashCode), publishedAt_gte.hashCode), title.hashCode), title_not.hashCode), title_in.hashCode), title_not_in.hashCode), title_contains.hashCode), title_not_contains.hashCode), title_starts_with.hashCode), title_not_starts_with.hashCode), title_ends_with.hashCode), title_not_ends_with.hashCode), subtitle.hashCode), subtitle_not.hashCode), subtitle_in.hashCode), subtitle_not_in.hashCode), subtitle_contains.hashCode), subtitle_not_contains.hashCode), subtitle_starts_with.hashCode), subtitle_not_starts_with.hashCode), subtitle_ends_with.hashCode), subtitle_not_ends_with.hashCode), description.hashCode), description_not.hashCode), description_in.hashCode), description_not_in.hashCode), description_contains.hashCode), description_not_contains.hashCode), description_starts_with.hashCode), description_not_starts_with.hashCode), description_ends_with.hashCode),
                                                                                description_not_ends_with.hashCode),
                                                                            mainContent.hashCode),
                                                                        mainContent_not.hashCode),
                                                                    mainContent_in.hashCode),
                                                                mainContent_not_in.hashCode),
                                                            mainContent_contains.hashCode),
                                                        mainContent_not_contains.hashCode),
                                                    mainContent_starts_with.hashCode),
                                                mainContent_not_starts_with.hashCode),
                                            mainContent_ends_with.hashCode),
                                        mainContent_not_ends_with.hashCode),
                                    createdBy.hashCode),
                                updatedBy.hashCode),
                            publishedBy.hashCode),
                        mainImage.hashCode),
                    video.hashCode),
                categories_every.hashCode),
            categories_some.hashCode),
        categories_none.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('subtitle', subtitle)
          ..add('subtitle_not', subtitle_not)
          ..add('subtitle_in', subtitle_in)
          ..add('subtitle_not_in', subtitle_not_in)
          ..add('subtitle_contains', subtitle_contains)
          ..add('subtitle_not_contains', subtitle_not_contains)
          ..add('subtitle_starts_with', subtitle_starts_with)
          ..add('subtitle_not_starts_with', subtitle_not_starts_with)
          ..add('subtitle_ends_with', subtitle_ends_with)
          ..add('subtitle_not_ends_with', subtitle_not_ends_with)
          ..add('description', description)
          ..add('description_not', description_not)
          ..add('description_in', description_in)
          ..add('description_not_in', description_not_in)
          ..add('description_contains', description_contains)
          ..add('description_not_contains', description_not_contains)
          ..add('description_starts_with', description_starts_with)
          ..add('description_not_starts_with', description_not_starts_with)
          ..add('description_ends_with', description_ends_with)
          ..add('description_not_ends_with', description_not_ends_with)
          ..add('mainContent', mainContent)
          ..add('mainContent_not', mainContent_not)
          ..add('mainContent_in', mainContent_in)
          ..add('mainContent_not_in', mainContent_not_in)
          ..add('mainContent_contains', mainContent_contains)
          ..add('mainContent_not_contains', mainContent_not_contains)
          ..add('mainContent_starts_with', mainContent_starts_with)
          ..add('mainContent_not_starts_with', mainContent_not_starts_with)
          ..add('mainContent_ends_with', mainContent_ends_with)
          ..add('mainContent_not_ends_with', mainContent_not_ends_with)
          ..add('createdBy', createdBy)
          ..add('updatedBy', updatedBy)
          ..add('publishedBy', publishedBy)
          ..add('mainImage', mainImage)
          ..add('video', video)
          ..add('categories_every', categories_every)
          ..add('categories_some', categories_some)
          ..add('categories_none', categories_none))
        .toString();
  }
}

class GFeedItemManyWhereInputBuilder
    implements
        Builder<GFeedItemManyWhereInput, GFeedItemManyWhereInputBuilder> {
  _$GFeedItemManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GFeedItemWhereInput>? _AND;
  ListBuilder<GFeedItemWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GFeedItemWhereInput>();
  set AND(ListBuilder<GFeedItemWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GFeedItemWhereInput>? _OR;
  ListBuilder<GFeedItemWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GFeedItemWhereInput>();
  set OR(ListBuilder<GFeedItemWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GFeedItemWhereInput>? _NOT;
  ListBuilder<GFeedItemWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GFeedItemWhereInput>();
  set NOT(ListBuilder<GFeedItemWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String>? _title_in;
  ListBuilder<String> get title_in =>
      _$this._title_in ??= new ListBuilder<String>();
  set title_in(ListBuilder<String>? title_in) => _$this._title_in = title_in;

  ListBuilder<String>? _title_not_in;
  ListBuilder<String> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String>();
  set title_not_in(ListBuilder<String>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  String? _subtitle;
  String? get subtitle => _$this._subtitle;
  set subtitle(String? subtitle) => _$this._subtitle = subtitle;

  String? _subtitle_not;
  String? get subtitle_not => _$this._subtitle_not;
  set subtitle_not(String? subtitle_not) => _$this._subtitle_not = subtitle_not;

  ListBuilder<String>? _subtitle_in;
  ListBuilder<String> get subtitle_in =>
      _$this._subtitle_in ??= new ListBuilder<String>();
  set subtitle_in(ListBuilder<String>? subtitle_in) =>
      _$this._subtitle_in = subtitle_in;

  ListBuilder<String>? _subtitle_not_in;
  ListBuilder<String> get subtitle_not_in =>
      _$this._subtitle_not_in ??= new ListBuilder<String>();
  set subtitle_not_in(ListBuilder<String>? subtitle_not_in) =>
      _$this._subtitle_not_in = subtitle_not_in;

  String? _subtitle_contains;
  String? get subtitle_contains => _$this._subtitle_contains;
  set subtitle_contains(String? subtitle_contains) =>
      _$this._subtitle_contains = subtitle_contains;

  String? _subtitle_not_contains;
  String? get subtitle_not_contains => _$this._subtitle_not_contains;
  set subtitle_not_contains(String? subtitle_not_contains) =>
      _$this._subtitle_not_contains = subtitle_not_contains;

  String? _subtitle_starts_with;
  String? get subtitle_starts_with => _$this._subtitle_starts_with;
  set subtitle_starts_with(String? subtitle_starts_with) =>
      _$this._subtitle_starts_with = subtitle_starts_with;

  String? _subtitle_not_starts_with;
  String? get subtitle_not_starts_with => _$this._subtitle_not_starts_with;
  set subtitle_not_starts_with(String? subtitle_not_starts_with) =>
      _$this._subtitle_not_starts_with = subtitle_not_starts_with;

  String? _subtitle_ends_with;
  String? get subtitle_ends_with => _$this._subtitle_ends_with;
  set subtitle_ends_with(String? subtitle_ends_with) =>
      _$this._subtitle_ends_with = subtitle_ends_with;

  String? _subtitle_not_ends_with;
  String? get subtitle_not_ends_with => _$this._subtitle_not_ends_with;
  set subtitle_not_ends_with(String? subtitle_not_ends_with) =>
      _$this._subtitle_not_ends_with = subtitle_not_ends_with;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _description_not;
  String? get description_not => _$this._description_not;
  set description_not(String? description_not) =>
      _$this._description_not = description_not;

  ListBuilder<String>? _description_in;
  ListBuilder<String> get description_in =>
      _$this._description_in ??= new ListBuilder<String>();
  set description_in(ListBuilder<String>? description_in) =>
      _$this._description_in = description_in;

  ListBuilder<String>? _description_not_in;
  ListBuilder<String> get description_not_in =>
      _$this._description_not_in ??= new ListBuilder<String>();
  set description_not_in(ListBuilder<String>? description_not_in) =>
      _$this._description_not_in = description_not_in;

  String? _description_contains;
  String? get description_contains => _$this._description_contains;
  set description_contains(String? description_contains) =>
      _$this._description_contains = description_contains;

  String? _description_not_contains;
  String? get description_not_contains => _$this._description_not_contains;
  set description_not_contains(String? description_not_contains) =>
      _$this._description_not_contains = description_not_contains;

  String? _description_starts_with;
  String? get description_starts_with => _$this._description_starts_with;
  set description_starts_with(String? description_starts_with) =>
      _$this._description_starts_with = description_starts_with;

  String? _description_not_starts_with;
  String? get description_not_starts_with =>
      _$this._description_not_starts_with;
  set description_not_starts_with(String? description_not_starts_with) =>
      _$this._description_not_starts_with = description_not_starts_with;

  String? _description_ends_with;
  String? get description_ends_with => _$this._description_ends_with;
  set description_ends_with(String? description_ends_with) =>
      _$this._description_ends_with = description_ends_with;

  String? _description_not_ends_with;
  String? get description_not_ends_with => _$this._description_not_ends_with;
  set description_not_ends_with(String? description_not_ends_with) =>
      _$this._description_not_ends_with = description_not_ends_with;

  String? _mainContent;
  String? get mainContent => _$this._mainContent;
  set mainContent(String? mainContent) => _$this._mainContent = mainContent;

  String? _mainContent_not;
  String? get mainContent_not => _$this._mainContent_not;
  set mainContent_not(String? mainContent_not) =>
      _$this._mainContent_not = mainContent_not;

  ListBuilder<String>? _mainContent_in;
  ListBuilder<String> get mainContent_in =>
      _$this._mainContent_in ??= new ListBuilder<String>();
  set mainContent_in(ListBuilder<String>? mainContent_in) =>
      _$this._mainContent_in = mainContent_in;

  ListBuilder<String>? _mainContent_not_in;
  ListBuilder<String> get mainContent_not_in =>
      _$this._mainContent_not_in ??= new ListBuilder<String>();
  set mainContent_not_in(ListBuilder<String>? mainContent_not_in) =>
      _$this._mainContent_not_in = mainContent_not_in;

  String? _mainContent_contains;
  String? get mainContent_contains => _$this._mainContent_contains;
  set mainContent_contains(String? mainContent_contains) =>
      _$this._mainContent_contains = mainContent_contains;

  String? _mainContent_not_contains;
  String? get mainContent_not_contains => _$this._mainContent_not_contains;
  set mainContent_not_contains(String? mainContent_not_contains) =>
      _$this._mainContent_not_contains = mainContent_not_contains;

  String? _mainContent_starts_with;
  String? get mainContent_starts_with => _$this._mainContent_starts_with;
  set mainContent_starts_with(String? mainContent_starts_with) =>
      _$this._mainContent_starts_with = mainContent_starts_with;

  String? _mainContent_not_starts_with;
  String? get mainContent_not_starts_with =>
      _$this._mainContent_not_starts_with;
  set mainContent_not_starts_with(String? mainContent_not_starts_with) =>
      _$this._mainContent_not_starts_with = mainContent_not_starts_with;

  String? _mainContent_ends_with;
  String? get mainContent_ends_with => _$this._mainContent_ends_with;
  set mainContent_ends_with(String? mainContent_ends_with) =>
      _$this._mainContent_ends_with = mainContent_ends_with;

  String? _mainContent_not_ends_with;
  String? get mainContent_not_ends_with => _$this._mainContent_not_ends_with;
  set mainContent_not_ends_with(String? mainContent_not_ends_with) =>
      _$this._mainContent_not_ends_with = mainContent_not_ends_with;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GAssetWhereInputBuilder? _mainImage;
  GAssetWhereInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetWhereInputBuilder();
  set mainImage(GAssetWhereInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GAssetWhereInputBuilder? _video;
  GAssetWhereInputBuilder get video =>
      _$this._video ??= new GAssetWhereInputBuilder();
  set video(GAssetWhereInputBuilder? video) => _$this._video = video;

  GCategoryWhereInputBuilder? _categories_every;
  GCategoryWhereInputBuilder get categories_every =>
      _$this._categories_every ??= new GCategoryWhereInputBuilder();
  set categories_every(GCategoryWhereInputBuilder? categories_every) =>
      _$this._categories_every = categories_every;

  GCategoryWhereInputBuilder? _categories_some;
  GCategoryWhereInputBuilder get categories_some =>
      _$this._categories_some ??= new GCategoryWhereInputBuilder();
  set categories_some(GCategoryWhereInputBuilder? categories_some) =>
      _$this._categories_some = categories_some;

  GCategoryWhereInputBuilder? _categories_none;
  GCategoryWhereInputBuilder get categories_none =>
      _$this._categories_none ??= new GCategoryWhereInputBuilder();
  set categories_none(GCategoryWhereInputBuilder? categories_none) =>
      _$this._categories_none = categories_none;

  GFeedItemManyWhereInputBuilder();

  GFeedItemManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _subtitle = $v.subtitle;
      _subtitle_not = $v.subtitle_not;
      _subtitle_in = $v.subtitle_in?.toBuilder();
      _subtitle_not_in = $v.subtitle_not_in?.toBuilder();
      _subtitle_contains = $v.subtitle_contains;
      _subtitle_not_contains = $v.subtitle_not_contains;
      _subtitle_starts_with = $v.subtitle_starts_with;
      _subtitle_not_starts_with = $v.subtitle_not_starts_with;
      _subtitle_ends_with = $v.subtitle_ends_with;
      _subtitle_not_ends_with = $v.subtitle_not_ends_with;
      _description = $v.description;
      _description_not = $v.description_not;
      _description_in = $v.description_in?.toBuilder();
      _description_not_in = $v.description_not_in?.toBuilder();
      _description_contains = $v.description_contains;
      _description_not_contains = $v.description_not_contains;
      _description_starts_with = $v.description_starts_with;
      _description_not_starts_with = $v.description_not_starts_with;
      _description_ends_with = $v.description_ends_with;
      _description_not_ends_with = $v.description_not_ends_with;
      _mainContent = $v.mainContent;
      _mainContent_not = $v.mainContent_not;
      _mainContent_in = $v.mainContent_in?.toBuilder();
      _mainContent_not_in = $v.mainContent_not_in?.toBuilder();
      _mainContent_contains = $v.mainContent_contains;
      _mainContent_not_contains = $v.mainContent_not_contains;
      _mainContent_starts_with = $v.mainContent_starts_with;
      _mainContent_not_starts_with = $v.mainContent_not_starts_with;
      _mainContent_ends_with = $v.mainContent_ends_with;
      _mainContent_not_ends_with = $v.mainContent_not_ends_with;
      _createdBy = $v.createdBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _mainImage = $v.mainImage?.toBuilder();
      _video = $v.video?.toBuilder();
      _categories_every = $v.categories_every?.toBuilder();
      _categories_some = $v.categories_some?.toBuilder();
      _categories_none = $v.categories_none?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemManyWhereInput;
  }

  @override
  void update(void Function(GFeedItemManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemManyWhereInput build() {
    _$GFeedItemManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              subtitle: subtitle,
              subtitle_not: subtitle_not,
              subtitle_in: _subtitle_in?.build(),
              subtitle_not_in: _subtitle_not_in?.build(),
              subtitle_contains: subtitle_contains,
              subtitle_not_contains: subtitle_not_contains,
              subtitle_starts_with: subtitle_starts_with,
              subtitle_not_starts_with: subtitle_not_starts_with,
              subtitle_ends_with: subtitle_ends_with,
              subtitle_not_ends_with: subtitle_not_ends_with,
              description: description,
              description_not: description_not,
              description_in: _description_in?.build(),
              description_not_in: _description_not_in?.build(),
              description_contains: description_contains,
              description_not_contains: description_not_contains,
              description_starts_with: description_starts_with,
              description_not_starts_with: description_not_starts_with,
              description_ends_with: description_ends_with,
              description_not_ends_with: description_not_ends_with,
              mainContent: mainContent,
              mainContent_not: mainContent_not,
              mainContent_in: _mainContent_in?.build(),
              mainContent_not_in: _mainContent_not_in?.build(),
              mainContent_contains: mainContent_contains,
              mainContent_not_contains: mainContent_not_contains,
              mainContent_starts_with: mainContent_starts_with,
              mainContent_not_starts_with: mainContent_not_starts_with,
              mainContent_ends_with: mainContent_ends_with,
              mainContent_not_ends_with: mainContent_not_ends_with,
              createdBy: _createdBy?.build(),
              updatedBy: _updatedBy?.build(),
              publishedBy: _publishedBy?.build(),
              mainImage: _mainImage?.build(),
              video: _video?.build(),
              categories_every: _categories_every?.build(),
              categories_some: _categories_some?.build(),
              categories_none: _categories_none?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'subtitle_in';
        _subtitle_in?.build();
        _$failedField = 'subtitle_not_in';
        _subtitle_not_in?.build();

        _$failedField = 'description_in';
        _description_in?.build();
        _$failedField = 'description_not_in';
        _description_not_in?.build();

        _$failedField = 'mainContent_in';
        _mainContent_in?.build();
        _$failedField = 'mainContent_not_in';
        _mainContent_not_in?.build();

        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'mainImage';
        _mainImage?.build();
        _$failedField = 'video';
        _video?.build();
        _$failedField = 'categories_every';
        _categories_every?.build();
        _$failedField = 'categories_some';
        _categories_some?.build();
        _$failedField = 'categories_none';
        _categories_none?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemUpdateInput extends GFeedItemUpdateInput {
  @override
  final String? title;
  @override
  final String? subtitle;
  @override
  final String? description;
  @override
  final String? mainContent;
  @override
  final GAssetUpdateOneInlineInput? mainImage;
  @override
  final GAssetUpdateOneInlineInput? video;
  @override
  final GCategoryUpdateManyInlineInput? categories;

  factory _$GFeedItemUpdateInput(
          [void Function(GFeedItemUpdateInputBuilder)? updates]) =>
      (new GFeedItemUpdateInputBuilder()..update(updates)).build();

  _$GFeedItemUpdateInput._(
      {this.title,
      this.subtitle,
      this.description,
      this.mainContent,
      this.mainImage,
      this.video,
      this.categories})
      : super._();

  @override
  GFeedItemUpdateInput rebuild(
          void Function(GFeedItemUpdateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemUpdateInputBuilder toBuilder() =>
      new GFeedItemUpdateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemUpdateInput &&
        title == other.title &&
        subtitle == other.subtitle &&
        description == other.description &&
        mainContent == other.mainContent &&
        mainImage == other.mainImage &&
        video == other.video &&
        categories == other.categories;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, title.hashCode), subtitle.hashCode),
                        description.hashCode),
                    mainContent.hashCode),
                mainImage.hashCode),
            video.hashCode),
        categories.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemUpdateInput')
          ..add('title', title)
          ..add('subtitle', subtitle)
          ..add('description', description)
          ..add('mainContent', mainContent)
          ..add('mainImage', mainImage)
          ..add('video', video)
          ..add('categories', categories))
        .toString();
  }
}

class GFeedItemUpdateInputBuilder
    implements Builder<GFeedItemUpdateInput, GFeedItemUpdateInputBuilder> {
  _$GFeedItemUpdateInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _subtitle;
  String? get subtitle => _$this._subtitle;
  set subtitle(String? subtitle) => _$this._subtitle = subtitle;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _mainContent;
  String? get mainContent => _$this._mainContent;
  set mainContent(String? mainContent) => _$this._mainContent = mainContent;

  GAssetUpdateOneInlineInputBuilder? _mainImage;
  GAssetUpdateOneInlineInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetUpdateOneInlineInputBuilder();
  set mainImage(GAssetUpdateOneInlineInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GAssetUpdateOneInlineInputBuilder? _video;
  GAssetUpdateOneInlineInputBuilder get video =>
      _$this._video ??= new GAssetUpdateOneInlineInputBuilder();
  set video(GAssetUpdateOneInlineInputBuilder? video) => _$this._video = video;

  GCategoryUpdateManyInlineInputBuilder? _categories;
  GCategoryUpdateManyInlineInputBuilder get categories =>
      _$this._categories ??= new GCategoryUpdateManyInlineInputBuilder();
  set categories(GCategoryUpdateManyInlineInputBuilder? categories) =>
      _$this._categories = categories;

  GFeedItemUpdateInputBuilder();

  GFeedItemUpdateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _subtitle = $v.subtitle;
      _description = $v.description;
      _mainContent = $v.mainContent;
      _mainImage = $v.mainImage?.toBuilder();
      _video = $v.video?.toBuilder();
      _categories = $v.categories?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemUpdateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemUpdateInput;
  }

  @override
  void update(void Function(GFeedItemUpdateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemUpdateInput build() {
    _$GFeedItemUpdateInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemUpdateInput._(
              title: title,
              subtitle: subtitle,
              description: description,
              mainContent: mainContent,
              mainImage: _mainImage?.build(),
              video: _video?.build(),
              categories: _categories?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'mainImage';
        _mainImage?.build();
        _$failedField = 'video';
        _video?.build();
        _$failedField = 'categories';
        _categories?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemUpdateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemUpdateManyInlineInput extends GFeedItemUpdateManyInlineInput {
  @override
  final BuiltList<GFeedItemCreateInput>? create;
  @override
  final BuiltList<GFeedItemConnectInput>? connect;
  @override
  final BuiltList<GFeedItemWhereUniqueInput>? set;
  @override
  final BuiltList<GFeedItemUpdateWithNestedWhereUniqueInput>? updateIt;
  @override
  final BuiltList<GFeedItemUpsertWithNestedWhereUniqueInput>? upsert;
  @override
  final BuiltList<GFeedItemWhereUniqueInput>? disconnect;
  @override
  final BuiltList<GFeedItemWhereUniqueInput>? delete;

  factory _$GFeedItemUpdateManyInlineInput(
          [void Function(GFeedItemUpdateManyInlineInputBuilder)? updates]) =>
      (new GFeedItemUpdateManyInlineInputBuilder()..update(updates)).build();

  _$GFeedItemUpdateManyInlineInput._(
      {this.create,
      this.connect,
      this.set,
      this.updateIt,
      this.upsert,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GFeedItemUpdateManyInlineInput rebuild(
          void Function(GFeedItemUpdateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemUpdateManyInlineInputBuilder toBuilder() =>
      new GFeedItemUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemUpdateManyInlineInput &&
        create == other.create &&
        connect == other.connect &&
        set == other.set &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, create.hashCode), connect.hashCode),
                        set.hashCode),
                    updateIt.hashCode),
                upsert.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemUpdateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect)
          ..add('set', set)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GFeedItemUpdateManyInlineInputBuilder
    implements
        Builder<GFeedItemUpdateManyInlineInput,
            GFeedItemUpdateManyInlineInputBuilder> {
  _$GFeedItemUpdateManyInlineInput? _$v;

  ListBuilder<GFeedItemCreateInput>? _create;
  ListBuilder<GFeedItemCreateInput> get create =>
      _$this._create ??= new ListBuilder<GFeedItemCreateInput>();
  set create(ListBuilder<GFeedItemCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GFeedItemConnectInput>? _connect;
  ListBuilder<GFeedItemConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GFeedItemConnectInput>();
  set connect(ListBuilder<GFeedItemConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GFeedItemWhereUniqueInput>? _set;
  ListBuilder<GFeedItemWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GFeedItemWhereUniqueInput>();
  set set(ListBuilder<GFeedItemWhereUniqueInput>? set) => _$this._set = set;

  ListBuilder<GFeedItemUpdateWithNestedWhereUniqueInput>? _updateIt;
  ListBuilder<GFeedItemUpdateWithNestedWhereUniqueInput> get updateIt =>
      _$this._updateIt ??=
          new ListBuilder<GFeedItemUpdateWithNestedWhereUniqueInput>();
  set updateIt(
          ListBuilder<GFeedItemUpdateWithNestedWhereUniqueInput>? updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GFeedItemUpsertWithNestedWhereUniqueInput>? _upsert;
  ListBuilder<GFeedItemUpsertWithNestedWhereUniqueInput> get upsert =>
      _$this._upsert ??=
          new ListBuilder<GFeedItemUpsertWithNestedWhereUniqueInput>();
  set upsert(ListBuilder<GFeedItemUpsertWithNestedWhereUniqueInput>? upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GFeedItemWhereUniqueInput>? _disconnect;
  ListBuilder<GFeedItemWhereUniqueInput> get disconnect =>
      _$this._disconnect ??= new ListBuilder<GFeedItemWhereUniqueInput>();
  set disconnect(ListBuilder<GFeedItemWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  ListBuilder<GFeedItemWhereUniqueInput>? _delete;
  ListBuilder<GFeedItemWhereUniqueInput> get delete =>
      _$this._delete ??= new ListBuilder<GFeedItemWhereUniqueInput>();
  set delete(ListBuilder<GFeedItemWhereUniqueInput>? delete) =>
      _$this._delete = delete;

  GFeedItemUpdateManyInlineInputBuilder();

  GFeedItemUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemUpdateManyInlineInput;
  }

  @override
  void update(void Function(GFeedItemUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemUpdateManyInlineInput build() {
    _$GFeedItemUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemUpdateManyInlineInput._(
              create: _create?.build(),
              connect: _connect?.build(),
              set: _set?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              disconnect: _disconnect?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemUpdateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemUpdateManyInput extends GFeedItemUpdateManyInput {
  @override
  final String? title;
  @override
  final String? subtitle;
  @override
  final String? description;
  @override
  final String? mainContent;

  factory _$GFeedItemUpdateManyInput(
          [void Function(GFeedItemUpdateManyInputBuilder)? updates]) =>
      (new GFeedItemUpdateManyInputBuilder()..update(updates)).build();

  _$GFeedItemUpdateManyInput._(
      {this.title, this.subtitle, this.description, this.mainContent})
      : super._();

  @override
  GFeedItemUpdateManyInput rebuild(
          void Function(GFeedItemUpdateManyInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemUpdateManyInputBuilder toBuilder() =>
      new GFeedItemUpdateManyInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemUpdateManyInput &&
        title == other.title &&
        subtitle == other.subtitle &&
        description == other.description &&
        mainContent == other.mainContent;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc($jc($jc(0, title.hashCode), subtitle.hashCode),
            description.hashCode),
        mainContent.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemUpdateManyInput')
          ..add('title', title)
          ..add('subtitle', subtitle)
          ..add('description', description)
          ..add('mainContent', mainContent))
        .toString();
  }
}

class GFeedItemUpdateManyInputBuilder
    implements
        Builder<GFeedItemUpdateManyInput, GFeedItemUpdateManyInputBuilder> {
  _$GFeedItemUpdateManyInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _subtitle;
  String? get subtitle => _$this._subtitle;
  set subtitle(String? subtitle) => _$this._subtitle = subtitle;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _mainContent;
  String? get mainContent => _$this._mainContent;
  set mainContent(String? mainContent) => _$this._mainContent = mainContent;

  GFeedItemUpdateManyInputBuilder();

  GFeedItemUpdateManyInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _subtitle = $v.subtitle;
      _description = $v.description;
      _mainContent = $v.mainContent;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemUpdateManyInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemUpdateManyInput;
  }

  @override
  void update(void Function(GFeedItemUpdateManyInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemUpdateManyInput build() {
    final _$result = _$v ??
        new _$GFeedItemUpdateManyInput._(
            title: title,
            subtitle: subtitle,
            description: description,
            mainContent: mainContent);
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemUpdateManyWithNestedWhereInput
    extends GFeedItemUpdateManyWithNestedWhereInput {
  @override
  final GFeedItemWhereInput where;
  @override
  final GFeedItemUpdateManyInput data;

  factory _$GFeedItemUpdateManyWithNestedWhereInput(
          [void Function(GFeedItemUpdateManyWithNestedWhereInputBuilder)?
              updates]) =>
      (new GFeedItemUpdateManyWithNestedWhereInputBuilder()..update(updates))
          .build();

  _$GFeedItemUpdateManyWithNestedWhereInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GFeedItemUpdateManyWithNestedWhereInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GFeedItemUpdateManyWithNestedWhereInput', 'data');
  }

  @override
  GFeedItemUpdateManyWithNestedWhereInput rebuild(
          void Function(GFeedItemUpdateManyWithNestedWhereInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemUpdateManyWithNestedWhereInputBuilder toBuilder() =>
      new GFeedItemUpdateManyWithNestedWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemUpdateManyWithNestedWhereInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GFeedItemUpdateManyWithNestedWhereInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GFeedItemUpdateManyWithNestedWhereInputBuilder
    implements
        Builder<GFeedItemUpdateManyWithNestedWhereInput,
            GFeedItemUpdateManyWithNestedWhereInputBuilder> {
  _$GFeedItemUpdateManyWithNestedWhereInput? _$v;

  GFeedItemWhereInputBuilder? _where;
  GFeedItemWhereInputBuilder get where =>
      _$this._where ??= new GFeedItemWhereInputBuilder();
  set where(GFeedItemWhereInputBuilder? where) => _$this._where = where;

  GFeedItemUpdateManyInputBuilder? _data;
  GFeedItemUpdateManyInputBuilder get data =>
      _$this._data ??= new GFeedItemUpdateManyInputBuilder();
  set data(GFeedItemUpdateManyInputBuilder? data) => _$this._data = data;

  GFeedItemUpdateManyWithNestedWhereInputBuilder();

  GFeedItemUpdateManyWithNestedWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemUpdateManyWithNestedWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemUpdateManyWithNestedWhereInput;
  }

  @override
  void update(
      void Function(GFeedItemUpdateManyWithNestedWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemUpdateManyWithNestedWhereInput build() {
    _$GFeedItemUpdateManyWithNestedWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemUpdateManyWithNestedWhereInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemUpdateManyWithNestedWhereInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemUpdateOneInlineInput extends GFeedItemUpdateOneInlineInput {
  @override
  final GFeedItemCreateInput? create;
  @override
  final GFeedItemUpdateWithNestedWhereUniqueInput? updateIt;
  @override
  final GFeedItemUpsertWithNestedWhereUniqueInput? upsert;
  @override
  final GFeedItemWhereUniqueInput? connect;
  @override
  final bool? disconnect;
  @override
  final bool? delete;

  factory _$GFeedItemUpdateOneInlineInput(
          [void Function(GFeedItemUpdateOneInlineInputBuilder)? updates]) =>
      (new GFeedItemUpdateOneInlineInputBuilder()..update(updates)).build();

  _$GFeedItemUpdateOneInlineInput._(
      {this.create,
      this.updateIt,
      this.upsert,
      this.connect,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GFeedItemUpdateOneInlineInput rebuild(
          void Function(GFeedItemUpdateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemUpdateOneInlineInputBuilder toBuilder() =>
      new GFeedItemUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemUpdateOneInlineInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        connect == other.connect &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc($jc($jc(0, create.hashCode), updateIt.hashCode),
                    upsert.hashCode),
                connect.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemUpdateOneInlineInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('connect', connect)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GFeedItemUpdateOneInlineInputBuilder
    implements
        Builder<GFeedItemUpdateOneInlineInput,
            GFeedItemUpdateOneInlineInputBuilder> {
  _$GFeedItemUpdateOneInlineInput? _$v;

  GFeedItemCreateInputBuilder? _create;
  GFeedItemCreateInputBuilder get create =>
      _$this._create ??= new GFeedItemCreateInputBuilder();
  set create(GFeedItemCreateInputBuilder? create) => _$this._create = create;

  GFeedItemUpdateWithNestedWhereUniqueInputBuilder? _updateIt;
  GFeedItemUpdateWithNestedWhereUniqueInputBuilder get updateIt =>
      _$this._updateIt ??=
          new GFeedItemUpdateWithNestedWhereUniqueInputBuilder();
  set updateIt(GFeedItemUpdateWithNestedWhereUniqueInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GFeedItemUpsertWithNestedWhereUniqueInputBuilder? _upsert;
  GFeedItemUpsertWithNestedWhereUniqueInputBuilder get upsert =>
      _$this._upsert ??= new GFeedItemUpsertWithNestedWhereUniqueInputBuilder();
  set upsert(GFeedItemUpsertWithNestedWhereUniqueInputBuilder? upsert) =>
      _$this._upsert = upsert;

  GFeedItemWhereUniqueInputBuilder? _connect;
  GFeedItemWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GFeedItemWhereUniqueInputBuilder();
  set connect(GFeedItemWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  bool? _delete;
  bool? get delete => _$this._delete;
  set delete(bool? delete) => _$this._delete = delete;

  GFeedItemUpdateOneInlineInputBuilder();

  GFeedItemUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _delete = $v.delete;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemUpdateOneInlineInput;
  }

  @override
  void update(void Function(GFeedItemUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemUpdateOneInlineInput build() {
    _$GFeedItemUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemUpdateOneInlineInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              connect: _connect?.build(),
              disconnect: disconnect,
              delete: delete);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemUpdateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemUpdateWithNestedWhereUniqueInput
    extends GFeedItemUpdateWithNestedWhereUniqueInput {
  @override
  final GFeedItemWhereUniqueInput where;
  @override
  final GFeedItemUpdateInput data;

  factory _$GFeedItemUpdateWithNestedWhereUniqueInput(
          [void Function(GFeedItemUpdateWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GFeedItemUpdateWithNestedWhereUniqueInputBuilder()..update(updates))
          .build();

  _$GFeedItemUpdateWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GFeedItemUpdateWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GFeedItemUpdateWithNestedWhereUniqueInput', 'data');
  }

  @override
  GFeedItemUpdateWithNestedWhereUniqueInput rebuild(
          void Function(GFeedItemUpdateWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemUpdateWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GFeedItemUpdateWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemUpdateWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GFeedItemUpdateWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GFeedItemUpdateWithNestedWhereUniqueInputBuilder
    implements
        Builder<GFeedItemUpdateWithNestedWhereUniqueInput,
            GFeedItemUpdateWithNestedWhereUniqueInputBuilder> {
  _$GFeedItemUpdateWithNestedWhereUniqueInput? _$v;

  GFeedItemWhereUniqueInputBuilder? _where;
  GFeedItemWhereUniqueInputBuilder get where =>
      _$this._where ??= new GFeedItemWhereUniqueInputBuilder();
  set where(GFeedItemWhereUniqueInputBuilder? where) => _$this._where = where;

  GFeedItemUpdateInputBuilder? _data;
  GFeedItemUpdateInputBuilder get data =>
      _$this._data ??= new GFeedItemUpdateInputBuilder();
  set data(GFeedItemUpdateInputBuilder? data) => _$this._data = data;

  GFeedItemUpdateWithNestedWhereUniqueInputBuilder();

  GFeedItemUpdateWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemUpdateWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemUpdateWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GFeedItemUpdateWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemUpdateWithNestedWhereUniqueInput build() {
    _$GFeedItemUpdateWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemUpdateWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemUpdateWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemUpsertInput extends GFeedItemUpsertInput {
  @override
  final GFeedItemCreateInput create;
  @override
  final GFeedItemUpdateInput updateIt;

  factory _$GFeedItemUpsertInput(
          [void Function(GFeedItemUpsertInputBuilder)? updates]) =>
      (new GFeedItemUpsertInputBuilder()..update(updates)).build();

  _$GFeedItemUpsertInput._({required this.create, required this.updateIt})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        create, 'GFeedItemUpsertInput', 'create');
    BuiltValueNullFieldError.checkNotNull(
        updateIt, 'GFeedItemUpsertInput', 'updateIt');
  }

  @override
  GFeedItemUpsertInput rebuild(
          void Function(GFeedItemUpsertInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemUpsertInputBuilder toBuilder() =>
      new GFeedItemUpsertInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemUpsertInput &&
        create == other.create &&
        updateIt == other.updateIt;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), updateIt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemUpsertInput')
          ..add('create', create)
          ..add('updateIt', updateIt))
        .toString();
  }
}

class GFeedItemUpsertInputBuilder
    implements Builder<GFeedItemUpsertInput, GFeedItemUpsertInputBuilder> {
  _$GFeedItemUpsertInput? _$v;

  GFeedItemCreateInputBuilder? _create;
  GFeedItemCreateInputBuilder get create =>
      _$this._create ??= new GFeedItemCreateInputBuilder();
  set create(GFeedItemCreateInputBuilder? create) => _$this._create = create;

  GFeedItemUpdateInputBuilder? _updateIt;
  GFeedItemUpdateInputBuilder get updateIt =>
      _$this._updateIt ??= new GFeedItemUpdateInputBuilder();
  set updateIt(GFeedItemUpdateInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GFeedItemUpsertInputBuilder();

  GFeedItemUpsertInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create.toBuilder();
      _updateIt = $v.updateIt.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemUpsertInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemUpsertInput;
  }

  @override
  void update(void Function(GFeedItemUpsertInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemUpsertInput build() {
    _$GFeedItemUpsertInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemUpsertInput._(
              create: create.build(), updateIt: updateIt.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        create.build();
        _$failedField = 'updateIt';
        updateIt.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemUpsertInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemUpsertWithNestedWhereUniqueInput
    extends GFeedItemUpsertWithNestedWhereUniqueInput {
  @override
  final GFeedItemWhereUniqueInput where;
  @override
  final GFeedItemUpsertInput data;

  factory _$GFeedItemUpsertWithNestedWhereUniqueInput(
          [void Function(GFeedItemUpsertWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GFeedItemUpsertWithNestedWhereUniqueInputBuilder()..update(updates))
          .build();

  _$GFeedItemUpsertWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GFeedItemUpsertWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GFeedItemUpsertWithNestedWhereUniqueInput', 'data');
  }

  @override
  GFeedItemUpsertWithNestedWhereUniqueInput rebuild(
          void Function(GFeedItemUpsertWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemUpsertWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GFeedItemUpsertWithNestedWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemUpsertWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GFeedItemUpsertWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GFeedItemUpsertWithNestedWhereUniqueInputBuilder
    implements
        Builder<GFeedItemUpsertWithNestedWhereUniqueInput,
            GFeedItemUpsertWithNestedWhereUniqueInputBuilder> {
  _$GFeedItemUpsertWithNestedWhereUniqueInput? _$v;

  GFeedItemWhereUniqueInputBuilder? _where;
  GFeedItemWhereUniqueInputBuilder get where =>
      _$this._where ??= new GFeedItemWhereUniqueInputBuilder();
  set where(GFeedItemWhereUniqueInputBuilder? where) => _$this._where = where;

  GFeedItemUpsertInputBuilder? _data;
  GFeedItemUpsertInputBuilder get data =>
      _$this._data ??= new GFeedItemUpsertInputBuilder();
  set data(GFeedItemUpsertInputBuilder? data) => _$this._data = data;

  GFeedItemUpsertWithNestedWhereUniqueInputBuilder();

  GFeedItemUpsertWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemUpsertWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemUpsertWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GFeedItemUpsertWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemUpsertWithNestedWhereUniqueInput build() {
    _$GFeedItemUpsertWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemUpsertWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemUpsertWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemWhereInput extends GFeedItemWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GFeedItemWhereInput>? AND;
  @override
  final BuiltList<GFeedItemWhereInput>? OR;
  @override
  final BuiltList<GFeedItemWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String>? title_in;
  @override
  final BuiltList<String>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final String? subtitle;
  @override
  final String? subtitle_not;
  @override
  final BuiltList<String>? subtitle_in;
  @override
  final BuiltList<String>? subtitle_not_in;
  @override
  final String? subtitle_contains;
  @override
  final String? subtitle_not_contains;
  @override
  final String? subtitle_starts_with;
  @override
  final String? subtitle_not_starts_with;
  @override
  final String? subtitle_ends_with;
  @override
  final String? subtitle_not_ends_with;
  @override
  final String? description;
  @override
  final String? description_not;
  @override
  final BuiltList<String>? description_in;
  @override
  final BuiltList<String>? description_not_in;
  @override
  final String? description_contains;
  @override
  final String? description_not_contains;
  @override
  final String? description_starts_with;
  @override
  final String? description_not_starts_with;
  @override
  final String? description_ends_with;
  @override
  final String? description_not_ends_with;
  @override
  final String? mainContent;
  @override
  final String? mainContent_not;
  @override
  final BuiltList<String>? mainContent_in;
  @override
  final BuiltList<String>? mainContent_not_in;
  @override
  final String? mainContent_contains;
  @override
  final String? mainContent_not_contains;
  @override
  final String? mainContent_starts_with;
  @override
  final String? mainContent_not_starts_with;
  @override
  final String? mainContent_ends_with;
  @override
  final String? mainContent_not_ends_with;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GAssetWhereInput? mainImage;
  @override
  final GAssetWhereInput? video;
  @override
  final GCategoryWhereInput? categories_every;
  @override
  final GCategoryWhereInput? categories_some;
  @override
  final GCategoryWhereInput? categories_none;

  factory _$GFeedItemWhereInput(
          [void Function(GFeedItemWhereInputBuilder)? updates]) =>
      (new GFeedItemWhereInputBuilder()..update(updates)).build();

  _$GFeedItemWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.subtitle,
      this.subtitle_not,
      this.subtitle_in,
      this.subtitle_not_in,
      this.subtitle_contains,
      this.subtitle_not_contains,
      this.subtitle_starts_with,
      this.subtitle_not_starts_with,
      this.subtitle_ends_with,
      this.subtitle_not_ends_with,
      this.description,
      this.description_not,
      this.description_in,
      this.description_not_in,
      this.description_contains,
      this.description_not_contains,
      this.description_starts_with,
      this.description_not_starts_with,
      this.description_ends_with,
      this.description_not_ends_with,
      this.mainContent,
      this.mainContent_not,
      this.mainContent_in,
      this.mainContent_not_in,
      this.mainContent_contains,
      this.mainContent_not_contains,
      this.mainContent_starts_with,
      this.mainContent_not_starts_with,
      this.mainContent_ends_with,
      this.mainContent_not_ends_with,
      this.createdBy,
      this.updatedBy,
      this.publishedBy,
      this.mainImage,
      this.video,
      this.categories_every,
      this.categories_some,
      this.categories_none})
      : super._();

  @override
  GFeedItemWhereInput rebuild(
          void Function(GFeedItemWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemWhereInputBuilder toBuilder() =>
      new GFeedItemWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        subtitle == other.subtitle &&
        subtitle_not == other.subtitle_not &&
        subtitle_in == other.subtitle_in &&
        subtitle_not_in == other.subtitle_not_in &&
        subtitle_contains == other.subtitle_contains &&
        subtitle_not_contains == other.subtitle_not_contains &&
        subtitle_starts_with == other.subtitle_starts_with &&
        subtitle_not_starts_with == other.subtitle_not_starts_with &&
        subtitle_ends_with == other.subtitle_ends_with &&
        subtitle_not_ends_with == other.subtitle_not_ends_with &&
        description == other.description &&
        description_not == other.description_not &&
        description_in == other.description_in &&
        description_not_in == other.description_not_in &&
        description_contains == other.description_contains &&
        description_not_contains == other.description_not_contains &&
        description_starts_with == other.description_starts_with &&
        description_not_starts_with == other.description_not_starts_with &&
        description_ends_with == other.description_ends_with &&
        description_not_ends_with == other.description_not_ends_with &&
        mainContent == other.mainContent &&
        mainContent_not == other.mainContent_not &&
        mainContent_in == other.mainContent_in &&
        mainContent_not_in == other.mainContent_not_in &&
        mainContent_contains == other.mainContent_contains &&
        mainContent_not_contains == other.mainContent_not_contains &&
        mainContent_starts_with == other.mainContent_starts_with &&
        mainContent_not_starts_with == other.mainContent_not_starts_with &&
        mainContent_ends_with == other.mainContent_ends_with &&
        mainContent_not_ends_with == other.mainContent_not_ends_with &&
        createdBy == other.createdBy &&
        updatedBy == other.updatedBy &&
        publishedBy == other.publishedBy &&
        mainImage == other.mainImage &&
        video == other.video &&
        categories_every == other.categories_every &&
        categories_some == other.categories_some &&
        categories_none == other.categories_none;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode), publishedAt_lt.hashCode), publishedAt_lte.hashCode), publishedAt_gt.hashCode), publishedAt_gte.hashCode), title.hashCode), title_not.hashCode), title_in.hashCode), title_not_in.hashCode), title_contains.hashCode), title_not_contains.hashCode), title_starts_with.hashCode), title_not_starts_with.hashCode), title_ends_with.hashCode), title_not_ends_with.hashCode), subtitle.hashCode), subtitle_not.hashCode), subtitle_in.hashCode), subtitle_not_in.hashCode), subtitle_contains.hashCode), subtitle_not_contains.hashCode), subtitle_starts_with.hashCode), subtitle_not_starts_with.hashCode), subtitle_ends_with.hashCode), subtitle_not_ends_with.hashCode), description.hashCode), description_not.hashCode), description_in.hashCode), description_not_in.hashCode), description_contains.hashCode), description_not_contains.hashCode), description_starts_with.hashCode), description_not_starts_with.hashCode), description_ends_with.hashCode),
                                                                                description_not_ends_with.hashCode),
                                                                            mainContent.hashCode),
                                                                        mainContent_not.hashCode),
                                                                    mainContent_in.hashCode),
                                                                mainContent_not_in.hashCode),
                                                            mainContent_contains.hashCode),
                                                        mainContent_not_contains.hashCode),
                                                    mainContent_starts_with.hashCode),
                                                mainContent_not_starts_with.hashCode),
                                            mainContent_ends_with.hashCode),
                                        mainContent_not_ends_with.hashCode),
                                    createdBy.hashCode),
                                updatedBy.hashCode),
                            publishedBy.hashCode),
                        mainImage.hashCode),
                    video.hashCode),
                categories_every.hashCode),
            categories_some.hashCode),
        categories_none.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('subtitle', subtitle)
          ..add('subtitle_not', subtitle_not)
          ..add('subtitle_in', subtitle_in)
          ..add('subtitle_not_in', subtitle_not_in)
          ..add('subtitle_contains', subtitle_contains)
          ..add('subtitle_not_contains', subtitle_not_contains)
          ..add('subtitle_starts_with', subtitle_starts_with)
          ..add('subtitle_not_starts_with', subtitle_not_starts_with)
          ..add('subtitle_ends_with', subtitle_ends_with)
          ..add('subtitle_not_ends_with', subtitle_not_ends_with)
          ..add('description', description)
          ..add('description_not', description_not)
          ..add('description_in', description_in)
          ..add('description_not_in', description_not_in)
          ..add('description_contains', description_contains)
          ..add('description_not_contains', description_not_contains)
          ..add('description_starts_with', description_starts_with)
          ..add('description_not_starts_with', description_not_starts_with)
          ..add('description_ends_with', description_ends_with)
          ..add('description_not_ends_with', description_not_ends_with)
          ..add('mainContent', mainContent)
          ..add('mainContent_not', mainContent_not)
          ..add('mainContent_in', mainContent_in)
          ..add('mainContent_not_in', mainContent_not_in)
          ..add('mainContent_contains', mainContent_contains)
          ..add('mainContent_not_contains', mainContent_not_contains)
          ..add('mainContent_starts_with', mainContent_starts_with)
          ..add('mainContent_not_starts_with', mainContent_not_starts_with)
          ..add('mainContent_ends_with', mainContent_ends_with)
          ..add('mainContent_not_ends_with', mainContent_not_ends_with)
          ..add('createdBy', createdBy)
          ..add('updatedBy', updatedBy)
          ..add('publishedBy', publishedBy)
          ..add('mainImage', mainImage)
          ..add('video', video)
          ..add('categories_every', categories_every)
          ..add('categories_some', categories_some)
          ..add('categories_none', categories_none))
        .toString();
  }
}

class GFeedItemWhereInputBuilder
    implements Builder<GFeedItemWhereInput, GFeedItemWhereInputBuilder> {
  _$GFeedItemWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GFeedItemWhereInput>? _AND;
  ListBuilder<GFeedItemWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GFeedItemWhereInput>();
  set AND(ListBuilder<GFeedItemWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GFeedItemWhereInput>? _OR;
  ListBuilder<GFeedItemWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GFeedItemWhereInput>();
  set OR(ListBuilder<GFeedItemWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GFeedItemWhereInput>? _NOT;
  ListBuilder<GFeedItemWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GFeedItemWhereInput>();
  set NOT(ListBuilder<GFeedItemWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String>? _title_in;
  ListBuilder<String> get title_in =>
      _$this._title_in ??= new ListBuilder<String>();
  set title_in(ListBuilder<String>? title_in) => _$this._title_in = title_in;

  ListBuilder<String>? _title_not_in;
  ListBuilder<String> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String>();
  set title_not_in(ListBuilder<String>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  String? _subtitle;
  String? get subtitle => _$this._subtitle;
  set subtitle(String? subtitle) => _$this._subtitle = subtitle;

  String? _subtitle_not;
  String? get subtitle_not => _$this._subtitle_not;
  set subtitle_not(String? subtitle_not) => _$this._subtitle_not = subtitle_not;

  ListBuilder<String>? _subtitle_in;
  ListBuilder<String> get subtitle_in =>
      _$this._subtitle_in ??= new ListBuilder<String>();
  set subtitle_in(ListBuilder<String>? subtitle_in) =>
      _$this._subtitle_in = subtitle_in;

  ListBuilder<String>? _subtitle_not_in;
  ListBuilder<String> get subtitle_not_in =>
      _$this._subtitle_not_in ??= new ListBuilder<String>();
  set subtitle_not_in(ListBuilder<String>? subtitle_not_in) =>
      _$this._subtitle_not_in = subtitle_not_in;

  String? _subtitle_contains;
  String? get subtitle_contains => _$this._subtitle_contains;
  set subtitle_contains(String? subtitle_contains) =>
      _$this._subtitle_contains = subtitle_contains;

  String? _subtitle_not_contains;
  String? get subtitle_not_contains => _$this._subtitle_not_contains;
  set subtitle_not_contains(String? subtitle_not_contains) =>
      _$this._subtitle_not_contains = subtitle_not_contains;

  String? _subtitle_starts_with;
  String? get subtitle_starts_with => _$this._subtitle_starts_with;
  set subtitle_starts_with(String? subtitle_starts_with) =>
      _$this._subtitle_starts_with = subtitle_starts_with;

  String? _subtitle_not_starts_with;
  String? get subtitle_not_starts_with => _$this._subtitle_not_starts_with;
  set subtitle_not_starts_with(String? subtitle_not_starts_with) =>
      _$this._subtitle_not_starts_with = subtitle_not_starts_with;

  String? _subtitle_ends_with;
  String? get subtitle_ends_with => _$this._subtitle_ends_with;
  set subtitle_ends_with(String? subtitle_ends_with) =>
      _$this._subtitle_ends_with = subtitle_ends_with;

  String? _subtitle_not_ends_with;
  String? get subtitle_not_ends_with => _$this._subtitle_not_ends_with;
  set subtitle_not_ends_with(String? subtitle_not_ends_with) =>
      _$this._subtitle_not_ends_with = subtitle_not_ends_with;

  String? _description;
  String? get description => _$this._description;
  set description(String? description) => _$this._description = description;

  String? _description_not;
  String? get description_not => _$this._description_not;
  set description_not(String? description_not) =>
      _$this._description_not = description_not;

  ListBuilder<String>? _description_in;
  ListBuilder<String> get description_in =>
      _$this._description_in ??= new ListBuilder<String>();
  set description_in(ListBuilder<String>? description_in) =>
      _$this._description_in = description_in;

  ListBuilder<String>? _description_not_in;
  ListBuilder<String> get description_not_in =>
      _$this._description_not_in ??= new ListBuilder<String>();
  set description_not_in(ListBuilder<String>? description_not_in) =>
      _$this._description_not_in = description_not_in;

  String? _description_contains;
  String? get description_contains => _$this._description_contains;
  set description_contains(String? description_contains) =>
      _$this._description_contains = description_contains;

  String? _description_not_contains;
  String? get description_not_contains => _$this._description_not_contains;
  set description_not_contains(String? description_not_contains) =>
      _$this._description_not_contains = description_not_contains;

  String? _description_starts_with;
  String? get description_starts_with => _$this._description_starts_with;
  set description_starts_with(String? description_starts_with) =>
      _$this._description_starts_with = description_starts_with;

  String? _description_not_starts_with;
  String? get description_not_starts_with =>
      _$this._description_not_starts_with;
  set description_not_starts_with(String? description_not_starts_with) =>
      _$this._description_not_starts_with = description_not_starts_with;

  String? _description_ends_with;
  String? get description_ends_with => _$this._description_ends_with;
  set description_ends_with(String? description_ends_with) =>
      _$this._description_ends_with = description_ends_with;

  String? _description_not_ends_with;
  String? get description_not_ends_with => _$this._description_not_ends_with;
  set description_not_ends_with(String? description_not_ends_with) =>
      _$this._description_not_ends_with = description_not_ends_with;

  String? _mainContent;
  String? get mainContent => _$this._mainContent;
  set mainContent(String? mainContent) => _$this._mainContent = mainContent;

  String? _mainContent_not;
  String? get mainContent_not => _$this._mainContent_not;
  set mainContent_not(String? mainContent_not) =>
      _$this._mainContent_not = mainContent_not;

  ListBuilder<String>? _mainContent_in;
  ListBuilder<String> get mainContent_in =>
      _$this._mainContent_in ??= new ListBuilder<String>();
  set mainContent_in(ListBuilder<String>? mainContent_in) =>
      _$this._mainContent_in = mainContent_in;

  ListBuilder<String>? _mainContent_not_in;
  ListBuilder<String> get mainContent_not_in =>
      _$this._mainContent_not_in ??= new ListBuilder<String>();
  set mainContent_not_in(ListBuilder<String>? mainContent_not_in) =>
      _$this._mainContent_not_in = mainContent_not_in;

  String? _mainContent_contains;
  String? get mainContent_contains => _$this._mainContent_contains;
  set mainContent_contains(String? mainContent_contains) =>
      _$this._mainContent_contains = mainContent_contains;

  String? _mainContent_not_contains;
  String? get mainContent_not_contains => _$this._mainContent_not_contains;
  set mainContent_not_contains(String? mainContent_not_contains) =>
      _$this._mainContent_not_contains = mainContent_not_contains;

  String? _mainContent_starts_with;
  String? get mainContent_starts_with => _$this._mainContent_starts_with;
  set mainContent_starts_with(String? mainContent_starts_with) =>
      _$this._mainContent_starts_with = mainContent_starts_with;

  String? _mainContent_not_starts_with;
  String? get mainContent_not_starts_with =>
      _$this._mainContent_not_starts_with;
  set mainContent_not_starts_with(String? mainContent_not_starts_with) =>
      _$this._mainContent_not_starts_with = mainContent_not_starts_with;

  String? _mainContent_ends_with;
  String? get mainContent_ends_with => _$this._mainContent_ends_with;
  set mainContent_ends_with(String? mainContent_ends_with) =>
      _$this._mainContent_ends_with = mainContent_ends_with;

  String? _mainContent_not_ends_with;
  String? get mainContent_not_ends_with => _$this._mainContent_not_ends_with;
  set mainContent_not_ends_with(String? mainContent_not_ends_with) =>
      _$this._mainContent_not_ends_with = mainContent_not_ends_with;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GAssetWhereInputBuilder? _mainImage;
  GAssetWhereInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetWhereInputBuilder();
  set mainImage(GAssetWhereInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GAssetWhereInputBuilder? _video;
  GAssetWhereInputBuilder get video =>
      _$this._video ??= new GAssetWhereInputBuilder();
  set video(GAssetWhereInputBuilder? video) => _$this._video = video;

  GCategoryWhereInputBuilder? _categories_every;
  GCategoryWhereInputBuilder get categories_every =>
      _$this._categories_every ??= new GCategoryWhereInputBuilder();
  set categories_every(GCategoryWhereInputBuilder? categories_every) =>
      _$this._categories_every = categories_every;

  GCategoryWhereInputBuilder? _categories_some;
  GCategoryWhereInputBuilder get categories_some =>
      _$this._categories_some ??= new GCategoryWhereInputBuilder();
  set categories_some(GCategoryWhereInputBuilder? categories_some) =>
      _$this._categories_some = categories_some;

  GCategoryWhereInputBuilder? _categories_none;
  GCategoryWhereInputBuilder get categories_none =>
      _$this._categories_none ??= new GCategoryWhereInputBuilder();
  set categories_none(GCategoryWhereInputBuilder? categories_none) =>
      _$this._categories_none = categories_none;

  GFeedItemWhereInputBuilder();

  GFeedItemWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _subtitle = $v.subtitle;
      _subtitle_not = $v.subtitle_not;
      _subtitle_in = $v.subtitle_in?.toBuilder();
      _subtitle_not_in = $v.subtitle_not_in?.toBuilder();
      _subtitle_contains = $v.subtitle_contains;
      _subtitle_not_contains = $v.subtitle_not_contains;
      _subtitle_starts_with = $v.subtitle_starts_with;
      _subtitle_not_starts_with = $v.subtitle_not_starts_with;
      _subtitle_ends_with = $v.subtitle_ends_with;
      _subtitle_not_ends_with = $v.subtitle_not_ends_with;
      _description = $v.description;
      _description_not = $v.description_not;
      _description_in = $v.description_in?.toBuilder();
      _description_not_in = $v.description_not_in?.toBuilder();
      _description_contains = $v.description_contains;
      _description_not_contains = $v.description_not_contains;
      _description_starts_with = $v.description_starts_with;
      _description_not_starts_with = $v.description_not_starts_with;
      _description_ends_with = $v.description_ends_with;
      _description_not_ends_with = $v.description_not_ends_with;
      _mainContent = $v.mainContent;
      _mainContent_not = $v.mainContent_not;
      _mainContent_in = $v.mainContent_in?.toBuilder();
      _mainContent_not_in = $v.mainContent_not_in?.toBuilder();
      _mainContent_contains = $v.mainContent_contains;
      _mainContent_not_contains = $v.mainContent_not_contains;
      _mainContent_starts_with = $v.mainContent_starts_with;
      _mainContent_not_starts_with = $v.mainContent_not_starts_with;
      _mainContent_ends_with = $v.mainContent_ends_with;
      _mainContent_not_ends_with = $v.mainContent_not_ends_with;
      _createdBy = $v.createdBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _mainImage = $v.mainImage?.toBuilder();
      _video = $v.video?.toBuilder();
      _categories_every = $v.categories_every?.toBuilder();
      _categories_some = $v.categories_some?.toBuilder();
      _categories_none = $v.categories_none?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemWhereInput;
  }

  @override
  void update(void Function(GFeedItemWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemWhereInput build() {
    _$GFeedItemWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GFeedItemWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              subtitle: subtitle,
              subtitle_not: subtitle_not,
              subtitle_in: _subtitle_in?.build(),
              subtitle_not_in: _subtitle_not_in?.build(),
              subtitle_contains: subtitle_contains,
              subtitle_not_contains: subtitle_not_contains,
              subtitle_starts_with: subtitle_starts_with,
              subtitle_not_starts_with: subtitle_not_starts_with,
              subtitle_ends_with: subtitle_ends_with,
              subtitle_not_ends_with: subtitle_not_ends_with,
              description: description,
              description_not: description_not,
              description_in: _description_in?.build(),
              description_not_in: _description_not_in?.build(),
              description_contains: description_contains,
              description_not_contains: description_not_contains,
              description_starts_with: description_starts_with,
              description_not_starts_with: description_not_starts_with,
              description_ends_with: description_ends_with,
              description_not_ends_with: description_not_ends_with,
              mainContent: mainContent,
              mainContent_not: mainContent_not,
              mainContent_in: _mainContent_in?.build(),
              mainContent_not_in: _mainContent_not_in?.build(),
              mainContent_contains: mainContent_contains,
              mainContent_not_contains: mainContent_not_contains,
              mainContent_starts_with: mainContent_starts_with,
              mainContent_not_starts_with: mainContent_not_starts_with,
              mainContent_ends_with: mainContent_ends_with,
              mainContent_not_ends_with: mainContent_not_ends_with,
              createdBy: _createdBy?.build(),
              updatedBy: _updatedBy?.build(),
              publishedBy: _publishedBy?.build(),
              mainImage: _mainImage?.build(),
              video: _video?.build(),
              categories_every: _categories_every?.build(),
              categories_some: _categories_some?.build(),
              categories_none: _categories_none?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'subtitle_in';
        _subtitle_in?.build();
        _$failedField = 'subtitle_not_in';
        _subtitle_not_in?.build();

        _$failedField = 'description_in';
        _description_in?.build();
        _$failedField = 'description_not_in';
        _description_not_in?.build();

        _$failedField = 'mainContent_in';
        _mainContent_in?.build();
        _$failedField = 'mainContent_not_in';
        _mainContent_not_in?.build();

        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'mainImage';
        _mainImage?.build();
        _$failedField = 'video';
        _video?.build();
        _$failedField = 'categories_every';
        _categories_every?.build();
        _$failedField = 'categories_some';
        _categories_some?.build();
        _$failedField = 'categories_none';
        _categories_none?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GFeedItemWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GFeedItemWhereUniqueInput extends GFeedItemWhereUniqueInput {
  @override
  final String? id;

  factory _$GFeedItemWhereUniqueInput(
          [void Function(GFeedItemWhereUniqueInputBuilder)? updates]) =>
      (new GFeedItemWhereUniqueInputBuilder()..update(updates)).build();

  _$GFeedItemWhereUniqueInput._({this.id}) : super._();

  @override
  GFeedItemWhereUniqueInput rebuild(
          void Function(GFeedItemWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GFeedItemWhereUniqueInputBuilder toBuilder() =>
      new GFeedItemWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GFeedItemWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GFeedItemWhereUniqueInput')
          ..add('id', id))
        .toString();
  }
}

class GFeedItemWhereUniqueInputBuilder
    implements
        Builder<GFeedItemWhereUniqueInput, GFeedItemWhereUniqueInputBuilder> {
  _$GFeedItemWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GFeedItemWhereUniqueInputBuilder();

  GFeedItemWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GFeedItemWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GFeedItemWhereUniqueInput;
  }

  @override
  void update(void Function(GFeedItemWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GFeedItemWhereUniqueInput build() {
    final _$result = _$v ?? new _$GFeedItemWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GImageResizeInput extends GImageResizeInput {
  @override
  final int? width;
  @override
  final int? height;
  @override
  final GImageFit? fit;

  factory _$GImageResizeInput(
          [void Function(GImageResizeInputBuilder)? updates]) =>
      (new GImageResizeInputBuilder()..update(updates)).build();

  _$GImageResizeInput._({this.width, this.height, this.fit}) : super._();

  @override
  GImageResizeInput rebuild(void Function(GImageResizeInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GImageResizeInputBuilder toBuilder() =>
      new GImageResizeInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GImageResizeInput &&
        width == other.width &&
        height == other.height &&
        fit == other.fit;
  }

  @override
  int get hashCode {
    return $jf($jc($jc($jc(0, width.hashCode), height.hashCode), fit.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GImageResizeInput')
          ..add('width', width)
          ..add('height', height)
          ..add('fit', fit))
        .toString();
  }
}

class GImageResizeInputBuilder
    implements Builder<GImageResizeInput, GImageResizeInputBuilder> {
  _$GImageResizeInput? _$v;

  int? _width;
  int? get width => _$this._width;
  set width(int? width) => _$this._width = width;

  int? _height;
  int? get height => _$this._height;
  set height(int? height) => _$this._height = height;

  GImageFit? _fit;
  GImageFit? get fit => _$this._fit;
  set fit(GImageFit? fit) => _$this._fit = fit;

  GImageResizeInputBuilder();

  GImageResizeInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _width = $v.width;
      _height = $v.height;
      _fit = $v.fit;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GImageResizeInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GImageResizeInput;
  }

  @override
  void update(void Function(GImageResizeInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GImageResizeInput build() {
    final _$result = _$v ??
        new _$GImageResizeInput._(width: width, height: height, fit: fit);
    replace(_$result);
    return _$result;
  }
}

class _$GImageTransformationInput extends GImageTransformationInput {
  @override
  final GImageResizeInput? resize;

  factory _$GImageTransformationInput(
          [void Function(GImageTransformationInputBuilder)? updates]) =>
      (new GImageTransformationInputBuilder()..update(updates)).build();

  _$GImageTransformationInput._({this.resize}) : super._();

  @override
  GImageTransformationInput rebuild(
          void Function(GImageTransformationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GImageTransformationInputBuilder toBuilder() =>
      new GImageTransformationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GImageTransformationInput && resize == other.resize;
  }

  @override
  int get hashCode {
    return $jf($jc(0, resize.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GImageTransformationInput')
          ..add('resize', resize))
        .toString();
  }
}

class GImageTransformationInputBuilder
    implements
        Builder<GImageTransformationInput, GImageTransformationInputBuilder> {
  _$GImageTransformationInput? _$v;

  GImageResizeInputBuilder? _resize;
  GImageResizeInputBuilder get resize =>
      _$this._resize ??= new GImageResizeInputBuilder();
  set resize(GImageResizeInputBuilder? resize) => _$this._resize = resize;

  GImageTransformationInputBuilder();

  GImageTransformationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _resize = $v.resize?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GImageTransformationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GImageTransformationInput;
  }

  @override
  void update(void Function(GImageTransformationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GImageTransformationInput build() {
    _$GImageTransformationInput _$result;
    try {
      _$result =
          _$v ?? new _$GImageTransformationInput._(resize: _resize?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'resize';
        _resize?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GImageTransformationInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemConnectInput extends GInspirationItemConnectInput {
  @override
  final GInspirationItemWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GInspirationItemConnectInput(
          [void Function(GInspirationItemConnectInputBuilder)? updates]) =>
      (new GInspirationItemConnectInputBuilder()..update(updates)).build();

  _$GInspirationItemConnectInput._({required this.where, this.position})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GInspirationItemConnectInput', 'where');
  }

  @override
  GInspirationItemConnectInput rebuild(
          void Function(GInspirationItemConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemConnectInputBuilder toBuilder() =>
      new GInspirationItemConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), position.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GInspirationItemConnectInputBuilder
    implements
        Builder<GInspirationItemConnectInput,
            GInspirationItemConnectInputBuilder> {
  _$GInspirationItemConnectInput? _$v;

  GInspirationItemWhereUniqueInputBuilder? _where;
  GInspirationItemWhereUniqueInputBuilder get where =>
      _$this._where ??= new GInspirationItemWhereUniqueInputBuilder();
  set where(GInspirationItemWhereUniqueInputBuilder? where) =>
      _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GInspirationItemConnectInputBuilder();

  GInspirationItemConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemConnectInput;
  }

  @override
  void update(void Function(GInspirationItemConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemConnectInput build() {
    _$GInspirationItemConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemCreateInput extends GInspirationItemCreateInput {
  @override
  final DateTime? createdAt;
  @override
  final DateTime? updatedAt;
  @override
  final String? title;
  @override
  final GAssetCreateOneInlineInput? video;
  @override
  final GAssetCreateOneInlineInput? mainImage;

  factory _$GInspirationItemCreateInput(
          [void Function(GInspirationItemCreateInputBuilder)? updates]) =>
      (new GInspirationItemCreateInputBuilder()..update(updates)).build();

  _$GInspirationItemCreateInput._(
      {this.createdAt, this.updatedAt, this.title, this.video, this.mainImage})
      : super._();

  @override
  GInspirationItemCreateInput rebuild(
          void Function(GInspirationItemCreateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemCreateInputBuilder toBuilder() =>
      new GInspirationItemCreateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemCreateInput &&
        createdAt == other.createdAt &&
        updatedAt == other.updatedAt &&
        title == other.title &&
        video == other.video &&
        mainImage == other.mainImage;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc($jc($jc(0, createdAt.hashCode), updatedAt.hashCode),
                title.hashCode),
            video.hashCode),
        mainImage.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemCreateInput')
          ..add('createdAt', createdAt)
          ..add('updatedAt', updatedAt)
          ..add('title', title)
          ..add('video', video)
          ..add('mainImage', mainImage))
        .toString();
  }
}

class GInspirationItemCreateInputBuilder
    implements
        Builder<GInspirationItemCreateInput,
            GInspirationItemCreateInputBuilder> {
  _$GInspirationItemCreateInput? _$v;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GAssetCreateOneInlineInputBuilder? _video;
  GAssetCreateOneInlineInputBuilder get video =>
      _$this._video ??= new GAssetCreateOneInlineInputBuilder();
  set video(GAssetCreateOneInlineInputBuilder? video) => _$this._video = video;

  GAssetCreateOneInlineInputBuilder? _mainImage;
  GAssetCreateOneInlineInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetCreateOneInlineInputBuilder();
  set mainImage(GAssetCreateOneInlineInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GInspirationItemCreateInputBuilder();

  GInspirationItemCreateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _createdAt = $v.createdAt;
      _updatedAt = $v.updatedAt;
      _title = $v.title;
      _video = $v.video?.toBuilder();
      _mainImage = $v.mainImage?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemCreateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemCreateInput;
  }

  @override
  void update(void Function(GInspirationItemCreateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemCreateInput build() {
    _$GInspirationItemCreateInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemCreateInput._(
              createdAt: createdAt,
              updatedAt: updatedAt,
              title: title,
              video: _video?.build(),
              mainImage: _mainImage?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'video';
        _video?.build();
        _$failedField = 'mainImage';
        _mainImage?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemCreateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemCreateManyInlineInput
    extends GInspirationItemCreateManyInlineInput {
  @override
  final BuiltList<GInspirationItemCreateInput>? create;
  @override
  final BuiltList<GInspirationItemWhereUniqueInput>? connect;

  factory _$GInspirationItemCreateManyInlineInput(
          [void Function(GInspirationItemCreateManyInlineInputBuilder)?
              updates]) =>
      (new GInspirationItemCreateManyInlineInputBuilder()..update(updates))
          .build();

  _$GInspirationItemCreateManyInlineInput._({this.create, this.connect})
      : super._();

  @override
  GInspirationItemCreateManyInlineInput rebuild(
          void Function(GInspirationItemCreateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemCreateManyInlineInputBuilder toBuilder() =>
      new GInspirationItemCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemCreateManyInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemCreateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GInspirationItemCreateManyInlineInputBuilder
    implements
        Builder<GInspirationItemCreateManyInlineInput,
            GInspirationItemCreateManyInlineInputBuilder> {
  _$GInspirationItemCreateManyInlineInput? _$v;

  ListBuilder<GInspirationItemCreateInput>? _create;
  ListBuilder<GInspirationItemCreateInput> get create =>
      _$this._create ??= new ListBuilder<GInspirationItemCreateInput>();
  set create(ListBuilder<GInspirationItemCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GInspirationItemWhereUniqueInput>? _connect;
  ListBuilder<GInspirationItemWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GInspirationItemWhereUniqueInput>();
  set connect(ListBuilder<GInspirationItemWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GInspirationItemCreateManyInlineInputBuilder();

  GInspirationItemCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemCreateManyInlineInput;
  }

  @override
  void update(
      void Function(GInspirationItemCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemCreateManyInlineInput build() {
    _$GInspirationItemCreateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemCreateManyInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemCreateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemCreateOneInlineInput
    extends GInspirationItemCreateOneInlineInput {
  @override
  final GInspirationItemCreateInput? create;
  @override
  final GInspirationItemWhereUniqueInput? connect;

  factory _$GInspirationItemCreateOneInlineInput(
          [void Function(GInspirationItemCreateOneInlineInputBuilder)?
              updates]) =>
      (new GInspirationItemCreateOneInlineInputBuilder()..update(updates))
          .build();

  _$GInspirationItemCreateOneInlineInput._({this.create, this.connect})
      : super._();

  @override
  GInspirationItemCreateOneInlineInput rebuild(
          void Function(GInspirationItemCreateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemCreateOneInlineInputBuilder toBuilder() =>
      new GInspirationItemCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemCreateOneInlineInput &&
        create == other.create &&
        connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemCreateOneInlineInput')
          ..add('create', create)
          ..add('connect', connect))
        .toString();
  }
}

class GInspirationItemCreateOneInlineInputBuilder
    implements
        Builder<GInspirationItemCreateOneInlineInput,
            GInspirationItemCreateOneInlineInputBuilder> {
  _$GInspirationItemCreateOneInlineInput? _$v;

  GInspirationItemCreateInputBuilder? _create;
  GInspirationItemCreateInputBuilder get create =>
      _$this._create ??= new GInspirationItemCreateInputBuilder();
  set create(GInspirationItemCreateInputBuilder? create) =>
      _$this._create = create;

  GInspirationItemWhereUniqueInputBuilder? _connect;
  GInspirationItemWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GInspirationItemWhereUniqueInputBuilder();
  set connect(GInspirationItemWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GInspirationItemCreateOneInlineInputBuilder();

  GInspirationItemCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemCreateOneInlineInput;
  }

  @override
  void update(
      void Function(GInspirationItemCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemCreateOneInlineInput build() {
    _$GInspirationItemCreateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemCreateOneInlineInput._(
              create: _create?.build(), connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemCreateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemManyWhereInput extends GInspirationItemManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GInspirationItemWhereInput>? AND;
  @override
  final BuiltList<GInspirationItemWhereInput>? OR;
  @override
  final BuiltList<GInspirationItemWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String>? title_in;
  @override
  final BuiltList<String>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GAssetWhereInput? video;
  @override
  final GAssetWhereInput? mainImage;

  factory _$GInspirationItemManyWhereInput(
          [void Function(GInspirationItemManyWhereInputBuilder)? updates]) =>
      (new GInspirationItemManyWhereInputBuilder()..update(updates)).build();

  _$GInspirationItemManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.createdBy,
      this.updatedBy,
      this.publishedBy,
      this.video,
      this.mainImage})
      : super._();

  @override
  GInspirationItemManyWhereInput rebuild(
          void Function(GInspirationItemManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemManyWhereInputBuilder toBuilder() =>
      new GInspirationItemManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        createdBy == other.createdBy &&
        updatedBy == other.updatedBy &&
        publishedBy == other.publishedBy &&
        video == other.video &&
        mainImage == other.mainImage;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode),
                                                                                publishedAt_lt.hashCode),
                                                                            publishedAt_lte.hashCode),
                                                                        publishedAt_gt.hashCode),
                                                                    publishedAt_gte.hashCode),
                                                                title.hashCode),
                                                            title_not.hashCode),
                                                        title_in.hashCode),
                                                    title_not_in.hashCode),
                                                title_contains.hashCode),
                                            title_not_contains.hashCode),
                                        title_starts_with.hashCode),
                                    title_not_starts_with.hashCode),
                                title_ends_with.hashCode),
                            title_not_ends_with.hashCode),
                        createdBy.hashCode),
                    updatedBy.hashCode),
                publishedBy.hashCode),
            video.hashCode),
        mainImage.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('createdBy', createdBy)
          ..add('updatedBy', updatedBy)
          ..add('publishedBy', publishedBy)
          ..add('video', video)
          ..add('mainImage', mainImage))
        .toString();
  }
}

class GInspirationItemManyWhereInputBuilder
    implements
        Builder<GInspirationItemManyWhereInput,
            GInspirationItemManyWhereInputBuilder> {
  _$GInspirationItemManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GInspirationItemWhereInput>? _AND;
  ListBuilder<GInspirationItemWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GInspirationItemWhereInput>();
  set AND(ListBuilder<GInspirationItemWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GInspirationItemWhereInput>? _OR;
  ListBuilder<GInspirationItemWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GInspirationItemWhereInput>();
  set OR(ListBuilder<GInspirationItemWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GInspirationItemWhereInput>? _NOT;
  ListBuilder<GInspirationItemWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GInspirationItemWhereInput>();
  set NOT(ListBuilder<GInspirationItemWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String>? _title_in;
  ListBuilder<String> get title_in =>
      _$this._title_in ??= new ListBuilder<String>();
  set title_in(ListBuilder<String>? title_in) => _$this._title_in = title_in;

  ListBuilder<String>? _title_not_in;
  ListBuilder<String> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String>();
  set title_not_in(ListBuilder<String>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GAssetWhereInputBuilder? _video;
  GAssetWhereInputBuilder get video =>
      _$this._video ??= new GAssetWhereInputBuilder();
  set video(GAssetWhereInputBuilder? video) => _$this._video = video;

  GAssetWhereInputBuilder? _mainImage;
  GAssetWhereInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetWhereInputBuilder();
  set mainImage(GAssetWhereInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GInspirationItemManyWhereInputBuilder();

  GInspirationItemManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _createdBy = $v.createdBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _video = $v.video?.toBuilder();
      _mainImage = $v.mainImage?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemManyWhereInput;
  }

  @override
  void update(void Function(GInspirationItemManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemManyWhereInput build() {
    _$GInspirationItemManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              createdBy: _createdBy?.build(),
              updatedBy: _updatedBy?.build(),
              publishedBy: _publishedBy?.build(),
              video: _video?.build(),
              mainImage: _mainImage?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'video';
        _video?.build();
        _$failedField = 'mainImage';
        _mainImage?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemUpdateInput extends GInspirationItemUpdateInput {
  @override
  final String? title;
  @override
  final GAssetUpdateOneInlineInput? video;
  @override
  final GAssetUpdateOneInlineInput? mainImage;

  factory _$GInspirationItemUpdateInput(
          [void Function(GInspirationItemUpdateInputBuilder)? updates]) =>
      (new GInspirationItemUpdateInputBuilder()..update(updates)).build();

  _$GInspirationItemUpdateInput._({this.title, this.video, this.mainImage})
      : super._();

  @override
  GInspirationItemUpdateInput rebuild(
          void Function(GInspirationItemUpdateInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemUpdateInputBuilder toBuilder() =>
      new GInspirationItemUpdateInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemUpdateInput &&
        title == other.title &&
        video == other.video &&
        mainImage == other.mainImage;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, title.hashCode), video.hashCode), mainImage.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemUpdateInput')
          ..add('title', title)
          ..add('video', video)
          ..add('mainImage', mainImage))
        .toString();
  }
}

class GInspirationItemUpdateInputBuilder
    implements
        Builder<GInspirationItemUpdateInput,
            GInspirationItemUpdateInputBuilder> {
  _$GInspirationItemUpdateInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GAssetUpdateOneInlineInputBuilder? _video;
  GAssetUpdateOneInlineInputBuilder get video =>
      _$this._video ??= new GAssetUpdateOneInlineInputBuilder();
  set video(GAssetUpdateOneInlineInputBuilder? video) => _$this._video = video;

  GAssetUpdateOneInlineInputBuilder? _mainImage;
  GAssetUpdateOneInlineInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetUpdateOneInlineInputBuilder();
  set mainImage(GAssetUpdateOneInlineInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GInspirationItemUpdateInputBuilder();

  GInspirationItemUpdateInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _video = $v.video?.toBuilder();
      _mainImage = $v.mainImage?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemUpdateInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemUpdateInput;
  }

  @override
  void update(void Function(GInspirationItemUpdateInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemUpdateInput build() {
    _$GInspirationItemUpdateInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemUpdateInput._(
              title: title,
              video: _video?.build(),
              mainImage: _mainImage?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'video';
        _video?.build();
        _$failedField = 'mainImage';
        _mainImage?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemUpdateInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemUpdateManyInlineInput
    extends GInspirationItemUpdateManyInlineInput {
  @override
  final BuiltList<GInspirationItemCreateInput>? create;
  @override
  final BuiltList<GInspirationItemConnectInput>? connect;
  @override
  final BuiltList<GInspirationItemWhereUniqueInput>? set;
  @override
  final BuiltList<GInspirationItemUpdateWithNestedWhereUniqueInput>? updateIt;
  @override
  final BuiltList<GInspirationItemUpsertWithNestedWhereUniqueInput>? upsert;
  @override
  final BuiltList<GInspirationItemWhereUniqueInput>? disconnect;
  @override
  final BuiltList<GInspirationItemWhereUniqueInput>? delete;

  factory _$GInspirationItemUpdateManyInlineInput(
          [void Function(GInspirationItemUpdateManyInlineInputBuilder)?
              updates]) =>
      (new GInspirationItemUpdateManyInlineInputBuilder()..update(updates))
          .build();

  _$GInspirationItemUpdateManyInlineInput._(
      {this.create,
      this.connect,
      this.set,
      this.updateIt,
      this.upsert,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GInspirationItemUpdateManyInlineInput rebuild(
          void Function(GInspirationItemUpdateManyInlineInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemUpdateManyInlineInputBuilder toBuilder() =>
      new GInspirationItemUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemUpdateManyInlineInput &&
        create == other.create &&
        connect == other.connect &&
        set == other.set &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc($jc($jc(0, create.hashCode), connect.hashCode),
                        set.hashCode),
                    updateIt.hashCode),
                upsert.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemUpdateManyInlineInput')
          ..add('create', create)
          ..add('connect', connect)
          ..add('set', set)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GInspirationItemUpdateManyInlineInputBuilder
    implements
        Builder<GInspirationItemUpdateManyInlineInput,
            GInspirationItemUpdateManyInlineInputBuilder> {
  _$GInspirationItemUpdateManyInlineInput? _$v;

  ListBuilder<GInspirationItemCreateInput>? _create;
  ListBuilder<GInspirationItemCreateInput> get create =>
      _$this._create ??= new ListBuilder<GInspirationItemCreateInput>();
  set create(ListBuilder<GInspirationItemCreateInput>? create) =>
      _$this._create = create;

  ListBuilder<GInspirationItemConnectInput>? _connect;
  ListBuilder<GInspirationItemConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GInspirationItemConnectInput>();
  set connect(ListBuilder<GInspirationItemConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GInspirationItemWhereUniqueInput>? _set;
  ListBuilder<GInspirationItemWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GInspirationItemWhereUniqueInput>();
  set set(ListBuilder<GInspirationItemWhereUniqueInput>? set) =>
      _$this._set = set;

  ListBuilder<GInspirationItemUpdateWithNestedWhereUniqueInput>? _updateIt;
  ListBuilder<GInspirationItemUpdateWithNestedWhereUniqueInput> get updateIt =>
      _$this._updateIt ??=
          new ListBuilder<GInspirationItemUpdateWithNestedWhereUniqueInput>();
  set updateIt(
          ListBuilder<GInspirationItemUpdateWithNestedWhereUniqueInput>?
              updateIt) =>
      _$this._updateIt = updateIt;

  ListBuilder<GInspirationItemUpsertWithNestedWhereUniqueInput>? _upsert;
  ListBuilder<GInspirationItemUpsertWithNestedWhereUniqueInput> get upsert =>
      _$this._upsert ??=
          new ListBuilder<GInspirationItemUpsertWithNestedWhereUniqueInput>();
  set upsert(
          ListBuilder<GInspirationItemUpsertWithNestedWhereUniqueInput>?
              upsert) =>
      _$this._upsert = upsert;

  ListBuilder<GInspirationItemWhereUniqueInput>? _disconnect;
  ListBuilder<GInspirationItemWhereUniqueInput> get disconnect =>
      _$this._disconnect ??=
          new ListBuilder<GInspirationItemWhereUniqueInput>();
  set disconnect(ListBuilder<GInspirationItemWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  ListBuilder<GInspirationItemWhereUniqueInput>? _delete;
  ListBuilder<GInspirationItemWhereUniqueInput> get delete =>
      _$this._delete ??= new ListBuilder<GInspirationItemWhereUniqueInput>();
  set delete(ListBuilder<GInspirationItemWhereUniqueInput>? delete) =>
      _$this._delete = delete;

  GInspirationItemUpdateManyInlineInputBuilder();

  GInspirationItemUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _delete = $v.delete?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemUpdateManyInlineInput;
  }

  @override
  void update(
      void Function(GInspirationItemUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemUpdateManyInlineInput build() {
    _$GInspirationItemUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemUpdateManyInlineInput._(
              create: _create?.build(),
              connect: _connect?.build(),
              set: _set?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              disconnect: _disconnect?.build(),
              delete: _delete?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
        _$failedField = 'delete';
        _delete?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemUpdateManyInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemUpdateManyInput
    extends GInspirationItemUpdateManyInput {
  @override
  final String? title;

  factory _$GInspirationItemUpdateManyInput(
          [void Function(GInspirationItemUpdateManyInputBuilder)? updates]) =>
      (new GInspirationItemUpdateManyInputBuilder()..update(updates)).build();

  _$GInspirationItemUpdateManyInput._({this.title}) : super._();

  @override
  GInspirationItemUpdateManyInput rebuild(
          void Function(GInspirationItemUpdateManyInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemUpdateManyInputBuilder toBuilder() =>
      new GInspirationItemUpdateManyInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemUpdateManyInput && title == other.title;
  }

  @override
  int get hashCode {
    return $jf($jc(0, title.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemUpdateManyInput')
          ..add('title', title))
        .toString();
  }
}

class GInspirationItemUpdateManyInputBuilder
    implements
        Builder<GInspirationItemUpdateManyInput,
            GInspirationItemUpdateManyInputBuilder> {
  _$GInspirationItemUpdateManyInput? _$v;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  GInspirationItemUpdateManyInputBuilder();

  GInspirationItemUpdateManyInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _title = $v.title;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemUpdateManyInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemUpdateManyInput;
  }

  @override
  void update(void Function(GInspirationItemUpdateManyInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemUpdateManyInput build() {
    final _$result =
        _$v ?? new _$GInspirationItemUpdateManyInput._(title: title);
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemUpdateManyWithNestedWhereInput
    extends GInspirationItemUpdateManyWithNestedWhereInput {
  @override
  final GInspirationItemWhereInput where;
  @override
  final GInspirationItemUpdateManyInput data;

  factory _$GInspirationItemUpdateManyWithNestedWhereInput(
          [void Function(GInspirationItemUpdateManyWithNestedWhereInputBuilder)?
              updates]) =>
      (new GInspirationItemUpdateManyWithNestedWhereInputBuilder()
            ..update(updates))
          .build();

  _$GInspirationItemUpdateManyWithNestedWhereInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GInspirationItemUpdateManyWithNestedWhereInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GInspirationItemUpdateManyWithNestedWhereInput', 'data');
  }

  @override
  GInspirationItemUpdateManyWithNestedWhereInput rebuild(
          void Function(GInspirationItemUpdateManyWithNestedWhereInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemUpdateManyWithNestedWhereInputBuilder toBuilder() =>
      new GInspirationItemUpdateManyWithNestedWhereInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemUpdateManyWithNestedWhereInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GInspirationItemUpdateManyWithNestedWhereInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GInspirationItemUpdateManyWithNestedWhereInputBuilder
    implements
        Builder<GInspirationItemUpdateManyWithNestedWhereInput,
            GInspirationItemUpdateManyWithNestedWhereInputBuilder> {
  _$GInspirationItemUpdateManyWithNestedWhereInput? _$v;

  GInspirationItemWhereInputBuilder? _where;
  GInspirationItemWhereInputBuilder get where =>
      _$this._where ??= new GInspirationItemWhereInputBuilder();
  set where(GInspirationItemWhereInputBuilder? where) => _$this._where = where;

  GInspirationItemUpdateManyInputBuilder? _data;
  GInspirationItemUpdateManyInputBuilder get data =>
      _$this._data ??= new GInspirationItemUpdateManyInputBuilder();
  set data(GInspirationItemUpdateManyInputBuilder? data) => _$this._data = data;

  GInspirationItemUpdateManyWithNestedWhereInputBuilder();

  GInspirationItemUpdateManyWithNestedWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemUpdateManyWithNestedWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemUpdateManyWithNestedWhereInput;
  }

  @override
  void update(
      void Function(GInspirationItemUpdateManyWithNestedWhereInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemUpdateManyWithNestedWhereInput build() {
    _$GInspirationItemUpdateManyWithNestedWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemUpdateManyWithNestedWhereInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemUpdateManyWithNestedWhereInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemUpdateOneInlineInput
    extends GInspirationItemUpdateOneInlineInput {
  @override
  final GInspirationItemCreateInput? create;
  @override
  final GInspirationItemUpdateWithNestedWhereUniqueInput? updateIt;
  @override
  final GInspirationItemUpsertWithNestedWhereUniqueInput? upsert;
  @override
  final GInspirationItemWhereUniqueInput? connect;
  @override
  final bool? disconnect;
  @override
  final bool? delete;

  factory _$GInspirationItemUpdateOneInlineInput(
          [void Function(GInspirationItemUpdateOneInlineInputBuilder)?
              updates]) =>
      (new GInspirationItemUpdateOneInlineInputBuilder()..update(updates))
          .build();

  _$GInspirationItemUpdateOneInlineInput._(
      {this.create,
      this.updateIt,
      this.upsert,
      this.connect,
      this.disconnect,
      this.delete})
      : super._();

  @override
  GInspirationItemUpdateOneInlineInput rebuild(
          void Function(GInspirationItemUpdateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemUpdateOneInlineInputBuilder toBuilder() =>
      new GInspirationItemUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemUpdateOneInlineInput &&
        create == other.create &&
        updateIt == other.updateIt &&
        upsert == other.upsert &&
        connect == other.connect &&
        disconnect == other.disconnect &&
        delete == other.delete;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc($jc($jc(0, create.hashCode), updateIt.hashCode),
                    upsert.hashCode),
                connect.hashCode),
            disconnect.hashCode),
        delete.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemUpdateOneInlineInput')
          ..add('create', create)
          ..add('updateIt', updateIt)
          ..add('upsert', upsert)
          ..add('connect', connect)
          ..add('disconnect', disconnect)
          ..add('delete', delete))
        .toString();
  }
}

class GInspirationItemUpdateOneInlineInputBuilder
    implements
        Builder<GInspirationItemUpdateOneInlineInput,
            GInspirationItemUpdateOneInlineInputBuilder> {
  _$GInspirationItemUpdateOneInlineInput? _$v;

  GInspirationItemCreateInputBuilder? _create;
  GInspirationItemCreateInputBuilder get create =>
      _$this._create ??= new GInspirationItemCreateInputBuilder();
  set create(GInspirationItemCreateInputBuilder? create) =>
      _$this._create = create;

  GInspirationItemUpdateWithNestedWhereUniqueInputBuilder? _updateIt;
  GInspirationItemUpdateWithNestedWhereUniqueInputBuilder get updateIt =>
      _$this._updateIt ??=
          new GInspirationItemUpdateWithNestedWhereUniqueInputBuilder();
  set updateIt(
          GInspirationItemUpdateWithNestedWhereUniqueInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GInspirationItemUpsertWithNestedWhereUniqueInputBuilder? _upsert;
  GInspirationItemUpsertWithNestedWhereUniqueInputBuilder get upsert =>
      _$this._upsert ??=
          new GInspirationItemUpsertWithNestedWhereUniqueInputBuilder();
  set upsert(GInspirationItemUpsertWithNestedWhereUniqueInputBuilder? upsert) =>
      _$this._upsert = upsert;

  GInspirationItemWhereUniqueInputBuilder? _connect;
  GInspirationItemWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GInspirationItemWhereUniqueInputBuilder();
  set connect(GInspirationItemWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  bool? _delete;
  bool? get delete => _$this._delete;
  set delete(bool? delete) => _$this._delete = delete;

  GInspirationItemUpdateOneInlineInputBuilder();

  GInspirationItemUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create?.toBuilder();
      _updateIt = $v.updateIt?.toBuilder();
      _upsert = $v.upsert?.toBuilder();
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _delete = $v.delete;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemUpdateOneInlineInput;
  }

  @override
  void update(
      void Function(GInspirationItemUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemUpdateOneInlineInput build() {
    _$GInspirationItemUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemUpdateOneInlineInput._(
              create: _create?.build(),
              updateIt: _updateIt?.build(),
              upsert: _upsert?.build(),
              connect: _connect?.build(),
              disconnect: disconnect,
              delete: delete);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        _create?.build();
        _$failedField = 'updateIt';
        _updateIt?.build();
        _$failedField = 'upsert';
        _upsert?.build();
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemUpdateOneInlineInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemUpdateWithNestedWhereUniqueInput
    extends GInspirationItemUpdateWithNestedWhereUniqueInput {
  @override
  final GInspirationItemWhereUniqueInput where;
  @override
  final GInspirationItemUpdateInput data;

  factory _$GInspirationItemUpdateWithNestedWhereUniqueInput(
          [void Function(
                  GInspirationItemUpdateWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GInspirationItemUpdateWithNestedWhereUniqueInputBuilder()
            ..update(updates))
          .build();

  _$GInspirationItemUpdateWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GInspirationItemUpdateWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GInspirationItemUpdateWithNestedWhereUniqueInput', 'data');
  }

  @override
  GInspirationItemUpdateWithNestedWhereUniqueInput rebuild(
          void Function(GInspirationItemUpdateWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemUpdateWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GInspirationItemUpdateWithNestedWhereUniqueInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemUpdateWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GInspirationItemUpdateWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GInspirationItemUpdateWithNestedWhereUniqueInputBuilder
    implements
        Builder<GInspirationItemUpdateWithNestedWhereUniqueInput,
            GInspirationItemUpdateWithNestedWhereUniqueInputBuilder> {
  _$GInspirationItemUpdateWithNestedWhereUniqueInput? _$v;

  GInspirationItemWhereUniqueInputBuilder? _where;
  GInspirationItemWhereUniqueInputBuilder get where =>
      _$this._where ??= new GInspirationItemWhereUniqueInputBuilder();
  set where(GInspirationItemWhereUniqueInputBuilder? where) =>
      _$this._where = where;

  GInspirationItemUpdateInputBuilder? _data;
  GInspirationItemUpdateInputBuilder get data =>
      _$this._data ??= new GInspirationItemUpdateInputBuilder();
  set data(GInspirationItemUpdateInputBuilder? data) => _$this._data = data;

  GInspirationItemUpdateWithNestedWhereUniqueInputBuilder();

  GInspirationItemUpdateWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemUpdateWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemUpdateWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GInspirationItemUpdateWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemUpdateWithNestedWhereUniqueInput build() {
    _$GInspirationItemUpdateWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemUpdateWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemUpdateWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemUpsertInput extends GInspirationItemUpsertInput {
  @override
  final GInspirationItemCreateInput create;
  @override
  final GInspirationItemUpdateInput updateIt;

  factory _$GInspirationItemUpsertInput(
          [void Function(GInspirationItemUpsertInputBuilder)? updates]) =>
      (new GInspirationItemUpsertInputBuilder()..update(updates)).build();

  _$GInspirationItemUpsertInput._(
      {required this.create, required this.updateIt})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        create, 'GInspirationItemUpsertInput', 'create');
    BuiltValueNullFieldError.checkNotNull(
        updateIt, 'GInspirationItemUpsertInput', 'updateIt');
  }

  @override
  GInspirationItemUpsertInput rebuild(
          void Function(GInspirationItemUpsertInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemUpsertInputBuilder toBuilder() =>
      new GInspirationItemUpsertInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemUpsertInput &&
        create == other.create &&
        updateIt == other.updateIt;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, create.hashCode), updateIt.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemUpsertInput')
          ..add('create', create)
          ..add('updateIt', updateIt))
        .toString();
  }
}

class GInspirationItemUpsertInputBuilder
    implements
        Builder<GInspirationItemUpsertInput,
            GInspirationItemUpsertInputBuilder> {
  _$GInspirationItemUpsertInput? _$v;

  GInspirationItemCreateInputBuilder? _create;
  GInspirationItemCreateInputBuilder get create =>
      _$this._create ??= new GInspirationItemCreateInputBuilder();
  set create(GInspirationItemCreateInputBuilder? create) =>
      _$this._create = create;

  GInspirationItemUpdateInputBuilder? _updateIt;
  GInspirationItemUpdateInputBuilder get updateIt =>
      _$this._updateIt ??= new GInspirationItemUpdateInputBuilder();
  set updateIt(GInspirationItemUpdateInputBuilder? updateIt) =>
      _$this._updateIt = updateIt;

  GInspirationItemUpsertInputBuilder();

  GInspirationItemUpsertInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _create = $v.create.toBuilder();
      _updateIt = $v.updateIt.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemUpsertInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemUpsertInput;
  }

  @override
  void update(void Function(GInspirationItemUpsertInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemUpsertInput build() {
    _$GInspirationItemUpsertInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemUpsertInput._(
              create: create.build(), updateIt: updateIt.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'create';
        create.build();
        _$failedField = 'updateIt';
        updateIt.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemUpsertInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemUpsertWithNestedWhereUniqueInput
    extends GInspirationItemUpsertWithNestedWhereUniqueInput {
  @override
  final GInspirationItemWhereUniqueInput where;
  @override
  final GInspirationItemUpsertInput data;

  factory _$GInspirationItemUpsertWithNestedWhereUniqueInput(
          [void Function(
                  GInspirationItemUpsertWithNestedWhereUniqueInputBuilder)?
              updates]) =>
      (new GInspirationItemUpsertWithNestedWhereUniqueInputBuilder()
            ..update(updates))
          .build();

  _$GInspirationItemUpsertWithNestedWhereUniqueInput._(
      {required this.where, required this.data})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        where, 'GInspirationItemUpsertWithNestedWhereUniqueInput', 'where');
    BuiltValueNullFieldError.checkNotNull(
        data, 'GInspirationItemUpsertWithNestedWhereUniqueInput', 'data');
  }

  @override
  GInspirationItemUpsertWithNestedWhereUniqueInput rebuild(
          void Function(GInspirationItemUpsertWithNestedWhereUniqueInputBuilder)
              updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemUpsertWithNestedWhereUniqueInputBuilder toBuilder() =>
      new GInspirationItemUpsertWithNestedWhereUniqueInputBuilder()
        ..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemUpsertWithNestedWhereUniqueInput &&
        where == other.where &&
        data == other.data;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), data.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper(
            'GInspirationItemUpsertWithNestedWhereUniqueInput')
          ..add('where', where)
          ..add('data', data))
        .toString();
  }
}

class GInspirationItemUpsertWithNestedWhereUniqueInputBuilder
    implements
        Builder<GInspirationItemUpsertWithNestedWhereUniqueInput,
            GInspirationItemUpsertWithNestedWhereUniqueInputBuilder> {
  _$GInspirationItemUpsertWithNestedWhereUniqueInput? _$v;

  GInspirationItemWhereUniqueInputBuilder? _where;
  GInspirationItemWhereUniqueInputBuilder get where =>
      _$this._where ??= new GInspirationItemWhereUniqueInputBuilder();
  set where(GInspirationItemWhereUniqueInputBuilder? where) =>
      _$this._where = where;

  GInspirationItemUpsertInputBuilder? _data;
  GInspirationItemUpsertInputBuilder get data =>
      _$this._data ??= new GInspirationItemUpsertInputBuilder();
  set data(GInspirationItemUpsertInputBuilder? data) => _$this._data = data;

  GInspirationItemUpsertWithNestedWhereUniqueInputBuilder();

  GInspirationItemUpsertWithNestedWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _data = $v.data.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemUpsertWithNestedWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemUpsertWithNestedWhereUniqueInput;
  }

  @override
  void update(
      void Function(GInspirationItemUpsertWithNestedWhereUniqueInputBuilder)?
          updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemUpsertWithNestedWhereUniqueInput build() {
    _$GInspirationItemUpsertWithNestedWhereUniqueInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemUpsertWithNestedWhereUniqueInput._(
              where: where.build(), data: data.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'data';
        data.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemUpsertWithNestedWhereUniqueInput',
            _$failedField,
            e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemWhereInput extends GInspirationItemWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GInspirationItemWhereInput>? AND;
  @override
  final BuiltList<GInspirationItemWhereInput>? OR;
  @override
  final BuiltList<GInspirationItemWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final String? title;
  @override
  final String? title_not;
  @override
  final BuiltList<String>? title_in;
  @override
  final BuiltList<String>? title_not_in;
  @override
  final String? title_contains;
  @override
  final String? title_not_contains;
  @override
  final String? title_starts_with;
  @override
  final String? title_not_starts_with;
  @override
  final String? title_ends_with;
  @override
  final String? title_not_ends_with;
  @override
  final GUserWhereInput? createdBy;
  @override
  final GUserWhereInput? updatedBy;
  @override
  final GUserWhereInput? publishedBy;
  @override
  final GAssetWhereInput? video;
  @override
  final GAssetWhereInput? mainImage;

  factory _$GInspirationItemWhereInput(
          [void Function(GInspirationItemWhereInputBuilder)? updates]) =>
      (new GInspirationItemWhereInputBuilder()..update(updates)).build();

  _$GInspirationItemWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.title,
      this.title_not,
      this.title_in,
      this.title_not_in,
      this.title_contains,
      this.title_not_contains,
      this.title_starts_with,
      this.title_not_starts_with,
      this.title_ends_with,
      this.title_not_ends_with,
      this.createdBy,
      this.updatedBy,
      this.publishedBy,
      this.video,
      this.mainImage})
      : super._();

  @override
  GInspirationItemWhereInput rebuild(
          void Function(GInspirationItemWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemWhereInputBuilder toBuilder() =>
      new GInspirationItemWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        title == other.title &&
        title_not == other.title_not &&
        title_in == other.title_in &&
        title_not_in == other.title_not_in &&
        title_contains == other.title_contains &&
        title_not_contains == other.title_not_contains &&
        title_starts_with == other.title_starts_with &&
        title_not_starts_with == other.title_not_starts_with &&
        title_ends_with == other.title_ends_with &&
        title_not_ends_with == other.title_not_ends_with &&
        createdBy == other.createdBy &&
        updatedBy == other.updatedBy &&
        publishedBy == other.publishedBy &&
        video == other.video &&
        mainImage == other.mainImage;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode),
                                                                                publishedAt_lt.hashCode),
                                                                            publishedAt_lte.hashCode),
                                                                        publishedAt_gt.hashCode),
                                                                    publishedAt_gte.hashCode),
                                                                title.hashCode),
                                                            title_not.hashCode),
                                                        title_in.hashCode),
                                                    title_not_in.hashCode),
                                                title_contains.hashCode),
                                            title_not_contains.hashCode),
                                        title_starts_with.hashCode),
                                    title_not_starts_with.hashCode),
                                title_ends_with.hashCode),
                            title_not_ends_with.hashCode),
                        createdBy.hashCode),
                    updatedBy.hashCode),
                publishedBy.hashCode),
            video.hashCode),
        mainImage.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('title', title)
          ..add('title_not', title_not)
          ..add('title_in', title_in)
          ..add('title_not_in', title_not_in)
          ..add('title_contains', title_contains)
          ..add('title_not_contains', title_not_contains)
          ..add('title_starts_with', title_starts_with)
          ..add('title_not_starts_with', title_not_starts_with)
          ..add('title_ends_with', title_ends_with)
          ..add('title_not_ends_with', title_not_ends_with)
          ..add('createdBy', createdBy)
          ..add('updatedBy', updatedBy)
          ..add('publishedBy', publishedBy)
          ..add('video', video)
          ..add('mainImage', mainImage))
        .toString();
  }
}

class GInspirationItemWhereInputBuilder
    implements
        Builder<GInspirationItemWhereInput, GInspirationItemWhereInputBuilder> {
  _$GInspirationItemWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GInspirationItemWhereInput>? _AND;
  ListBuilder<GInspirationItemWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GInspirationItemWhereInput>();
  set AND(ListBuilder<GInspirationItemWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GInspirationItemWhereInput>? _OR;
  ListBuilder<GInspirationItemWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GInspirationItemWhereInput>();
  set OR(ListBuilder<GInspirationItemWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GInspirationItemWhereInput>? _NOT;
  ListBuilder<GInspirationItemWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GInspirationItemWhereInput>();
  set NOT(ListBuilder<GInspirationItemWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  String? _title;
  String? get title => _$this._title;
  set title(String? title) => _$this._title = title;

  String? _title_not;
  String? get title_not => _$this._title_not;
  set title_not(String? title_not) => _$this._title_not = title_not;

  ListBuilder<String>? _title_in;
  ListBuilder<String> get title_in =>
      _$this._title_in ??= new ListBuilder<String>();
  set title_in(ListBuilder<String>? title_in) => _$this._title_in = title_in;

  ListBuilder<String>? _title_not_in;
  ListBuilder<String> get title_not_in =>
      _$this._title_not_in ??= new ListBuilder<String>();
  set title_not_in(ListBuilder<String>? title_not_in) =>
      _$this._title_not_in = title_not_in;

  String? _title_contains;
  String? get title_contains => _$this._title_contains;
  set title_contains(String? title_contains) =>
      _$this._title_contains = title_contains;

  String? _title_not_contains;
  String? get title_not_contains => _$this._title_not_contains;
  set title_not_contains(String? title_not_contains) =>
      _$this._title_not_contains = title_not_contains;

  String? _title_starts_with;
  String? get title_starts_with => _$this._title_starts_with;
  set title_starts_with(String? title_starts_with) =>
      _$this._title_starts_with = title_starts_with;

  String? _title_not_starts_with;
  String? get title_not_starts_with => _$this._title_not_starts_with;
  set title_not_starts_with(String? title_not_starts_with) =>
      _$this._title_not_starts_with = title_not_starts_with;

  String? _title_ends_with;
  String? get title_ends_with => _$this._title_ends_with;
  set title_ends_with(String? title_ends_with) =>
      _$this._title_ends_with = title_ends_with;

  String? _title_not_ends_with;
  String? get title_not_ends_with => _$this._title_not_ends_with;
  set title_not_ends_with(String? title_not_ends_with) =>
      _$this._title_not_ends_with = title_not_ends_with;

  GUserWhereInputBuilder? _createdBy;
  GUserWhereInputBuilder get createdBy =>
      _$this._createdBy ??= new GUserWhereInputBuilder();
  set createdBy(GUserWhereInputBuilder? createdBy) =>
      _$this._createdBy = createdBy;

  GUserWhereInputBuilder? _updatedBy;
  GUserWhereInputBuilder get updatedBy =>
      _$this._updatedBy ??= new GUserWhereInputBuilder();
  set updatedBy(GUserWhereInputBuilder? updatedBy) =>
      _$this._updatedBy = updatedBy;

  GUserWhereInputBuilder? _publishedBy;
  GUserWhereInputBuilder get publishedBy =>
      _$this._publishedBy ??= new GUserWhereInputBuilder();
  set publishedBy(GUserWhereInputBuilder? publishedBy) =>
      _$this._publishedBy = publishedBy;

  GAssetWhereInputBuilder? _video;
  GAssetWhereInputBuilder get video =>
      _$this._video ??= new GAssetWhereInputBuilder();
  set video(GAssetWhereInputBuilder? video) => _$this._video = video;

  GAssetWhereInputBuilder? _mainImage;
  GAssetWhereInputBuilder get mainImage =>
      _$this._mainImage ??= new GAssetWhereInputBuilder();
  set mainImage(GAssetWhereInputBuilder? mainImage) =>
      _$this._mainImage = mainImage;

  GInspirationItemWhereInputBuilder();

  GInspirationItemWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _title = $v.title;
      _title_not = $v.title_not;
      _title_in = $v.title_in?.toBuilder();
      _title_not_in = $v.title_not_in?.toBuilder();
      _title_contains = $v.title_contains;
      _title_not_contains = $v.title_not_contains;
      _title_starts_with = $v.title_starts_with;
      _title_not_starts_with = $v.title_not_starts_with;
      _title_ends_with = $v.title_ends_with;
      _title_not_ends_with = $v.title_not_ends_with;
      _createdBy = $v.createdBy?.toBuilder();
      _updatedBy = $v.updatedBy?.toBuilder();
      _publishedBy = $v.publishedBy?.toBuilder();
      _video = $v.video?.toBuilder();
      _mainImage = $v.mainImage?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemWhereInput;
  }

  @override
  void update(void Function(GInspirationItemWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemWhereInput build() {
    _$GInspirationItemWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GInspirationItemWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              title: title,
              title_not: title_not,
              title_in: _title_in?.build(),
              title_not_in: _title_not_in?.build(),
              title_contains: title_contains,
              title_not_contains: title_not_contains,
              title_starts_with: title_starts_with,
              title_not_starts_with: title_not_starts_with,
              title_ends_with: title_ends_with,
              title_not_ends_with: title_not_ends_with,
              createdBy: _createdBy?.build(),
              updatedBy: _updatedBy?.build(),
              publishedBy: _publishedBy?.build(),
              video: _video?.build(),
              mainImage: _mainImage?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'title_in';
        _title_in?.build();
        _$failedField = 'title_not_in';
        _title_not_in?.build();

        _$failedField = 'createdBy';
        _createdBy?.build();
        _$failedField = 'updatedBy';
        _updatedBy?.build();
        _$failedField = 'publishedBy';
        _publishedBy?.build();
        _$failedField = 'video';
        _video?.build();
        _$failedField = 'mainImage';
        _mainImage?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GInspirationItemWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GInspirationItemWhereUniqueInput
    extends GInspirationItemWhereUniqueInput {
  @override
  final String? id;

  factory _$GInspirationItemWhereUniqueInput(
          [void Function(GInspirationItemWhereUniqueInputBuilder)? updates]) =>
      (new GInspirationItemWhereUniqueInputBuilder()..update(updates)).build();

  _$GInspirationItemWhereUniqueInput._({this.id}) : super._();

  @override
  GInspirationItemWhereUniqueInput rebuild(
          void Function(GInspirationItemWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GInspirationItemWhereUniqueInputBuilder toBuilder() =>
      new GInspirationItemWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GInspirationItemWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GInspirationItemWhereUniqueInput')
          ..add('id', id))
        .toString();
  }
}

class GInspirationItemWhereUniqueInputBuilder
    implements
        Builder<GInspirationItemWhereUniqueInput,
            GInspirationItemWhereUniqueInputBuilder> {
  _$GInspirationItemWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GInspirationItemWhereUniqueInputBuilder();

  GInspirationItemWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GInspirationItemWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GInspirationItemWhereUniqueInput;
  }

  @override
  void update(void Function(GInspirationItemWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GInspirationItemWhereUniqueInput build() {
    final _$result = _$v ?? new _$GInspirationItemWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GJson extends GJson {
  @override
  final String value;

  factory _$GJson([void Function(GJsonBuilder)? updates]) =>
      (new GJsonBuilder()..update(updates)).build();

  _$GJson._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, 'GJson', 'value');
  }

  @override
  GJson rebuild(void Function(GJsonBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GJsonBuilder toBuilder() => new GJsonBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GJson && value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(0, value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GJson')..add('value', value))
        .toString();
  }
}

class GJsonBuilder implements Builder<GJson, GJsonBuilder> {
  _$GJson? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GJsonBuilder();

  GJsonBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GJson other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GJson;
  }

  @override
  void update(void Function(GJsonBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GJson build() {
    final _$result = _$v ??
        new _$GJson._(
            value:
                BuiltValueNullFieldError.checkNotNull(value, 'GJson', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GLocationInput extends GLocationInput {
  @override
  final double latitude;
  @override
  final double longitude;

  factory _$GLocationInput([void Function(GLocationInputBuilder)? updates]) =>
      (new GLocationInputBuilder()..update(updates)).build();

  _$GLocationInput._({required this.latitude, required this.longitude})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        latitude, 'GLocationInput', 'latitude');
    BuiltValueNullFieldError.checkNotNull(
        longitude, 'GLocationInput', 'longitude');
  }

  @override
  GLocationInput rebuild(void Function(GLocationInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GLocationInputBuilder toBuilder() =>
      new GLocationInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GLocationInput &&
        latitude == other.latitude &&
        longitude == other.longitude;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, latitude.hashCode), longitude.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GLocationInput')
          ..add('latitude', latitude)
          ..add('longitude', longitude))
        .toString();
  }
}

class GLocationInputBuilder
    implements Builder<GLocationInput, GLocationInputBuilder> {
  _$GLocationInput? _$v;

  double? _latitude;
  double? get latitude => _$this._latitude;
  set latitude(double? latitude) => _$this._latitude = latitude;

  double? _longitude;
  double? get longitude => _$this._longitude;
  set longitude(double? longitude) => _$this._longitude = longitude;

  GLocationInputBuilder();

  GLocationInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _latitude = $v.latitude;
      _longitude = $v.longitude;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GLocationInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GLocationInput;
  }

  @override
  void update(void Function(GLocationInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GLocationInput build() {
    final _$result = _$v ??
        new _$GLocationInput._(
            latitude: BuiltValueNullFieldError.checkNotNull(
                latitude, 'GLocationInput', 'latitude'),
            longitude: BuiltValueNullFieldError.checkNotNull(
                longitude, 'GLocationInput', 'longitude'));
    replace(_$result);
    return _$result;
  }
}

class _$GLong extends GLong {
  @override
  final String value;

  factory _$GLong([void Function(GLongBuilder)? updates]) =>
      (new GLongBuilder()..update(updates)).build();

  _$GLong._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, 'GLong', 'value');
  }

  @override
  GLong rebuild(void Function(GLongBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GLongBuilder toBuilder() => new GLongBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GLong && value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(0, value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GLong')..add('value', value))
        .toString();
  }
}

class GLongBuilder implements Builder<GLong, GLongBuilder> {
  _$GLong? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GLongBuilder();

  GLongBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GLong other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GLong;
  }

  @override
  void update(void Function(GLongBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GLong build() {
    final _$result = _$v ??
        new _$GLong._(
            value:
                BuiltValueNullFieldError.checkNotNull(value, 'GLong', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GPublishLocaleInput extends GPublishLocaleInput {
  @override
  final GLocale locale;
  @override
  final BuiltList<GStage> stages;

  factory _$GPublishLocaleInput(
          [void Function(GPublishLocaleInputBuilder)? updates]) =>
      (new GPublishLocaleInputBuilder()..update(updates)).build();

  _$GPublishLocaleInput._({required this.locale, required this.stages})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        locale, 'GPublishLocaleInput', 'locale');
    BuiltValueNullFieldError.checkNotNull(
        stages, 'GPublishLocaleInput', 'stages');
  }

  @override
  GPublishLocaleInput rebuild(
          void Function(GPublishLocaleInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GPublishLocaleInputBuilder toBuilder() =>
      new GPublishLocaleInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GPublishLocaleInput &&
        locale == other.locale &&
        stages == other.stages;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, locale.hashCode), stages.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GPublishLocaleInput')
          ..add('locale', locale)
          ..add('stages', stages))
        .toString();
  }
}

class GPublishLocaleInputBuilder
    implements Builder<GPublishLocaleInput, GPublishLocaleInputBuilder> {
  _$GPublishLocaleInput? _$v;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  ListBuilder<GStage>? _stages;
  ListBuilder<GStage> get stages =>
      _$this._stages ??= new ListBuilder<GStage>();
  set stages(ListBuilder<GStage>? stages) => _$this._stages = stages;

  GPublishLocaleInputBuilder();

  GPublishLocaleInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _locale = $v.locale;
      _stages = $v.stages.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GPublishLocaleInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GPublishLocaleInput;
  }

  @override
  void update(void Function(GPublishLocaleInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GPublishLocaleInput build() {
    _$GPublishLocaleInput _$result;
    try {
      _$result = _$v ??
          new _$GPublishLocaleInput._(
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, 'GPublishLocaleInput', 'locale'),
              stages: stages.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'stages';
        stages.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GPublishLocaleInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GRGBAInput extends GRGBAInput {
  @override
  final String r;
  @override
  final String g;
  @override
  final String b;
  @override
  final String a;

  factory _$GRGBAInput([void Function(GRGBAInputBuilder)? updates]) =>
      (new GRGBAInputBuilder()..update(updates)).build();

  _$GRGBAInput._(
      {required this.r, required this.g, required this.b, required this.a})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(r, 'GRGBAInput', 'r');
    BuiltValueNullFieldError.checkNotNull(g, 'GRGBAInput', 'g');
    BuiltValueNullFieldError.checkNotNull(b, 'GRGBAInput', 'b');
    BuiltValueNullFieldError.checkNotNull(a, 'GRGBAInput', 'a');
  }

  @override
  GRGBAInput rebuild(void Function(GRGBAInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRGBAInputBuilder toBuilder() => new GRGBAInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRGBAInput &&
        r == other.r &&
        g == other.g &&
        b == other.b &&
        a == other.a;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc($jc(0, r.hashCode), g.hashCode), b.hashCode), a.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GRGBAInput')
          ..add('r', r)
          ..add('g', g)
          ..add('b', b)
          ..add('a', a))
        .toString();
  }
}

class GRGBAInputBuilder implements Builder<GRGBAInput, GRGBAInputBuilder> {
  _$GRGBAInput? _$v;

  String? _r;
  String? get r => _$this._r;
  set r(String? r) => _$this._r = r;

  String? _g;
  String? get g => _$this._g;
  set g(String? g) => _$this._g = g;

  String? _b;
  String? get b => _$this._b;
  set b(String? b) => _$this._b = b;

  String? _a;
  String? get a => _$this._a;
  set a(String? a) => _$this._a = a;

  GRGBAInputBuilder();

  GRGBAInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _r = $v.r;
      _g = $v.g;
      _b = $v.b;
      _a = $v.a;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRGBAInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRGBAInput;
  }

  @override
  void update(void Function(GRGBAInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GRGBAInput build() {
    final _$result = _$v ??
        new _$GRGBAInput._(
            r: BuiltValueNullFieldError.checkNotNull(r, 'GRGBAInput', 'r'),
            g: BuiltValueNullFieldError.checkNotNull(g, 'GRGBAInput', 'g'),
            b: BuiltValueNullFieldError.checkNotNull(b, 'GRGBAInput', 'b'),
            a: BuiltValueNullFieldError.checkNotNull(a, 'GRGBAInput', 'a'));
    replace(_$result);
    return _$result;
  }
}

class _$GRichTextAST extends GRichTextAST {
  @override
  final String value;

  factory _$GRichTextAST([void Function(GRichTextASTBuilder)? updates]) =>
      (new GRichTextASTBuilder()..update(updates)).build();

  _$GRichTextAST._({required this.value}) : super._() {
    BuiltValueNullFieldError.checkNotNull(value, 'GRichTextAST', 'value');
  }

  @override
  GRichTextAST rebuild(void Function(GRichTextASTBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GRichTextASTBuilder toBuilder() => new GRichTextASTBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GRichTextAST && value == other.value;
  }

  @override
  int get hashCode {
    return $jf($jc(0, value.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GRichTextAST')..add('value', value))
        .toString();
  }
}

class GRichTextASTBuilder
    implements Builder<GRichTextAST, GRichTextASTBuilder> {
  _$GRichTextAST? _$v;

  String? _value;
  String? get value => _$this._value;
  set value(String? value) => _$this._value = value;

  GRichTextASTBuilder();

  GRichTextASTBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _value = $v.value;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GRichTextAST other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GRichTextAST;
  }

  @override
  void update(void Function(GRichTextASTBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GRichTextAST build() {
    final _$result = _$v ??
        new _$GRichTextAST._(
            value: BuiltValueNullFieldError.checkNotNull(
                value, 'GRichTextAST', 'value'));
    replace(_$result);
    return _$result;
  }
}

class _$GUnpublishLocaleInput extends GUnpublishLocaleInput {
  @override
  final GLocale locale;
  @override
  final BuiltList<GStage> stages;

  factory _$GUnpublishLocaleInput(
          [void Function(GUnpublishLocaleInputBuilder)? updates]) =>
      (new GUnpublishLocaleInputBuilder()..update(updates)).build();

  _$GUnpublishLocaleInput._({required this.locale, required this.stages})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(
        locale, 'GUnpublishLocaleInput', 'locale');
    BuiltValueNullFieldError.checkNotNull(
        stages, 'GUnpublishLocaleInput', 'stages');
  }

  @override
  GUnpublishLocaleInput rebuild(
          void Function(GUnpublishLocaleInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUnpublishLocaleInputBuilder toBuilder() =>
      new GUnpublishLocaleInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUnpublishLocaleInput &&
        locale == other.locale &&
        stages == other.stages;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, locale.hashCode), stages.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GUnpublishLocaleInput')
          ..add('locale', locale)
          ..add('stages', stages))
        .toString();
  }
}

class GUnpublishLocaleInputBuilder
    implements Builder<GUnpublishLocaleInput, GUnpublishLocaleInputBuilder> {
  _$GUnpublishLocaleInput? _$v;

  GLocale? _locale;
  GLocale? get locale => _$this._locale;
  set locale(GLocale? locale) => _$this._locale = locale;

  ListBuilder<GStage>? _stages;
  ListBuilder<GStage> get stages =>
      _$this._stages ??= new ListBuilder<GStage>();
  set stages(ListBuilder<GStage>? stages) => _$this._stages = stages;

  GUnpublishLocaleInputBuilder();

  GUnpublishLocaleInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _locale = $v.locale;
      _stages = $v.stages.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUnpublishLocaleInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUnpublishLocaleInput;
  }

  @override
  void update(void Function(GUnpublishLocaleInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GUnpublishLocaleInput build() {
    _$GUnpublishLocaleInput _$result;
    try {
      _$result = _$v ??
          new _$GUnpublishLocaleInput._(
              locale: BuiltValueNullFieldError.checkNotNull(
                  locale, 'GUnpublishLocaleInput', 'locale'),
              stages: stages.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'stages';
        stages.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GUnpublishLocaleInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserConnectInput extends GUserConnectInput {
  @override
  final GUserWhereUniqueInput where;
  @override
  final GConnectPositionInput? position;

  factory _$GUserConnectInput(
          [void Function(GUserConnectInputBuilder)? updates]) =>
      (new GUserConnectInputBuilder()..update(updates)).build();

  _$GUserConnectInput._({required this.where, this.position}) : super._() {
    BuiltValueNullFieldError.checkNotNull(where, 'GUserConnectInput', 'where');
  }

  @override
  GUserConnectInput rebuild(void Function(GUserConnectInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserConnectInputBuilder toBuilder() =>
      new GUserConnectInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserConnectInput &&
        where == other.where &&
        position == other.position;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, where.hashCode), position.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GUserConnectInput')
          ..add('where', where)
          ..add('position', position))
        .toString();
  }
}

class GUserConnectInputBuilder
    implements Builder<GUserConnectInput, GUserConnectInputBuilder> {
  _$GUserConnectInput? _$v;

  GUserWhereUniqueInputBuilder? _where;
  GUserWhereUniqueInputBuilder get where =>
      _$this._where ??= new GUserWhereUniqueInputBuilder();
  set where(GUserWhereUniqueInputBuilder? where) => _$this._where = where;

  GConnectPositionInputBuilder? _position;
  GConnectPositionInputBuilder get position =>
      _$this._position ??= new GConnectPositionInputBuilder();
  set position(GConnectPositionInputBuilder? position) =>
      _$this._position = position;

  GUserConnectInputBuilder();

  GUserConnectInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _where = $v.where.toBuilder();
      _position = $v.position?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserConnectInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserConnectInput;
  }

  @override
  void update(void Function(GUserConnectInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GUserConnectInput build() {
    _$GUserConnectInput _$result;
    try {
      _$result = _$v ??
          new _$GUserConnectInput._(
              where: where.build(), position: _position?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'where';
        where.build();
        _$failedField = 'position';
        _position?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GUserConnectInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserCreateManyInlineInput extends GUserCreateManyInlineInput {
  @override
  final BuiltList<GUserWhereUniqueInput>? connect;

  factory _$GUserCreateManyInlineInput(
          [void Function(GUserCreateManyInlineInputBuilder)? updates]) =>
      (new GUserCreateManyInlineInputBuilder()..update(updates)).build();

  _$GUserCreateManyInlineInput._({this.connect}) : super._();

  @override
  GUserCreateManyInlineInput rebuild(
          void Function(GUserCreateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserCreateManyInlineInputBuilder toBuilder() =>
      new GUserCreateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserCreateManyInlineInput && connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc(0, connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GUserCreateManyInlineInput')
          ..add('connect', connect))
        .toString();
  }
}

class GUserCreateManyInlineInputBuilder
    implements
        Builder<GUserCreateManyInlineInput, GUserCreateManyInlineInputBuilder> {
  _$GUserCreateManyInlineInput? _$v;

  ListBuilder<GUserWhereUniqueInput>? _connect;
  ListBuilder<GUserWhereUniqueInput> get connect =>
      _$this._connect ??= new ListBuilder<GUserWhereUniqueInput>();
  set connect(ListBuilder<GUserWhereUniqueInput>? connect) =>
      _$this._connect = connect;

  GUserCreateManyInlineInputBuilder();

  GUserCreateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserCreateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserCreateManyInlineInput;
  }

  @override
  void update(void Function(GUserCreateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GUserCreateManyInlineInput build() {
    _$GUserCreateManyInlineInput _$result;
    try {
      _$result =
          _$v ?? new _$GUserCreateManyInlineInput._(connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GUserCreateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserCreateOneInlineInput extends GUserCreateOneInlineInput {
  @override
  final GUserWhereUniqueInput? connect;

  factory _$GUserCreateOneInlineInput(
          [void Function(GUserCreateOneInlineInputBuilder)? updates]) =>
      (new GUserCreateOneInlineInputBuilder()..update(updates)).build();

  _$GUserCreateOneInlineInput._({this.connect}) : super._();

  @override
  GUserCreateOneInlineInput rebuild(
          void Function(GUserCreateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserCreateOneInlineInputBuilder toBuilder() =>
      new GUserCreateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserCreateOneInlineInput && connect == other.connect;
  }

  @override
  int get hashCode {
    return $jf($jc(0, connect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GUserCreateOneInlineInput')
          ..add('connect', connect))
        .toString();
  }
}

class GUserCreateOneInlineInputBuilder
    implements
        Builder<GUserCreateOneInlineInput, GUserCreateOneInlineInputBuilder> {
  _$GUserCreateOneInlineInput? _$v;

  GUserWhereUniqueInputBuilder? _connect;
  GUserWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GUserWhereUniqueInputBuilder();
  set connect(GUserWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  GUserCreateOneInlineInputBuilder();

  GUserCreateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserCreateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserCreateOneInlineInput;
  }

  @override
  void update(void Function(GUserCreateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GUserCreateOneInlineInput build() {
    _$GUserCreateOneInlineInput _$result;
    try {
      _$result =
          _$v ?? new _$GUserCreateOneInlineInput._(connect: _connect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GUserCreateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserManyWhereInput extends GUserManyWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GUserWhereInput>? AND;
  @override
  final BuiltList<GUserWhereInput>? OR;
  @override
  final BuiltList<GUserWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final String? name;
  @override
  final String? name_not;
  @override
  final BuiltList<String>? name_in;
  @override
  final BuiltList<String>? name_not_in;
  @override
  final String? name_contains;
  @override
  final String? name_not_contains;
  @override
  final String? name_starts_with;
  @override
  final String? name_not_starts_with;
  @override
  final String? name_ends_with;
  @override
  final String? name_not_ends_with;
  @override
  final String? picture;
  @override
  final String? picture_not;
  @override
  final BuiltList<String>? picture_in;
  @override
  final BuiltList<String>? picture_not_in;
  @override
  final String? picture_contains;
  @override
  final String? picture_not_contains;
  @override
  final String? picture_starts_with;
  @override
  final String? picture_not_starts_with;
  @override
  final String? picture_ends_with;
  @override
  final String? picture_not_ends_with;
  @override
  final bool? isActive;
  @override
  final bool? isActive_not;
  @override
  final GUserKind? kind;
  @override
  final GUserKind? kind_not;
  @override
  final BuiltList<GUserKind>? kind_in;
  @override
  final BuiltList<GUserKind>? kind_not_in;

  factory _$GUserManyWhereInput(
          [void Function(GUserManyWhereInputBuilder)? updates]) =>
      (new GUserManyWhereInputBuilder()..update(updates)).build();

  _$GUserManyWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.name,
      this.name_not,
      this.name_in,
      this.name_not_in,
      this.name_contains,
      this.name_not_contains,
      this.name_starts_with,
      this.name_not_starts_with,
      this.name_ends_with,
      this.name_not_ends_with,
      this.picture,
      this.picture_not,
      this.picture_in,
      this.picture_not_in,
      this.picture_contains,
      this.picture_not_contains,
      this.picture_starts_with,
      this.picture_not_starts_with,
      this.picture_ends_with,
      this.picture_not_ends_with,
      this.isActive,
      this.isActive_not,
      this.kind,
      this.kind_not,
      this.kind_in,
      this.kind_not_in})
      : super._();

  @override
  GUserManyWhereInput rebuild(
          void Function(GUserManyWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserManyWhereInputBuilder toBuilder() =>
      new GUserManyWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserManyWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        name == other.name &&
        name_not == other.name_not &&
        name_in == other.name_in &&
        name_not_in == other.name_not_in &&
        name_contains == other.name_contains &&
        name_not_contains == other.name_not_contains &&
        name_starts_with == other.name_starts_with &&
        name_not_starts_with == other.name_not_starts_with &&
        name_ends_with == other.name_ends_with &&
        name_not_ends_with == other.name_not_ends_with &&
        picture == other.picture &&
        picture_not == other.picture_not &&
        picture_in == other.picture_in &&
        picture_not_in == other.picture_not_in &&
        picture_contains == other.picture_contains &&
        picture_not_contains == other.picture_not_contains &&
        picture_starts_with == other.picture_starts_with &&
        picture_not_starts_with == other.picture_not_starts_with &&
        picture_ends_with == other.picture_ends_with &&
        picture_not_ends_with == other.picture_not_ends_with &&
        isActive == other.isActive &&
        isActive_not == other.isActive_not &&
        kind == other.kind &&
        kind_not == other.kind_not &&
        kind_in == other.kind_in &&
        kind_not_in == other.kind_not_in;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode), publishedAt_lt.hashCode), publishedAt_lte.hashCode), publishedAt_gt.hashCode), publishedAt_gte.hashCode), name.hashCode), name_not.hashCode), name_in.hashCode), name_not_in.hashCode), name_contains.hashCode), name_not_contains.hashCode), name_starts_with.hashCode),
                                                                                name_not_starts_with.hashCode),
                                                                            name_ends_with.hashCode),
                                                                        name_not_ends_with.hashCode),
                                                                    picture.hashCode),
                                                                picture_not.hashCode),
                                                            picture_in.hashCode),
                                                        picture_not_in.hashCode),
                                                    picture_contains.hashCode),
                                                picture_not_contains.hashCode),
                                            picture_starts_with.hashCode),
                                        picture_not_starts_with.hashCode),
                                    picture_ends_with.hashCode),
                                picture_not_ends_with.hashCode),
                            isActive.hashCode),
                        isActive_not.hashCode),
                    kind.hashCode),
                kind_not.hashCode),
            kind_in.hashCode),
        kind_not_in.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GUserManyWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('name', name)
          ..add('name_not', name_not)
          ..add('name_in', name_in)
          ..add('name_not_in', name_not_in)
          ..add('name_contains', name_contains)
          ..add('name_not_contains', name_not_contains)
          ..add('name_starts_with', name_starts_with)
          ..add('name_not_starts_with', name_not_starts_with)
          ..add('name_ends_with', name_ends_with)
          ..add('name_not_ends_with', name_not_ends_with)
          ..add('picture', picture)
          ..add('picture_not', picture_not)
          ..add('picture_in', picture_in)
          ..add('picture_not_in', picture_not_in)
          ..add('picture_contains', picture_contains)
          ..add('picture_not_contains', picture_not_contains)
          ..add('picture_starts_with', picture_starts_with)
          ..add('picture_not_starts_with', picture_not_starts_with)
          ..add('picture_ends_with', picture_ends_with)
          ..add('picture_not_ends_with', picture_not_ends_with)
          ..add('isActive', isActive)
          ..add('isActive_not', isActive_not)
          ..add('kind', kind)
          ..add('kind_not', kind_not)
          ..add('kind_in', kind_in)
          ..add('kind_not_in', kind_not_in))
        .toString();
  }
}

class GUserManyWhereInputBuilder
    implements Builder<GUserManyWhereInput, GUserManyWhereInputBuilder> {
  _$GUserManyWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GUserWhereInput>? _AND;
  ListBuilder<GUserWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GUserWhereInput>();
  set AND(ListBuilder<GUserWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GUserWhereInput>? _OR;
  ListBuilder<GUserWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GUserWhereInput>();
  set OR(ListBuilder<GUserWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GUserWhereInput>? _NOT;
  ListBuilder<GUserWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GUserWhereInput>();
  set NOT(ListBuilder<GUserWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _name_not;
  String? get name_not => _$this._name_not;
  set name_not(String? name_not) => _$this._name_not = name_not;

  ListBuilder<String>? _name_in;
  ListBuilder<String> get name_in =>
      _$this._name_in ??= new ListBuilder<String>();
  set name_in(ListBuilder<String>? name_in) => _$this._name_in = name_in;

  ListBuilder<String>? _name_not_in;
  ListBuilder<String> get name_not_in =>
      _$this._name_not_in ??= new ListBuilder<String>();
  set name_not_in(ListBuilder<String>? name_not_in) =>
      _$this._name_not_in = name_not_in;

  String? _name_contains;
  String? get name_contains => _$this._name_contains;
  set name_contains(String? name_contains) =>
      _$this._name_contains = name_contains;

  String? _name_not_contains;
  String? get name_not_contains => _$this._name_not_contains;
  set name_not_contains(String? name_not_contains) =>
      _$this._name_not_contains = name_not_contains;

  String? _name_starts_with;
  String? get name_starts_with => _$this._name_starts_with;
  set name_starts_with(String? name_starts_with) =>
      _$this._name_starts_with = name_starts_with;

  String? _name_not_starts_with;
  String? get name_not_starts_with => _$this._name_not_starts_with;
  set name_not_starts_with(String? name_not_starts_with) =>
      _$this._name_not_starts_with = name_not_starts_with;

  String? _name_ends_with;
  String? get name_ends_with => _$this._name_ends_with;
  set name_ends_with(String? name_ends_with) =>
      _$this._name_ends_with = name_ends_with;

  String? _name_not_ends_with;
  String? get name_not_ends_with => _$this._name_not_ends_with;
  set name_not_ends_with(String? name_not_ends_with) =>
      _$this._name_not_ends_with = name_not_ends_with;

  String? _picture;
  String? get picture => _$this._picture;
  set picture(String? picture) => _$this._picture = picture;

  String? _picture_not;
  String? get picture_not => _$this._picture_not;
  set picture_not(String? picture_not) => _$this._picture_not = picture_not;

  ListBuilder<String>? _picture_in;
  ListBuilder<String> get picture_in =>
      _$this._picture_in ??= new ListBuilder<String>();
  set picture_in(ListBuilder<String>? picture_in) =>
      _$this._picture_in = picture_in;

  ListBuilder<String>? _picture_not_in;
  ListBuilder<String> get picture_not_in =>
      _$this._picture_not_in ??= new ListBuilder<String>();
  set picture_not_in(ListBuilder<String>? picture_not_in) =>
      _$this._picture_not_in = picture_not_in;

  String? _picture_contains;
  String? get picture_contains => _$this._picture_contains;
  set picture_contains(String? picture_contains) =>
      _$this._picture_contains = picture_contains;

  String? _picture_not_contains;
  String? get picture_not_contains => _$this._picture_not_contains;
  set picture_not_contains(String? picture_not_contains) =>
      _$this._picture_not_contains = picture_not_contains;

  String? _picture_starts_with;
  String? get picture_starts_with => _$this._picture_starts_with;
  set picture_starts_with(String? picture_starts_with) =>
      _$this._picture_starts_with = picture_starts_with;

  String? _picture_not_starts_with;
  String? get picture_not_starts_with => _$this._picture_not_starts_with;
  set picture_not_starts_with(String? picture_not_starts_with) =>
      _$this._picture_not_starts_with = picture_not_starts_with;

  String? _picture_ends_with;
  String? get picture_ends_with => _$this._picture_ends_with;
  set picture_ends_with(String? picture_ends_with) =>
      _$this._picture_ends_with = picture_ends_with;

  String? _picture_not_ends_with;
  String? get picture_not_ends_with => _$this._picture_not_ends_with;
  set picture_not_ends_with(String? picture_not_ends_with) =>
      _$this._picture_not_ends_with = picture_not_ends_with;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  bool? _isActive_not;
  bool? get isActive_not => _$this._isActive_not;
  set isActive_not(bool? isActive_not) => _$this._isActive_not = isActive_not;

  GUserKind? _kind;
  GUserKind? get kind => _$this._kind;
  set kind(GUserKind? kind) => _$this._kind = kind;

  GUserKind? _kind_not;
  GUserKind? get kind_not => _$this._kind_not;
  set kind_not(GUserKind? kind_not) => _$this._kind_not = kind_not;

  ListBuilder<GUserKind>? _kind_in;
  ListBuilder<GUserKind> get kind_in =>
      _$this._kind_in ??= new ListBuilder<GUserKind>();
  set kind_in(ListBuilder<GUserKind>? kind_in) => _$this._kind_in = kind_in;

  ListBuilder<GUserKind>? _kind_not_in;
  ListBuilder<GUserKind> get kind_not_in =>
      _$this._kind_not_in ??= new ListBuilder<GUserKind>();
  set kind_not_in(ListBuilder<GUserKind>? kind_not_in) =>
      _$this._kind_not_in = kind_not_in;

  GUserManyWhereInputBuilder();

  GUserManyWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _name = $v.name;
      _name_not = $v.name_not;
      _name_in = $v.name_in?.toBuilder();
      _name_not_in = $v.name_not_in?.toBuilder();
      _name_contains = $v.name_contains;
      _name_not_contains = $v.name_not_contains;
      _name_starts_with = $v.name_starts_with;
      _name_not_starts_with = $v.name_not_starts_with;
      _name_ends_with = $v.name_ends_with;
      _name_not_ends_with = $v.name_not_ends_with;
      _picture = $v.picture;
      _picture_not = $v.picture_not;
      _picture_in = $v.picture_in?.toBuilder();
      _picture_not_in = $v.picture_not_in?.toBuilder();
      _picture_contains = $v.picture_contains;
      _picture_not_contains = $v.picture_not_contains;
      _picture_starts_with = $v.picture_starts_with;
      _picture_not_starts_with = $v.picture_not_starts_with;
      _picture_ends_with = $v.picture_ends_with;
      _picture_not_ends_with = $v.picture_not_ends_with;
      _isActive = $v.isActive;
      _isActive_not = $v.isActive_not;
      _kind = $v.kind;
      _kind_not = $v.kind_not;
      _kind_in = $v.kind_in?.toBuilder();
      _kind_not_in = $v.kind_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserManyWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserManyWhereInput;
  }

  @override
  void update(void Function(GUserManyWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GUserManyWhereInput build() {
    _$GUserManyWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GUserManyWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              name: name,
              name_not: name_not,
              name_in: _name_in?.build(),
              name_not_in: _name_not_in?.build(),
              name_contains: name_contains,
              name_not_contains: name_not_contains,
              name_starts_with: name_starts_with,
              name_not_starts_with: name_not_starts_with,
              name_ends_with: name_ends_with,
              name_not_ends_with: name_not_ends_with,
              picture: picture,
              picture_not: picture_not,
              picture_in: _picture_in?.build(),
              picture_not_in: _picture_not_in?.build(),
              picture_contains: picture_contains,
              picture_not_contains: picture_not_contains,
              picture_starts_with: picture_starts_with,
              picture_not_starts_with: picture_not_starts_with,
              picture_ends_with: picture_ends_with,
              picture_not_ends_with: picture_not_ends_with,
              isActive: isActive,
              isActive_not: isActive_not,
              kind: kind,
              kind_not: kind_not,
              kind_in: _kind_in?.build(),
              kind_not_in: _kind_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'name_in';
        _name_in?.build();
        _$failedField = 'name_not_in';
        _name_not_in?.build();

        _$failedField = 'picture_in';
        _picture_in?.build();
        _$failedField = 'picture_not_in';
        _picture_not_in?.build();

        _$failedField = 'kind_in';
        _kind_in?.build();
        _$failedField = 'kind_not_in';
        _kind_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GUserManyWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserUpdateManyInlineInput extends GUserUpdateManyInlineInput {
  @override
  final BuiltList<GUserConnectInput>? connect;
  @override
  final BuiltList<GUserWhereUniqueInput>? set;
  @override
  final BuiltList<GUserWhereUniqueInput>? disconnect;

  factory _$GUserUpdateManyInlineInput(
          [void Function(GUserUpdateManyInlineInputBuilder)? updates]) =>
      (new GUserUpdateManyInlineInputBuilder()..update(updates)).build();

  _$GUserUpdateManyInlineInput._({this.connect, this.set, this.disconnect})
      : super._();

  @override
  GUserUpdateManyInlineInput rebuild(
          void Function(GUserUpdateManyInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserUpdateManyInlineInputBuilder toBuilder() =>
      new GUserUpdateManyInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserUpdateManyInlineInput &&
        connect == other.connect &&
        set == other.set &&
        disconnect == other.disconnect;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, connect.hashCode), set.hashCode), disconnect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GUserUpdateManyInlineInput')
          ..add('connect', connect)
          ..add('set', set)
          ..add('disconnect', disconnect))
        .toString();
  }
}

class GUserUpdateManyInlineInputBuilder
    implements
        Builder<GUserUpdateManyInlineInput, GUserUpdateManyInlineInputBuilder> {
  _$GUserUpdateManyInlineInput? _$v;

  ListBuilder<GUserConnectInput>? _connect;
  ListBuilder<GUserConnectInput> get connect =>
      _$this._connect ??= new ListBuilder<GUserConnectInput>();
  set connect(ListBuilder<GUserConnectInput>? connect) =>
      _$this._connect = connect;

  ListBuilder<GUserWhereUniqueInput>? _set;
  ListBuilder<GUserWhereUniqueInput> get set =>
      _$this._set ??= new ListBuilder<GUserWhereUniqueInput>();
  set set(ListBuilder<GUserWhereUniqueInput>? set) => _$this._set = set;

  ListBuilder<GUserWhereUniqueInput>? _disconnect;
  ListBuilder<GUserWhereUniqueInput> get disconnect =>
      _$this._disconnect ??= new ListBuilder<GUserWhereUniqueInput>();
  set disconnect(ListBuilder<GUserWhereUniqueInput>? disconnect) =>
      _$this._disconnect = disconnect;

  GUserUpdateManyInlineInputBuilder();

  GUserUpdateManyInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _set = $v.set?.toBuilder();
      _disconnect = $v.disconnect?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserUpdateManyInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserUpdateManyInlineInput;
  }

  @override
  void update(void Function(GUserUpdateManyInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GUserUpdateManyInlineInput build() {
    _$GUserUpdateManyInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GUserUpdateManyInlineInput._(
              connect: _connect?.build(),
              set: _set?.build(),
              disconnect: _disconnect?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
        _$failedField = 'set';
        _set?.build();
        _$failedField = 'disconnect';
        _disconnect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GUserUpdateManyInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserUpdateOneInlineInput extends GUserUpdateOneInlineInput {
  @override
  final GUserWhereUniqueInput? connect;
  @override
  final bool? disconnect;

  factory _$GUserUpdateOneInlineInput(
          [void Function(GUserUpdateOneInlineInputBuilder)? updates]) =>
      (new GUserUpdateOneInlineInputBuilder()..update(updates)).build();

  _$GUserUpdateOneInlineInput._({this.connect, this.disconnect}) : super._();

  @override
  GUserUpdateOneInlineInput rebuild(
          void Function(GUserUpdateOneInlineInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserUpdateOneInlineInputBuilder toBuilder() =>
      new GUserUpdateOneInlineInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserUpdateOneInlineInput &&
        connect == other.connect &&
        disconnect == other.disconnect;
  }

  @override
  int get hashCode {
    return $jf($jc($jc(0, connect.hashCode), disconnect.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GUserUpdateOneInlineInput')
          ..add('connect', connect)
          ..add('disconnect', disconnect))
        .toString();
  }
}

class GUserUpdateOneInlineInputBuilder
    implements
        Builder<GUserUpdateOneInlineInput, GUserUpdateOneInlineInputBuilder> {
  _$GUserUpdateOneInlineInput? _$v;

  GUserWhereUniqueInputBuilder? _connect;
  GUserWhereUniqueInputBuilder get connect =>
      _$this._connect ??= new GUserWhereUniqueInputBuilder();
  set connect(GUserWhereUniqueInputBuilder? connect) =>
      _$this._connect = connect;

  bool? _disconnect;
  bool? get disconnect => _$this._disconnect;
  set disconnect(bool? disconnect) => _$this._disconnect = disconnect;

  GUserUpdateOneInlineInputBuilder();

  GUserUpdateOneInlineInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _connect = $v.connect?.toBuilder();
      _disconnect = $v.disconnect;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserUpdateOneInlineInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserUpdateOneInlineInput;
  }

  @override
  void update(void Function(GUserUpdateOneInlineInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GUserUpdateOneInlineInput build() {
    _$GUserUpdateOneInlineInput _$result;
    try {
      _$result = _$v ??
          new _$GUserUpdateOneInlineInput._(
              connect: _connect?.build(), disconnect: disconnect);
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'connect';
        _connect?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GUserUpdateOneInlineInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserWhereInput extends GUserWhereInput {
  @override
  final String? G_search;
  @override
  final BuiltList<GUserWhereInput>? AND;
  @override
  final BuiltList<GUserWhereInput>? OR;
  @override
  final BuiltList<GUserWhereInput>? NOT;
  @override
  final String? id;
  @override
  final String? id_not;
  @override
  final BuiltList<String>? id_in;
  @override
  final BuiltList<String>? id_not_in;
  @override
  final String? id_contains;
  @override
  final String? id_not_contains;
  @override
  final String? id_starts_with;
  @override
  final String? id_not_starts_with;
  @override
  final String? id_ends_with;
  @override
  final String? id_not_ends_with;
  @override
  final DateTime? createdAt;
  @override
  final DateTime? createdAt_not;
  @override
  final BuiltList<DateTime>? createdAt_in;
  @override
  final BuiltList<DateTime>? createdAt_not_in;
  @override
  final DateTime? createdAt_lt;
  @override
  final DateTime? createdAt_lte;
  @override
  final DateTime? createdAt_gt;
  @override
  final DateTime? createdAt_gte;
  @override
  final DateTime? updatedAt;
  @override
  final DateTime? updatedAt_not;
  @override
  final BuiltList<DateTime>? updatedAt_in;
  @override
  final BuiltList<DateTime>? updatedAt_not_in;
  @override
  final DateTime? updatedAt_lt;
  @override
  final DateTime? updatedAt_lte;
  @override
  final DateTime? updatedAt_gt;
  @override
  final DateTime? updatedAt_gte;
  @override
  final DateTime? publishedAt;
  @override
  final DateTime? publishedAt_not;
  @override
  final BuiltList<DateTime>? publishedAt_in;
  @override
  final BuiltList<DateTime>? publishedAt_not_in;
  @override
  final DateTime? publishedAt_lt;
  @override
  final DateTime? publishedAt_lte;
  @override
  final DateTime? publishedAt_gt;
  @override
  final DateTime? publishedAt_gte;
  @override
  final String? name;
  @override
  final String? name_not;
  @override
  final BuiltList<String>? name_in;
  @override
  final BuiltList<String>? name_not_in;
  @override
  final String? name_contains;
  @override
  final String? name_not_contains;
  @override
  final String? name_starts_with;
  @override
  final String? name_not_starts_with;
  @override
  final String? name_ends_with;
  @override
  final String? name_not_ends_with;
  @override
  final String? picture;
  @override
  final String? picture_not;
  @override
  final BuiltList<String>? picture_in;
  @override
  final BuiltList<String>? picture_not_in;
  @override
  final String? picture_contains;
  @override
  final String? picture_not_contains;
  @override
  final String? picture_starts_with;
  @override
  final String? picture_not_starts_with;
  @override
  final String? picture_ends_with;
  @override
  final String? picture_not_ends_with;
  @override
  final bool? isActive;
  @override
  final bool? isActive_not;
  @override
  final GUserKind? kind;
  @override
  final GUserKind? kind_not;
  @override
  final BuiltList<GUserKind>? kind_in;
  @override
  final BuiltList<GUserKind>? kind_not_in;

  factory _$GUserWhereInput([void Function(GUserWhereInputBuilder)? updates]) =>
      (new GUserWhereInputBuilder()..update(updates)).build();

  _$GUserWhereInput._(
      {this.G_search,
      this.AND,
      this.OR,
      this.NOT,
      this.id,
      this.id_not,
      this.id_in,
      this.id_not_in,
      this.id_contains,
      this.id_not_contains,
      this.id_starts_with,
      this.id_not_starts_with,
      this.id_ends_with,
      this.id_not_ends_with,
      this.createdAt,
      this.createdAt_not,
      this.createdAt_in,
      this.createdAt_not_in,
      this.createdAt_lt,
      this.createdAt_lte,
      this.createdAt_gt,
      this.createdAt_gte,
      this.updatedAt,
      this.updatedAt_not,
      this.updatedAt_in,
      this.updatedAt_not_in,
      this.updatedAt_lt,
      this.updatedAt_lte,
      this.updatedAt_gt,
      this.updatedAt_gte,
      this.publishedAt,
      this.publishedAt_not,
      this.publishedAt_in,
      this.publishedAt_not_in,
      this.publishedAt_lt,
      this.publishedAt_lte,
      this.publishedAt_gt,
      this.publishedAt_gte,
      this.name,
      this.name_not,
      this.name_in,
      this.name_not_in,
      this.name_contains,
      this.name_not_contains,
      this.name_starts_with,
      this.name_not_starts_with,
      this.name_ends_with,
      this.name_not_ends_with,
      this.picture,
      this.picture_not,
      this.picture_in,
      this.picture_not_in,
      this.picture_contains,
      this.picture_not_contains,
      this.picture_starts_with,
      this.picture_not_starts_with,
      this.picture_ends_with,
      this.picture_not_ends_with,
      this.isActive,
      this.isActive_not,
      this.kind,
      this.kind_not,
      this.kind_in,
      this.kind_not_in})
      : super._();

  @override
  GUserWhereInput rebuild(void Function(GUserWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserWhereInputBuilder toBuilder() =>
      new GUserWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserWhereInput &&
        G_search == other.G_search &&
        AND == other.AND &&
        OR == other.OR &&
        NOT == other.NOT &&
        id == other.id &&
        id_not == other.id_not &&
        id_in == other.id_in &&
        id_not_in == other.id_not_in &&
        id_contains == other.id_contains &&
        id_not_contains == other.id_not_contains &&
        id_starts_with == other.id_starts_with &&
        id_not_starts_with == other.id_not_starts_with &&
        id_ends_with == other.id_ends_with &&
        id_not_ends_with == other.id_not_ends_with &&
        createdAt == other.createdAt &&
        createdAt_not == other.createdAt_not &&
        createdAt_in == other.createdAt_in &&
        createdAt_not_in == other.createdAt_not_in &&
        createdAt_lt == other.createdAt_lt &&
        createdAt_lte == other.createdAt_lte &&
        createdAt_gt == other.createdAt_gt &&
        createdAt_gte == other.createdAt_gte &&
        updatedAt == other.updatedAt &&
        updatedAt_not == other.updatedAt_not &&
        updatedAt_in == other.updatedAt_in &&
        updatedAt_not_in == other.updatedAt_not_in &&
        updatedAt_lt == other.updatedAt_lt &&
        updatedAt_lte == other.updatedAt_lte &&
        updatedAt_gt == other.updatedAt_gt &&
        updatedAt_gte == other.updatedAt_gte &&
        publishedAt == other.publishedAt &&
        publishedAt_not == other.publishedAt_not &&
        publishedAt_in == other.publishedAt_in &&
        publishedAt_not_in == other.publishedAt_not_in &&
        publishedAt_lt == other.publishedAt_lt &&
        publishedAt_lte == other.publishedAt_lte &&
        publishedAt_gt == other.publishedAt_gt &&
        publishedAt_gte == other.publishedAt_gte &&
        name == other.name &&
        name_not == other.name_not &&
        name_in == other.name_in &&
        name_not_in == other.name_not_in &&
        name_contains == other.name_contains &&
        name_not_contains == other.name_not_contains &&
        name_starts_with == other.name_starts_with &&
        name_not_starts_with == other.name_not_starts_with &&
        name_ends_with == other.name_ends_with &&
        name_not_ends_with == other.name_not_ends_with &&
        picture == other.picture &&
        picture_not == other.picture_not &&
        picture_in == other.picture_in &&
        picture_not_in == other.picture_not_in &&
        picture_contains == other.picture_contains &&
        picture_not_contains == other.picture_not_contains &&
        picture_starts_with == other.picture_starts_with &&
        picture_not_starts_with == other.picture_not_starts_with &&
        picture_ends_with == other.picture_ends_with &&
        picture_not_ends_with == other.picture_not_ends_with &&
        isActive == other.isActive &&
        isActive_not == other.isActive_not &&
        kind == other.kind &&
        kind_not == other.kind_not &&
        kind_in == other.kind_in &&
        kind_not_in == other.kind_not_in;
  }

  @override
  int get hashCode {
    return $jf($jc(
        $jc(
            $jc(
                $jc(
                    $jc(
                        $jc(
                            $jc(
                                $jc(
                                    $jc(
                                        $jc(
                                            $jc(
                                                $jc(
                                                    $jc(
                                                        $jc(
                                                            $jc(
                                                                $jc(
                                                                    $jc(
                                                                        $jc(
                                                                            $jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc($jc(0, G_search.hashCode), AND.hashCode), OR.hashCode), NOT.hashCode), id.hashCode), id_not.hashCode), id_in.hashCode), id_not_in.hashCode), id_contains.hashCode), id_not_contains.hashCode), id_starts_with.hashCode), id_not_starts_with.hashCode), id_ends_with.hashCode), id_not_ends_with.hashCode), createdAt.hashCode), createdAt_not.hashCode), createdAt_in.hashCode), createdAt_not_in.hashCode), createdAt_lt.hashCode), createdAt_lte.hashCode), createdAt_gt.hashCode), createdAt_gte.hashCode), updatedAt.hashCode), updatedAt_not.hashCode), updatedAt_in.hashCode), updatedAt_not_in.hashCode), updatedAt_lt.hashCode), updatedAt_lte.hashCode), updatedAt_gt.hashCode), updatedAt_gte.hashCode), publishedAt.hashCode), publishedAt_not.hashCode), publishedAt_in.hashCode), publishedAt_not_in.hashCode), publishedAt_lt.hashCode), publishedAt_lte.hashCode), publishedAt_gt.hashCode), publishedAt_gte.hashCode), name.hashCode), name_not.hashCode), name_in.hashCode), name_not_in.hashCode), name_contains.hashCode), name_not_contains.hashCode), name_starts_with.hashCode),
                                                                                name_not_starts_with.hashCode),
                                                                            name_ends_with.hashCode),
                                                                        name_not_ends_with.hashCode),
                                                                    picture.hashCode),
                                                                picture_not.hashCode),
                                                            picture_in.hashCode),
                                                        picture_not_in.hashCode),
                                                    picture_contains.hashCode),
                                                picture_not_contains.hashCode),
                                            picture_starts_with.hashCode),
                                        picture_not_starts_with.hashCode),
                                    picture_ends_with.hashCode),
                                picture_not_ends_with.hashCode),
                            isActive.hashCode),
                        isActive_not.hashCode),
                    kind.hashCode),
                kind_not.hashCode),
            kind_in.hashCode),
        kind_not_in.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GUserWhereInput')
          ..add('G_search', G_search)
          ..add('AND', AND)
          ..add('OR', OR)
          ..add('NOT', NOT)
          ..add('id', id)
          ..add('id_not', id_not)
          ..add('id_in', id_in)
          ..add('id_not_in', id_not_in)
          ..add('id_contains', id_contains)
          ..add('id_not_contains', id_not_contains)
          ..add('id_starts_with', id_starts_with)
          ..add('id_not_starts_with', id_not_starts_with)
          ..add('id_ends_with', id_ends_with)
          ..add('id_not_ends_with', id_not_ends_with)
          ..add('createdAt', createdAt)
          ..add('createdAt_not', createdAt_not)
          ..add('createdAt_in', createdAt_in)
          ..add('createdAt_not_in', createdAt_not_in)
          ..add('createdAt_lt', createdAt_lt)
          ..add('createdAt_lte', createdAt_lte)
          ..add('createdAt_gt', createdAt_gt)
          ..add('createdAt_gte', createdAt_gte)
          ..add('updatedAt', updatedAt)
          ..add('updatedAt_not', updatedAt_not)
          ..add('updatedAt_in', updatedAt_in)
          ..add('updatedAt_not_in', updatedAt_not_in)
          ..add('updatedAt_lt', updatedAt_lt)
          ..add('updatedAt_lte', updatedAt_lte)
          ..add('updatedAt_gt', updatedAt_gt)
          ..add('updatedAt_gte', updatedAt_gte)
          ..add('publishedAt', publishedAt)
          ..add('publishedAt_not', publishedAt_not)
          ..add('publishedAt_in', publishedAt_in)
          ..add('publishedAt_not_in', publishedAt_not_in)
          ..add('publishedAt_lt', publishedAt_lt)
          ..add('publishedAt_lte', publishedAt_lte)
          ..add('publishedAt_gt', publishedAt_gt)
          ..add('publishedAt_gte', publishedAt_gte)
          ..add('name', name)
          ..add('name_not', name_not)
          ..add('name_in', name_in)
          ..add('name_not_in', name_not_in)
          ..add('name_contains', name_contains)
          ..add('name_not_contains', name_not_contains)
          ..add('name_starts_with', name_starts_with)
          ..add('name_not_starts_with', name_not_starts_with)
          ..add('name_ends_with', name_ends_with)
          ..add('name_not_ends_with', name_not_ends_with)
          ..add('picture', picture)
          ..add('picture_not', picture_not)
          ..add('picture_in', picture_in)
          ..add('picture_not_in', picture_not_in)
          ..add('picture_contains', picture_contains)
          ..add('picture_not_contains', picture_not_contains)
          ..add('picture_starts_with', picture_starts_with)
          ..add('picture_not_starts_with', picture_not_starts_with)
          ..add('picture_ends_with', picture_ends_with)
          ..add('picture_not_ends_with', picture_not_ends_with)
          ..add('isActive', isActive)
          ..add('isActive_not', isActive_not)
          ..add('kind', kind)
          ..add('kind_not', kind_not)
          ..add('kind_in', kind_in)
          ..add('kind_not_in', kind_not_in))
        .toString();
  }
}

class GUserWhereInputBuilder
    implements Builder<GUserWhereInput, GUserWhereInputBuilder> {
  _$GUserWhereInput? _$v;

  String? _G_search;
  String? get G_search => _$this._G_search;
  set G_search(String? G_search) => _$this._G_search = G_search;

  ListBuilder<GUserWhereInput>? _AND;
  ListBuilder<GUserWhereInput> get AND =>
      _$this._AND ??= new ListBuilder<GUserWhereInput>();
  set AND(ListBuilder<GUserWhereInput>? AND) => _$this._AND = AND;

  ListBuilder<GUserWhereInput>? _OR;
  ListBuilder<GUserWhereInput> get OR =>
      _$this._OR ??= new ListBuilder<GUserWhereInput>();
  set OR(ListBuilder<GUserWhereInput>? OR) => _$this._OR = OR;

  ListBuilder<GUserWhereInput>? _NOT;
  ListBuilder<GUserWhereInput> get NOT =>
      _$this._NOT ??= new ListBuilder<GUserWhereInput>();
  set NOT(ListBuilder<GUserWhereInput>? NOT) => _$this._NOT = NOT;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  String? _id_not;
  String? get id_not => _$this._id_not;
  set id_not(String? id_not) => _$this._id_not = id_not;

  ListBuilder<String>? _id_in;
  ListBuilder<String> get id_in => _$this._id_in ??= new ListBuilder<String>();
  set id_in(ListBuilder<String>? id_in) => _$this._id_in = id_in;

  ListBuilder<String>? _id_not_in;
  ListBuilder<String> get id_not_in =>
      _$this._id_not_in ??= new ListBuilder<String>();
  set id_not_in(ListBuilder<String>? id_not_in) =>
      _$this._id_not_in = id_not_in;

  String? _id_contains;
  String? get id_contains => _$this._id_contains;
  set id_contains(String? id_contains) => _$this._id_contains = id_contains;

  String? _id_not_contains;
  String? get id_not_contains => _$this._id_not_contains;
  set id_not_contains(String? id_not_contains) =>
      _$this._id_not_contains = id_not_contains;

  String? _id_starts_with;
  String? get id_starts_with => _$this._id_starts_with;
  set id_starts_with(String? id_starts_with) =>
      _$this._id_starts_with = id_starts_with;

  String? _id_not_starts_with;
  String? get id_not_starts_with => _$this._id_not_starts_with;
  set id_not_starts_with(String? id_not_starts_with) =>
      _$this._id_not_starts_with = id_not_starts_with;

  String? _id_ends_with;
  String? get id_ends_with => _$this._id_ends_with;
  set id_ends_with(String? id_ends_with) => _$this._id_ends_with = id_ends_with;

  String? _id_not_ends_with;
  String? get id_not_ends_with => _$this._id_not_ends_with;
  set id_not_ends_with(String? id_not_ends_with) =>
      _$this._id_not_ends_with = id_not_ends_with;

  DateTime? _createdAt;
  DateTime? get createdAt => _$this._createdAt;
  set createdAt(DateTime? createdAt) => _$this._createdAt = createdAt;

  DateTime? _createdAt_not;
  DateTime? get createdAt_not => _$this._createdAt_not;
  set createdAt_not(DateTime? createdAt_not) =>
      _$this._createdAt_not = createdAt_not;

  ListBuilder<DateTime>? _createdAt_in;
  ListBuilder<DateTime> get createdAt_in =>
      _$this._createdAt_in ??= new ListBuilder<DateTime>();
  set createdAt_in(ListBuilder<DateTime>? createdAt_in) =>
      _$this._createdAt_in = createdAt_in;

  ListBuilder<DateTime>? _createdAt_not_in;
  ListBuilder<DateTime> get createdAt_not_in =>
      _$this._createdAt_not_in ??= new ListBuilder<DateTime>();
  set createdAt_not_in(ListBuilder<DateTime>? createdAt_not_in) =>
      _$this._createdAt_not_in = createdAt_not_in;

  DateTime? _createdAt_lt;
  DateTime? get createdAt_lt => _$this._createdAt_lt;
  set createdAt_lt(DateTime? createdAt_lt) =>
      _$this._createdAt_lt = createdAt_lt;

  DateTime? _createdAt_lte;
  DateTime? get createdAt_lte => _$this._createdAt_lte;
  set createdAt_lte(DateTime? createdAt_lte) =>
      _$this._createdAt_lte = createdAt_lte;

  DateTime? _createdAt_gt;
  DateTime? get createdAt_gt => _$this._createdAt_gt;
  set createdAt_gt(DateTime? createdAt_gt) =>
      _$this._createdAt_gt = createdAt_gt;

  DateTime? _createdAt_gte;
  DateTime? get createdAt_gte => _$this._createdAt_gte;
  set createdAt_gte(DateTime? createdAt_gte) =>
      _$this._createdAt_gte = createdAt_gte;

  DateTime? _updatedAt;
  DateTime? get updatedAt => _$this._updatedAt;
  set updatedAt(DateTime? updatedAt) => _$this._updatedAt = updatedAt;

  DateTime? _updatedAt_not;
  DateTime? get updatedAt_not => _$this._updatedAt_not;
  set updatedAt_not(DateTime? updatedAt_not) =>
      _$this._updatedAt_not = updatedAt_not;

  ListBuilder<DateTime>? _updatedAt_in;
  ListBuilder<DateTime> get updatedAt_in =>
      _$this._updatedAt_in ??= new ListBuilder<DateTime>();
  set updatedAt_in(ListBuilder<DateTime>? updatedAt_in) =>
      _$this._updatedAt_in = updatedAt_in;

  ListBuilder<DateTime>? _updatedAt_not_in;
  ListBuilder<DateTime> get updatedAt_not_in =>
      _$this._updatedAt_not_in ??= new ListBuilder<DateTime>();
  set updatedAt_not_in(ListBuilder<DateTime>? updatedAt_not_in) =>
      _$this._updatedAt_not_in = updatedAt_not_in;

  DateTime? _updatedAt_lt;
  DateTime? get updatedAt_lt => _$this._updatedAt_lt;
  set updatedAt_lt(DateTime? updatedAt_lt) =>
      _$this._updatedAt_lt = updatedAt_lt;

  DateTime? _updatedAt_lte;
  DateTime? get updatedAt_lte => _$this._updatedAt_lte;
  set updatedAt_lte(DateTime? updatedAt_lte) =>
      _$this._updatedAt_lte = updatedAt_lte;

  DateTime? _updatedAt_gt;
  DateTime? get updatedAt_gt => _$this._updatedAt_gt;
  set updatedAt_gt(DateTime? updatedAt_gt) =>
      _$this._updatedAt_gt = updatedAt_gt;

  DateTime? _updatedAt_gte;
  DateTime? get updatedAt_gte => _$this._updatedAt_gte;
  set updatedAt_gte(DateTime? updatedAt_gte) =>
      _$this._updatedAt_gte = updatedAt_gte;

  DateTime? _publishedAt;
  DateTime? get publishedAt => _$this._publishedAt;
  set publishedAt(DateTime? publishedAt) => _$this._publishedAt = publishedAt;

  DateTime? _publishedAt_not;
  DateTime? get publishedAt_not => _$this._publishedAt_not;
  set publishedAt_not(DateTime? publishedAt_not) =>
      _$this._publishedAt_not = publishedAt_not;

  ListBuilder<DateTime>? _publishedAt_in;
  ListBuilder<DateTime> get publishedAt_in =>
      _$this._publishedAt_in ??= new ListBuilder<DateTime>();
  set publishedAt_in(ListBuilder<DateTime>? publishedAt_in) =>
      _$this._publishedAt_in = publishedAt_in;

  ListBuilder<DateTime>? _publishedAt_not_in;
  ListBuilder<DateTime> get publishedAt_not_in =>
      _$this._publishedAt_not_in ??= new ListBuilder<DateTime>();
  set publishedAt_not_in(ListBuilder<DateTime>? publishedAt_not_in) =>
      _$this._publishedAt_not_in = publishedAt_not_in;

  DateTime? _publishedAt_lt;
  DateTime? get publishedAt_lt => _$this._publishedAt_lt;
  set publishedAt_lt(DateTime? publishedAt_lt) =>
      _$this._publishedAt_lt = publishedAt_lt;

  DateTime? _publishedAt_lte;
  DateTime? get publishedAt_lte => _$this._publishedAt_lte;
  set publishedAt_lte(DateTime? publishedAt_lte) =>
      _$this._publishedAt_lte = publishedAt_lte;

  DateTime? _publishedAt_gt;
  DateTime? get publishedAt_gt => _$this._publishedAt_gt;
  set publishedAt_gt(DateTime? publishedAt_gt) =>
      _$this._publishedAt_gt = publishedAt_gt;

  DateTime? _publishedAt_gte;
  DateTime? get publishedAt_gte => _$this._publishedAt_gte;
  set publishedAt_gte(DateTime? publishedAt_gte) =>
      _$this._publishedAt_gte = publishedAt_gte;

  String? _name;
  String? get name => _$this._name;
  set name(String? name) => _$this._name = name;

  String? _name_not;
  String? get name_not => _$this._name_not;
  set name_not(String? name_not) => _$this._name_not = name_not;

  ListBuilder<String>? _name_in;
  ListBuilder<String> get name_in =>
      _$this._name_in ??= new ListBuilder<String>();
  set name_in(ListBuilder<String>? name_in) => _$this._name_in = name_in;

  ListBuilder<String>? _name_not_in;
  ListBuilder<String> get name_not_in =>
      _$this._name_not_in ??= new ListBuilder<String>();
  set name_not_in(ListBuilder<String>? name_not_in) =>
      _$this._name_not_in = name_not_in;

  String? _name_contains;
  String? get name_contains => _$this._name_contains;
  set name_contains(String? name_contains) =>
      _$this._name_contains = name_contains;

  String? _name_not_contains;
  String? get name_not_contains => _$this._name_not_contains;
  set name_not_contains(String? name_not_contains) =>
      _$this._name_not_contains = name_not_contains;

  String? _name_starts_with;
  String? get name_starts_with => _$this._name_starts_with;
  set name_starts_with(String? name_starts_with) =>
      _$this._name_starts_with = name_starts_with;

  String? _name_not_starts_with;
  String? get name_not_starts_with => _$this._name_not_starts_with;
  set name_not_starts_with(String? name_not_starts_with) =>
      _$this._name_not_starts_with = name_not_starts_with;

  String? _name_ends_with;
  String? get name_ends_with => _$this._name_ends_with;
  set name_ends_with(String? name_ends_with) =>
      _$this._name_ends_with = name_ends_with;

  String? _name_not_ends_with;
  String? get name_not_ends_with => _$this._name_not_ends_with;
  set name_not_ends_with(String? name_not_ends_with) =>
      _$this._name_not_ends_with = name_not_ends_with;

  String? _picture;
  String? get picture => _$this._picture;
  set picture(String? picture) => _$this._picture = picture;

  String? _picture_not;
  String? get picture_not => _$this._picture_not;
  set picture_not(String? picture_not) => _$this._picture_not = picture_not;

  ListBuilder<String>? _picture_in;
  ListBuilder<String> get picture_in =>
      _$this._picture_in ??= new ListBuilder<String>();
  set picture_in(ListBuilder<String>? picture_in) =>
      _$this._picture_in = picture_in;

  ListBuilder<String>? _picture_not_in;
  ListBuilder<String> get picture_not_in =>
      _$this._picture_not_in ??= new ListBuilder<String>();
  set picture_not_in(ListBuilder<String>? picture_not_in) =>
      _$this._picture_not_in = picture_not_in;

  String? _picture_contains;
  String? get picture_contains => _$this._picture_contains;
  set picture_contains(String? picture_contains) =>
      _$this._picture_contains = picture_contains;

  String? _picture_not_contains;
  String? get picture_not_contains => _$this._picture_not_contains;
  set picture_not_contains(String? picture_not_contains) =>
      _$this._picture_not_contains = picture_not_contains;

  String? _picture_starts_with;
  String? get picture_starts_with => _$this._picture_starts_with;
  set picture_starts_with(String? picture_starts_with) =>
      _$this._picture_starts_with = picture_starts_with;

  String? _picture_not_starts_with;
  String? get picture_not_starts_with => _$this._picture_not_starts_with;
  set picture_not_starts_with(String? picture_not_starts_with) =>
      _$this._picture_not_starts_with = picture_not_starts_with;

  String? _picture_ends_with;
  String? get picture_ends_with => _$this._picture_ends_with;
  set picture_ends_with(String? picture_ends_with) =>
      _$this._picture_ends_with = picture_ends_with;

  String? _picture_not_ends_with;
  String? get picture_not_ends_with => _$this._picture_not_ends_with;
  set picture_not_ends_with(String? picture_not_ends_with) =>
      _$this._picture_not_ends_with = picture_not_ends_with;

  bool? _isActive;
  bool? get isActive => _$this._isActive;
  set isActive(bool? isActive) => _$this._isActive = isActive;

  bool? _isActive_not;
  bool? get isActive_not => _$this._isActive_not;
  set isActive_not(bool? isActive_not) => _$this._isActive_not = isActive_not;

  GUserKind? _kind;
  GUserKind? get kind => _$this._kind;
  set kind(GUserKind? kind) => _$this._kind = kind;

  GUserKind? _kind_not;
  GUserKind? get kind_not => _$this._kind_not;
  set kind_not(GUserKind? kind_not) => _$this._kind_not = kind_not;

  ListBuilder<GUserKind>? _kind_in;
  ListBuilder<GUserKind> get kind_in =>
      _$this._kind_in ??= new ListBuilder<GUserKind>();
  set kind_in(ListBuilder<GUserKind>? kind_in) => _$this._kind_in = kind_in;

  ListBuilder<GUserKind>? _kind_not_in;
  ListBuilder<GUserKind> get kind_not_in =>
      _$this._kind_not_in ??= new ListBuilder<GUserKind>();
  set kind_not_in(ListBuilder<GUserKind>? kind_not_in) =>
      _$this._kind_not_in = kind_not_in;

  GUserWhereInputBuilder();

  GUserWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _G_search = $v.G_search;
      _AND = $v.AND?.toBuilder();
      _OR = $v.OR?.toBuilder();
      _NOT = $v.NOT?.toBuilder();
      _id = $v.id;
      _id_not = $v.id_not;
      _id_in = $v.id_in?.toBuilder();
      _id_not_in = $v.id_not_in?.toBuilder();
      _id_contains = $v.id_contains;
      _id_not_contains = $v.id_not_contains;
      _id_starts_with = $v.id_starts_with;
      _id_not_starts_with = $v.id_not_starts_with;
      _id_ends_with = $v.id_ends_with;
      _id_not_ends_with = $v.id_not_ends_with;
      _createdAt = $v.createdAt;
      _createdAt_not = $v.createdAt_not;
      _createdAt_in = $v.createdAt_in?.toBuilder();
      _createdAt_not_in = $v.createdAt_not_in?.toBuilder();
      _createdAt_lt = $v.createdAt_lt;
      _createdAt_lte = $v.createdAt_lte;
      _createdAt_gt = $v.createdAt_gt;
      _createdAt_gte = $v.createdAt_gte;
      _updatedAt = $v.updatedAt;
      _updatedAt_not = $v.updatedAt_not;
      _updatedAt_in = $v.updatedAt_in?.toBuilder();
      _updatedAt_not_in = $v.updatedAt_not_in?.toBuilder();
      _updatedAt_lt = $v.updatedAt_lt;
      _updatedAt_lte = $v.updatedAt_lte;
      _updatedAt_gt = $v.updatedAt_gt;
      _updatedAt_gte = $v.updatedAt_gte;
      _publishedAt = $v.publishedAt;
      _publishedAt_not = $v.publishedAt_not;
      _publishedAt_in = $v.publishedAt_in?.toBuilder();
      _publishedAt_not_in = $v.publishedAt_not_in?.toBuilder();
      _publishedAt_lt = $v.publishedAt_lt;
      _publishedAt_lte = $v.publishedAt_lte;
      _publishedAt_gt = $v.publishedAt_gt;
      _publishedAt_gte = $v.publishedAt_gte;
      _name = $v.name;
      _name_not = $v.name_not;
      _name_in = $v.name_in?.toBuilder();
      _name_not_in = $v.name_not_in?.toBuilder();
      _name_contains = $v.name_contains;
      _name_not_contains = $v.name_not_contains;
      _name_starts_with = $v.name_starts_with;
      _name_not_starts_with = $v.name_not_starts_with;
      _name_ends_with = $v.name_ends_with;
      _name_not_ends_with = $v.name_not_ends_with;
      _picture = $v.picture;
      _picture_not = $v.picture_not;
      _picture_in = $v.picture_in?.toBuilder();
      _picture_not_in = $v.picture_not_in?.toBuilder();
      _picture_contains = $v.picture_contains;
      _picture_not_contains = $v.picture_not_contains;
      _picture_starts_with = $v.picture_starts_with;
      _picture_not_starts_with = $v.picture_not_starts_with;
      _picture_ends_with = $v.picture_ends_with;
      _picture_not_ends_with = $v.picture_not_ends_with;
      _isActive = $v.isActive;
      _isActive_not = $v.isActive_not;
      _kind = $v.kind;
      _kind_not = $v.kind_not;
      _kind_in = $v.kind_in?.toBuilder();
      _kind_not_in = $v.kind_not_in?.toBuilder();
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserWhereInput;
  }

  @override
  void update(void Function(GUserWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GUserWhereInput build() {
    _$GUserWhereInput _$result;
    try {
      _$result = _$v ??
          new _$GUserWhereInput._(
              G_search: G_search,
              AND: _AND?.build(),
              OR: _OR?.build(),
              NOT: _NOT?.build(),
              id: id,
              id_not: id_not,
              id_in: _id_in?.build(),
              id_not_in: _id_not_in?.build(),
              id_contains: id_contains,
              id_not_contains: id_not_contains,
              id_starts_with: id_starts_with,
              id_not_starts_with: id_not_starts_with,
              id_ends_with: id_ends_with,
              id_not_ends_with: id_not_ends_with,
              createdAt: createdAt,
              createdAt_not: createdAt_not,
              createdAt_in: _createdAt_in?.build(),
              createdAt_not_in: _createdAt_not_in?.build(),
              createdAt_lt: createdAt_lt,
              createdAt_lte: createdAt_lte,
              createdAt_gt: createdAt_gt,
              createdAt_gte: createdAt_gte,
              updatedAt: updatedAt,
              updatedAt_not: updatedAt_not,
              updatedAt_in: _updatedAt_in?.build(),
              updatedAt_not_in: _updatedAt_not_in?.build(),
              updatedAt_lt: updatedAt_lt,
              updatedAt_lte: updatedAt_lte,
              updatedAt_gt: updatedAt_gt,
              updatedAt_gte: updatedAt_gte,
              publishedAt: publishedAt,
              publishedAt_not: publishedAt_not,
              publishedAt_in: _publishedAt_in?.build(),
              publishedAt_not_in: _publishedAt_not_in?.build(),
              publishedAt_lt: publishedAt_lt,
              publishedAt_lte: publishedAt_lte,
              publishedAt_gt: publishedAt_gt,
              publishedAt_gte: publishedAt_gte,
              name: name,
              name_not: name_not,
              name_in: _name_in?.build(),
              name_not_in: _name_not_in?.build(),
              name_contains: name_contains,
              name_not_contains: name_not_contains,
              name_starts_with: name_starts_with,
              name_not_starts_with: name_not_starts_with,
              name_ends_with: name_ends_with,
              name_not_ends_with: name_not_ends_with,
              picture: picture,
              picture_not: picture_not,
              picture_in: _picture_in?.build(),
              picture_not_in: _picture_not_in?.build(),
              picture_contains: picture_contains,
              picture_not_contains: picture_not_contains,
              picture_starts_with: picture_starts_with,
              picture_not_starts_with: picture_not_starts_with,
              picture_ends_with: picture_ends_with,
              picture_not_ends_with: picture_not_ends_with,
              isActive: isActive,
              isActive_not: isActive_not,
              kind: kind,
              kind_not: kind_not,
              kind_in: _kind_in?.build(),
              kind_not_in: _kind_not_in?.build());
    } catch (_) {
      late String _$failedField;
      try {
        _$failedField = 'AND';
        _AND?.build();
        _$failedField = 'OR';
        _OR?.build();
        _$failedField = 'NOT';
        _NOT?.build();

        _$failedField = 'id_in';
        _id_in?.build();
        _$failedField = 'id_not_in';
        _id_not_in?.build();

        _$failedField = 'createdAt_in';
        _createdAt_in?.build();
        _$failedField = 'createdAt_not_in';
        _createdAt_not_in?.build();

        _$failedField = 'updatedAt_in';
        _updatedAt_in?.build();
        _$failedField = 'updatedAt_not_in';
        _updatedAt_not_in?.build();

        _$failedField = 'publishedAt_in';
        _publishedAt_in?.build();
        _$failedField = 'publishedAt_not_in';
        _publishedAt_not_in?.build();

        _$failedField = 'name_in';
        _name_in?.build();
        _$failedField = 'name_not_in';
        _name_not_in?.build();

        _$failedField = 'picture_in';
        _picture_in?.build();
        _$failedField = 'picture_not_in';
        _picture_not_in?.build();

        _$failedField = 'kind_in';
        _kind_in?.build();
        _$failedField = 'kind_not_in';
        _kind_not_in?.build();
      } catch (e) {
        throw new BuiltValueNestedFieldError(
            'GUserWhereInput', _$failedField, e.toString());
      }
      rethrow;
    }
    replace(_$result);
    return _$result;
  }
}

class _$GUserWhereUniqueInput extends GUserWhereUniqueInput {
  @override
  final String? id;

  factory _$GUserWhereUniqueInput(
          [void Function(GUserWhereUniqueInputBuilder)? updates]) =>
      (new GUserWhereUniqueInputBuilder()..update(updates)).build();

  _$GUserWhereUniqueInput._({this.id}) : super._();

  @override
  GUserWhereUniqueInput rebuild(
          void Function(GUserWhereUniqueInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GUserWhereUniqueInputBuilder toBuilder() =>
      new GUserWhereUniqueInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GUserWhereUniqueInput && id == other.id;
  }

  @override
  int get hashCode {
    return $jf($jc(0, id.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GUserWhereUniqueInput')..add('id', id))
        .toString();
  }
}

class GUserWhereUniqueInputBuilder
    implements Builder<GUserWhereUniqueInput, GUserWhereUniqueInputBuilder> {
  _$GUserWhereUniqueInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GUserWhereUniqueInputBuilder();

  GUserWhereUniqueInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GUserWhereUniqueInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GUserWhereUniqueInput;
  }

  @override
  void update(void Function(GUserWhereUniqueInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GUserWhereUniqueInput build() {
    final _$result = _$v ?? new _$GUserWhereUniqueInput._(id: id);
    replace(_$result);
    return _$result;
  }
}

class _$GVersionWhereInput extends GVersionWhereInput {
  @override
  final String id;
  @override
  final GStage stage;
  @override
  final int revision;

  factory _$GVersionWhereInput(
          [void Function(GVersionWhereInputBuilder)? updates]) =>
      (new GVersionWhereInputBuilder()..update(updates)).build();

  _$GVersionWhereInput._(
      {required this.id, required this.stage, required this.revision})
      : super._() {
    BuiltValueNullFieldError.checkNotNull(id, 'GVersionWhereInput', 'id');
    BuiltValueNullFieldError.checkNotNull(stage, 'GVersionWhereInput', 'stage');
    BuiltValueNullFieldError.checkNotNull(
        revision, 'GVersionWhereInput', 'revision');
  }

  @override
  GVersionWhereInput rebuild(
          void Function(GVersionWhereInputBuilder) updates) =>
      (toBuilder()..update(updates)).build();

  @override
  GVersionWhereInputBuilder toBuilder() =>
      new GVersionWhereInputBuilder()..replace(this);

  @override
  bool operator ==(Object other) {
    if (identical(other, this)) return true;
    return other is GVersionWhereInput &&
        id == other.id &&
        stage == other.stage &&
        revision == other.revision;
  }

  @override
  int get hashCode {
    return $jf(
        $jc($jc($jc(0, id.hashCode), stage.hashCode), revision.hashCode));
  }

  @override
  String toString() {
    return (newBuiltValueToStringHelper('GVersionWhereInput')
          ..add('id', id)
          ..add('stage', stage)
          ..add('revision', revision))
        .toString();
  }
}

class GVersionWhereInputBuilder
    implements Builder<GVersionWhereInput, GVersionWhereInputBuilder> {
  _$GVersionWhereInput? _$v;

  String? _id;
  String? get id => _$this._id;
  set id(String? id) => _$this._id = id;

  GStage? _stage;
  GStage? get stage => _$this._stage;
  set stage(GStage? stage) => _$this._stage = stage;

  int? _revision;
  int? get revision => _$this._revision;
  set revision(int? revision) => _$this._revision = revision;

  GVersionWhereInputBuilder();

  GVersionWhereInputBuilder get _$this {
    final $v = _$v;
    if ($v != null) {
      _id = $v.id;
      _stage = $v.stage;
      _revision = $v.revision;
      _$v = null;
    }
    return this;
  }

  @override
  void replace(GVersionWhereInput other) {
    ArgumentError.checkNotNull(other, 'other');
    _$v = other as _$GVersionWhereInput;
  }

  @override
  void update(void Function(GVersionWhereInputBuilder)? updates) {
    if (updates != null) updates(this);
  }

  @override
  _$GVersionWhereInput build() {
    final _$result = _$v ??
        new _$GVersionWhereInput._(
            id: BuiltValueNullFieldError.checkNotNull(
                id, 'GVersionWhereInput', 'id'),
            stage: BuiltValueNullFieldError.checkNotNull(
                stage, 'GVersionWhereInput', 'stage'),
            revision: BuiltValueNullFieldError.checkNotNull(
                revision, 'GVersionWhereInput', 'revision'));
    replace(_$result);
    return _$result;
  }
}

// ignore_for_file: always_put_control_body_on_new_line,always_specify_types,annotate_overrides,avoid_annotating_with_dynamic,avoid_as,avoid_catches_without_on_clauses,avoid_returning_this,lines_longer_than_80_chars,omit_local_variable_types,prefer_expression_function_bodies,sort_constructors_first,test_types_in_equals,unnecessary_const,unnecessary_new
